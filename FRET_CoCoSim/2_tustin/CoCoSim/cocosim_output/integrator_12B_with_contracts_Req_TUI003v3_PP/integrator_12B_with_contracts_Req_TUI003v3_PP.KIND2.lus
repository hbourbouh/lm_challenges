-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 01-Nov-2019 15:56:15
(*
Original block name: integrator_12B_with_contracts_Req_TUI003v3_PP/Tustin
Integrator
(Limited, Resettable, States)/Saturation
Dynamic
*)
node  Saturation_newline_Dynamic_1557_009(
	up_1 : real; u_1 : real; lo_1 : real; __time_step : real; __nb_step : int;)
returns(
	y_1 : real;);
var 
	Switch_1 : real; Switch2_1 : real;
let
	Switch_1 = if ( (u_1 < lo_1) ) then
		lo_1
	    else u_1;
	Switch2_1 = if ( (u_1 > up_1) ) then
		up_1
	    else Switch_1;
	y_1 = Switch2_1;
tel

(*
Original block name: integrator_12B_with_contracts_Req_TUI003v3_PP/Tustin
Integrator
(Limited, Resettable, States)/bounds
*)
node  bounds_1598_009(
	TL_1 : real; BL_1 : real; __time_step : real; __nb_step : int;)
returns(
	TLc_1 : real; BLc_1 : real;);
var 
	RelationalOperator_1 : bool; Switch1_1 : real; Switch2_1 : real;
let
	RelationalOperator_1 = (TL_1 < BL_1);
	Switch1_1 = if RelationalOperator_1 then
		BL_1
	    else TL_1;
	Switch2_1 = if RelationalOperator_1 then
		TL_1
	    else BL_1;
	TLc_1 = Switch1_1;
	BLc_1 = Switch2_1;
tel

(*
Original block name: integrator_12B_with_contracts_Req_TUI003v3_PP/integrator_12B_Tustin_IntegratorSpec/TUI003v3
*)
node  TUI003v3_1656_009(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: integrator_12B_with_contracts_Req_TUI003v3_PP/integrator_12B_Tustin_IntegratorSpec/assume
*)
node  assume_1662_009(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	assume_1 : bool;);
let
	assume_1 = In1_1;
tel

(*
Original block name: integrator_12B_with_contracts_Req_TUI003v3_PP/integrator_12B_Tustin_IntegratorSpec/spec160_operator
*)
node  spec160_operator_1671_009(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: integrator_12B_with_contracts_Req_TUI003v3_PP/integrator_12B_Tustin_IntegratorSpec
*)
contract integrator_12B_Tustin_IntegratorSpec_1645_009(
	Tustin_IntegratorSpec_RESET_1 : bool; Tustin_IntegratorSpec_T_1 : real; Tustin_IntegratorSpec_BL_1 : real; Tustin_IntegratorSpec_TL_1 : real; Tustin_IntegratorSpec_IC_1 : real;
	Tustin_IntegratorSpec_xin_1 : real; __time_step : real; __nb_step : int;)
returns(
	Tustin_IntegratorSpec_yout_1 : real;);
let
	var Arrow_xxTustin_IntegratorSpec_7_ni_1_1 : bool = (true -> (pre (false)));
	var TUI003v3_1 : bool = TUI003v3_1656_009(spec160_operator_1, __time_step, __nb_step);
	guarantee "TUI003v3_1656_009" TUI003v3_1;
	var assume_1 : bool = assume_1662_009((Tustin_IntegratorSpec_BL_1 <= Tustin_IntegratorSpec_TL_1), __time_step, __nb_step);
	assume "assume_1662_009" assume_1;
	var branch_8_IF_1 : real = if Arrow_xxTustin_IntegratorSpec_7_ni_1_1 then
		xxTustin_IntegratorSpec_8_rhs_1
	    else ( (0.0 -> (pre (Tustin_IntegratorSpec_yout_1))) );
	var branch_9_IF_1 : real = if Arrow_xxTustin_IntegratorSpec_7_ni_1_1 then
		xxTustin_IntegratorSpec_8_rhs_1
	    else ( (0.0 -> (pre (Tustin_IntegratorSpec_xin_1))) );
	var normal_yout_operator_1 : real = ( 1.0 * ( 1.0 * Tustin_IntegratorSpec_T_1 * 0.50 ) * ( Tustin_IntegratorSpec_xin_1 + branch_9_IF_1 ) ) + branch_8_IF_1;
	var spec160_operator_1 : bool = spec160_operator_1671_009(( ( (not (Tustin_IntegratorSpec_RESET_1)) ) and ( (normal_yout_operator_1 <= Tustin_IntegratorSpec_TL_1) ) ) and ( (normal_yout_operator_1 >= Tustin_IntegratorSpec_BL_1) ), (Tustin_IntegratorSpec_yout_1 = normal_yout_operator_1), __time_step, __nb_step);
	var xxTustin_IntegratorSpec_8_rhs_1 : real = 0.0;
	assume "NB_STEP" (__nb_step = (0 -> ((pre (__nb_step)) + 1)));
	assume "TIME_STEP" (__time_step = (0.0 -> ((pre (__time_step)) + 1.0)));
tel

(*
Original block name: integrator_12B_with_contracts_Req_TUI003v3_PP/Tustin
Integrator
(Limited, Resettable, States)
*)
node  Tustin_newline_Integrator_newline__lpar_Limited_comma_Resettable_comma_States_rpar__1544_009(
	xin_1 : real; T_1 : real; TL_1 : real; BL_1 : real; reset_1 : bool;
	ic_1 : real; __time_step : real; __nb_step : int;)
returns(
	yout_1 : real;);
(*@contract
	import integrator_12B_Tustin_IntegratorSpec_1645_009(reset_1, T_1, BL_1, TL_1, ic_1, xin_1, __time_step, __nb_step) returns (yout_1);
*)
var 
	Saturation_newline_Dynamic_1 : real; Switch_1 : real; bounds_1 : real; bounds_2 : real;
let
	Saturation_newline_Dynamic_1 = Saturation_newline_Dynamic_1557_009(bounds_1, Switch_1, bounds_2, __time_step, __nb_step);
	Switch_1 = if reset_1 then
		ic_1
	    else ( ( (0.0 -> (pre (Saturation_newline_Dynamic_1))) ) + ( 1.0 * ( (( xin_1 + ( (0.0 -> (pre (xin_1))) ) ) * 0.50) ) * T_1 ) );
	(bounds_1, bounds_2) = bounds_1598_009(TL_1, BL_1, __time_step, __nb_step);
	yout_1 = Saturation_newline_Dynamic_1;
tel

(*
Original block name: integrator_12B_with_contracts_Req_TUI003v3_PP
*)
node  integrator_12B_with_contracts_Req_TUI003v3_PP(
	xin_1 : real; reset_1 : bool; T_1 : real; ic_1 : real; TL_1 : real;
	BL_1 : real;)
returns(
	yout_1 : real;);
var 
	Tustin_newline_Integrator_newline__lpar_Limited_comma_Resettable_comma_States_rpar__1 : real; __time_step : real; __nb_step : int;
let
	Tustin_newline_Integrator_newline__lpar_Limited_comma_Resettable_comma_States_rpar__1 = Tustin_newline_Integrator_newline__lpar_Limited_comma_Resettable_comma_States_rpar__1544_009(xin_1, T_1, TL_1, BL_1, reset_1, ic_1, __time_step, __nb_step);
	yout_1 = Tustin_newline_Integrator_newline__lpar_Limited_comma_Resettable_comma_States_rpar__1;
	__time_step = (0.0 -> ((pre (__time_step)) + 1.0));
	__nb_step = (0 -> ((pre (__nb_step)) + 1));
tel

