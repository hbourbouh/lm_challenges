--Historically
node H(X:bool) returns (Y:bool);
let
    Y = X -> (X and (pre Y));
tel

--Y since inclusive X
node SI(X,Y: bool) returns (Z:bool);
let
Z = Y and (X or (false -> pre Z));
tel

--Y since X
node S(X,Y: bool) returns (Z:bool);
let
Z = X or (Y and (false -> pre Z));
tel

--Once
node O(X:bool) returns (Y:bool);
let
 Y = X or (false -> pre Y);
tel

--Timed Once: less than or equal to N
node OTlore(const N: int; X: bool;) returns (Y: bool);
    var C:int;
let
    C = if X then 0
        else (-1 -> pre C + (if pre C <0 then 0 else 1));

    Y = 0 <= C and C <= N;
tel

--Timed Once: general case
node OT(const L: int; const R: int; X: bool;) returns (Y: bool);
var  D:bool;
let
  D=delay(X, R);
  Y=OTlore(L-R, D);
tel

-- Timed Historically: general case
node HT(const L: int; const R: int; X: bool;) returns (Y: bool);
let
  Y = not OT(L, R, not X);
tel

-- Timed Since: general case
node ST(const L: int; const R: int; X: bool; Y: bool;)  returns (Z: bool);
let
  Z = S(X, Y) and OT(L, R, X);
tel

-- Timed Since: general case
node SIT(const L: int; const R: int; X: bool; Y: bool;) returns (Z: bool);
let
  Z = SI(X, Y) and OT(L, R, X);
tel


node delay(X:bool; const R:int;) returns(Y:bool);
let

  Y = X;
 
tel



(*@contract Tustin_IntegratorSpec (RESET:bool; T:real; BL:real; TL:real; IC:real; xin:real; ) returns (yout: real; );

let
var FTP: bool = true -> false;


var normal_yout : real = T * 0.5 * ( xin + xinpv ) + ypv;
var xinpv: real = 0.0 -> pre xin;
var ypv: real = 0.0 -> pre yout;

assume BL <=  TL;

(* Req text: Tustin_Integrator shall always satisfy yout <= TL &  yout >= BL  *)
guarantee "TUI-002" yout <= TL and yout >= BL;


(* Req text: Tustin_Integrator shall always satisfy (BL <= IC & IC <= TL & RESET)  => yout = IC  *)
guarantee "TUI-001" (BL <= IC and IC <= TL and RESET ) => yout = IC;


(* Req text: Tustin_Integrator shall always satisfy normal => yout = normal_yout  *)

var normalv1: bool = not RESET and yout <= TL and yout >= BL;
guarantee "TUI-003v1" normalv1 => yout = normal_yout;

var normalv2: bool = not RESET; 
guarantee "TUI-003v2" normalv2 => yout = normal_yout;

var normalv3: bool = not RESET and normal_yout <= TL and normal_yout >= BL;
guarantee "TUI-003v3"  normalv3 => (yout = normal_yout);

tel
*)

