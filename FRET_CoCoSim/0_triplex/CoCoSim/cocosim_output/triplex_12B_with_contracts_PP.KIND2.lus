-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 30-Oct-2019 18:32:18
node  int_to_int32(
	x : int;)
returns(
	y : int;);
let
	--Type-casting was disabled. See Tools -> CoCoSim -> Preferences -> NASA compiler preferences.
	y = x;
tel

node  int_to_real(
	x : int;)
returns(
	y : real;);
let
	y = (real (x));
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Actions/Act1
*)
node  Act1_20_578(
	state_1 : int; state_2 : int; state_3 : int; __time_step : real; __nb_step : int;)
returns(
	NextState_1 : int; NextState_2 : int; NextState_3 : int;);
var 
	Demux_1 : int;
let
	assert (((- (2147483648)) <= state_1) and (state_1 <= 2147483647));
	assert (((- (2147483648)) <= state_2) and (state_2 <= 2147483647));
	assert (((- (2147483648)) <= state_3) and (state_3 <= 2147483647));
	Demux_1 = state_1;
	NextState_1 = 0;
	NextState_2 = state_2;
	NextState_3 = state_3;
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Actions/Act1
*)
node  Act1_20_578_condExecSS(
	state_1 : int; state_2 : int; state_3 : int; _isEnabled : bool; __time_step : real;
	__nb_step : int;)
returns(
	NextState_1 : int; NextState_2 : int; NextState_3 : int;);
var 
	pre_NextState_1 : int; pre_NextState_2 : int; pre_NextState_3 : int;
let
	pre_NextState_1 = if (__nb_step > 0) then
		(pre (NextState_1))
	    else 0;
	pre_NextState_2 = if (__nb_step > 0) then
		(pre (NextState_2))
	    else 0;
	pre_NextState_3 = if (__nb_step > 0) then
		(pre (NextState_3))
	    else 0;
	(NextState_1, NextState_2, NextState_3) = merge(_isEnabled;
		 (activate Act1_20_578 every _isEnabled)(state_1, state_2, state_3, __time_step, __nb_step); 
		(pre_NextState_1, pre_NextState_2, pre_NextState_3) when not(_isEnabled));
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Actions/Act2
*)
node  Act2_40_578(
	state_1 : int; state_2 : int; state_3 : int; __time_step : real; __nb_step : int;)
returns(
	NextState_1 : int; NextState_2 : int; NextState_3 : int;);
var 
	Sum_1 : int;
let
	assert (((- (2147483648)) <= state_1) and (state_1 <= 2147483647));
	assert (((- (2147483648)) <= state_2) and (state_2 <= 2147483647));
	assert (((- (2147483648)) <= state_3) and (state_3 <= 2147483647));
	Sum_1 = int_to_int32(0 - 1 + state_1);
	NextState_1 = Sum_1;
	NextState_2 = state_2;
	NextState_3 = state_3;
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Actions/Act2
*)
node  Act2_40_578_condExecSS(
	state_1 : int; state_2 : int; state_3 : int; _isEnabled : bool; __time_step : real;
	__nb_step : int;)
returns(
	NextState_1 : int; NextState_2 : int; NextState_3 : int;);
var 
	pre_NextState_1 : int; pre_NextState_2 : int; pre_NextState_3 : int;
let
	pre_NextState_1 = if (__nb_step > 0) then
		(pre (NextState_1))
	    else 0;
	pre_NextState_2 = if (__nb_step > 0) then
		(pre (NextState_2))
	    else 0;
	pre_NextState_3 = if (__nb_step > 0) then
		(pre (NextState_3))
	    else 0;
	(NextState_1, NextState_2, NextState_3) = merge(_isEnabled;
		 (activate Act2_40_578 every _isEnabled)(state_1, state_2, state_3, __time_step, __nb_step); 
		(pre_NextState_1, pre_NextState_2, pre_NextState_3) when not(_isEnabled));
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Actions/Act3
*)
node  Act3_61_578(
	state_1 : int; state_2 : int; state_3 : int; __time_step : real; __nb_step : int;)
returns(
	NextState_1 : int; NextState_2 : int; NextState_3 : int;);
let
	assert (((- (2147483648)) <= state_1) and (state_1 <= 2147483647));
	assert (((- (2147483648)) <= state_2) and (state_2 <= 2147483647));
	assert (((- (2147483648)) <= state_3) and (state_3 <= 2147483647));
	NextState_1 = state_1;
	NextState_2 = state_2;
	NextState_3 = state_3;
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Actions/Act3
*)
node  Act3_61_578_condExecSS(
	state_1 : int; state_2 : int; state_3 : int; _isEnabled : bool; __time_step : real;
	__nb_step : int;)
returns(
	NextState_1 : int; NextState_2 : int; NextState_3 : int;);
var 
	pre_NextState_1 : int; pre_NextState_2 : int; pre_NextState_3 : int;
let
	pre_NextState_1 = if (__nb_step > 0) then
		(pre (NextState_1))
	    else 0;
	pre_NextState_2 = if (__nb_step > 0) then
		(pre (NextState_2))
	    else 0;
	pre_NextState_3 = if (__nb_step > 0) then
		(pre (NextState_3))
	    else 0;
	(NextState_1, NextState_2, NextState_3) = merge(_isEnabled;
		 (activate Act3_61_578 every _isEnabled)(state_1, state_2, state_3, __time_step, __nb_step); 
		(pre_NextState_1, pre_NextState_2, pre_NextState_3) when not(_isEnabled));
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Actions/Act4
*)
node  Act4_67_578(
	state_1 : int; state_2 : int; state_3 : int; __time_step : real; __nb_step : int;)
returns(
	NextState_1 : int; NextState_2 : int; NextState_3 : int;);
var 
	Constant1_1 : int; Sum_1 : int; Sum1_1 : int;
let
	assert (((- (2147483648)) <= state_1) and (state_1 <= 2147483647));
	assert (((- (2147483648)) <= state_2) and (state_2 <= 2147483647));
	assert (((- (2147483648)) <= state_3) and (state_3 <= 2147483647));
	Constant1_1 = 1;
	Sum_1 = int_to_int32(Constant1_1 + state_2);
	Sum1_1 = int_to_int32(state_1 + Constant1_1);
	NextState_1 = Sum1_1;
	NextState_2 = Sum_1;
	NextState_3 = state_3;
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Actions/Act4
*)
node  Act4_67_578_condExecSS(
	state_1 : int; state_2 : int; state_3 : int; _isEnabled : bool; __time_step : real;
	__nb_step : int;)
returns(
	NextState_1 : int; NextState_2 : int; NextState_3 : int;);
var 
	pre_NextState_1 : int; pre_NextState_2 : int; pre_NextState_3 : int;
let
	pre_NextState_1 = if (__nb_step > 0) then
		(pre (NextState_1))
	    else 0;
	pre_NextState_2 = if (__nb_step > 0) then
		(pre (NextState_2))
	    else 0;
	pre_NextState_3 = if (__nb_step > 0) then
		(pre (NextState_3))
	    else 0;
	(NextState_1, NextState_2, NextState_3) = merge(_isEnabled;
		 (activate Act4_67_578 every _isEnabled)(state_1, state_2, state_3, __time_step, __nb_step); 
		(pre_NextState_1, pre_NextState_2, pre_NextState_3) when not(_isEnabled));
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Actions/Act5
*)
node  Act5_92_578(
	state_1 : int; state_2 : int; state_3 : int; __time_step : real; __nb_step : int;)
returns(
	NextState_1 : int; NextState_2 : int; NextState_3 : int;);
let
	assert (((- (2147483648)) <= state_1) and (state_1 <= 2147483647));
	assert (((- (2147483648)) <= state_2) and (state_2 <= 2147483647));
	assert (((- (2147483648)) <= state_3) and (state_3 <= 2147483647));
	NextState_1 = 0;
	NextState_2 = state_2;
	NextState_3 = 2;
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Actions/Act5
*)
node  Act5_92_578_condExecSS(
	state_1 : int; state_2 : int; state_3 : int; _isEnabled : bool; __time_step : real;
	__nb_step : int;)
returns(
	NextState_1 : int; NextState_2 : int; NextState_3 : int;);
var 
	pre_NextState_1 : int; pre_NextState_2 : int; pre_NextState_3 : int;
let
	pre_NextState_1 = if (__nb_step > 0) then
		(pre (NextState_1))
	    else 0;
	pre_NextState_2 = if (__nb_step > 0) then
		(pre (NextState_2))
	    else 0;
	pre_NextState_3 = if (__nb_step > 0) then
		(pre (NextState_3))
	    else 0;
	(NextState_1, NextState_2, NextState_3) = merge(_isEnabled;
		 (activate Act5_92_578 every _isEnabled)(state_1, state_2, state_3, __time_step, __nb_step); 
		(pre_NextState_1, pre_NextState_2, pre_NextState_3) when not(_isEnabled));
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Actions/Act6
*)
node  Act6_111_578(
	state_1 : int; state_2 : int; state_3 : int; __time_step : real; __nb_step : int;)
returns(
	NextState_1 : int; NextState_2 : int; NextState_3 : int;);
let
	assert (((- (2147483648)) <= state_1) and (state_1 <= 2147483647));
	assert (((- (2147483648)) <= state_2) and (state_2 <= 2147483647));
	assert (((- (2147483648)) <= state_3) and (state_3 <= 2147483647));
	NextState_1 = 0;
	NextState_2 = state_2;
	NextState_3 = 4;
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Actions/Act6
*)
node  Act6_111_578_condExecSS(
	state_1 : int; state_2 : int; state_3 : int; _isEnabled : bool; __time_step : real;
	__nb_step : int;)
returns(
	NextState_1 : int; NextState_2 : int; NextState_3 : int;);
var 
	pre_NextState_1 : int; pre_NextState_2 : int; pre_NextState_3 : int;
let
	pre_NextState_1 = if (__nb_step > 0) then
		(pre (NextState_1))
	    else 0;
	pre_NextState_2 = if (__nb_step > 0) then
		(pre (NextState_2))
	    else 0;
	pre_NextState_3 = if (__nb_step > 0) then
		(pre (NextState_3))
	    else 0;
	(NextState_1, NextState_2, NextState_3) = merge(_isEnabled;
		 (activate Act6_111_578 every _isEnabled)(state_1, state_2, state_3, __time_step, __nb_step); 
		(pre_NextState_1, pre_NextState_2, pre_NextState_3) when not(_isEnabled));
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Actions/Act7
*)
node  Act7_130_578(
	state_1 : int; state_2 : int; state_3 : int; __time_step : real; __nb_step : int;)
returns(
	NextState_1 : int; NextState_2 : int; NextState_3 : int;);
let
	assert (((- (2147483648)) <= state_1) and (state_1 <= 2147483647));
	assert (((- (2147483648)) <= state_2) and (state_2 <= 2147483647));
	assert (((- (2147483648)) <= state_3) and (state_3 <= 2147483647));
	NextState_1 = 0;
	NextState_2 = state_2;
	NextState_3 = 1;
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Actions/Act7
*)
node  Act7_130_578_condExecSS(
	state_1 : int; state_2 : int; state_3 : int; _isEnabled : bool; __time_step : real;
	__nb_step : int;)
returns(
	NextState_1 : int; NextState_2 : int; NextState_3 : int;);
var 
	pre_NextState_1 : int; pre_NextState_2 : int; pre_NextState_3 : int;
let
	pre_NextState_1 = if (__nb_step > 0) then
		(pre (NextState_1))
	    else 0;
	pre_NextState_2 = if (__nb_step > 0) then
		(pre (NextState_2))
	    else 0;
	pre_NextState_3 = if (__nb_step > 0) then
		(pre (NextState_3))
	    else 0;
	(NextState_1, NextState_2, NextState_3) = merge(_isEnabled;
		 (activate Act7_130_578 every _isEnabled)(state_1, state_2, state_3, __time_step, __nb_step); 
		(pre_NextState_1, pre_NextState_2, pre_NextState_3) when not(_isEnabled));
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Actions/Act8
*)
node  Act8_149_578(
	state_1 : int; state_2 : int; state_3 : int; __time_step : real; __nb_step : int;)
returns(
	NextState_1 : int; NextState_2 : int; NextState_3 : int;);
var 
	Sum1_1 : int;
let
	assert (((- (2147483648)) <= state_1) and (state_1 <= 2147483647));
	assert (((- (2147483648)) <= state_2) and (state_2 <= 2147483647));
	assert (((- (2147483648)) <= state_3) and (state_3 <= 2147483647));
	Sum1_1 = int_to_int32(1 + state_2);
	NextState_1 = state_1;
	NextState_2 = Sum1_1;
	NextState_3 = state_3;
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Actions/Act8
*)
node  Act8_149_578_condExecSS(
	state_1 : int; state_2 : int; state_3 : int; _isEnabled : bool; __time_step : real;
	__nb_step : int;)
returns(
	NextState_1 : int; NextState_2 : int; NextState_3 : int;);
var 
	pre_NextState_1 : int; pre_NextState_2 : int; pre_NextState_3 : int;
let
	pre_NextState_1 = if (__nb_step > 0) then
		(pre (NextState_1))
	    else 0;
	pre_NextState_2 = if (__nb_step > 0) then
		(pre (NextState_2))
	    else 0;
	pre_NextState_3 = if (__nb_step > 0) then
		(pre (NextState_3))
	    else 0;
	(NextState_1, NextState_2, NextState_3) = merge(_isEnabled;
		 (activate Act8_149_578 every _isEnabled)(state_1, state_2, state_3, __time_step, __nb_step); 
		(pre_NextState_1, pre_NextState_2, pre_NextState_3) when not(_isEnabled));
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Actions/Action3
*)
node  Action3_170_578(
	C1_1 : bool; C2_1 : bool; C3_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A3_1 : bool;);
var 
	LogicalOperator12_1 : bool;
let
	LogicalOperator12_1 = (not (C3_1));
	A3_1 = ( ( ( ( C1_1 and ( (not (C2_1)) ) ) and LogicalOperator12_1 ) or ( LogicalOperator12_1 and ( ( (not (C1_1)) ) and C2_1 ) ) ) or ( C3_1 and ( ( (not (C1_1)) ) and ( (not (C2_1)) ) ) ) );
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Actions/Action4
*)
node  Action4_225_578(
	C1_1 : bool; C2_1 : bool; C3_1 : bool; C5_1 : bool; __time_step : real;
	__nb_step : int;)
returns(
	A4_1 : bool;);
let
	A4_1 = ( ( ( ( ( C1_1 and C2_1 ) and ( (not (C3_1)) ) ) and ( (not (C5_1)) ) ) or ( ( ( C1_1 and ( (not (C2_1)) ) ) and C3_1 ) and ( (not (C5_1)) ) ) ) or ( ( ( ( (not (C1_1)) ) and C2_1 ) and C3_1 ) and ( (not (C5_1)) ) ) );
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Actions/Action8
*)
node  Action8_297_578(
	C1_1 : bool; C2_1 : bool; C3_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A8_1 : bool;);
let
	A8_1 = ( ( C1_1 and C2_1 ) and C3_1 );
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Actions/Actions1_2
*)
node  Actions1_2_309_578(
	C1_1 : bool; C2_1 : bool; C3_1 : bool; C4_1 : bool; __time_step : real;
	__nb_step : int;)
returns(
	A1_1 : bool; A2_1 : bool;);
var 
	LogicalOperator4_1 : bool;
let
	LogicalOperator4_1 = ( ( ( (not (C1_1)) ) and ( (not (C2_1)) ) ) and ( (not (C3_1)) ) );
	A1_1 = ( ( (not (C4_1)) ) and LogicalOperator4_1 );
	A2_1 = ( LogicalOperator4_1 and C4_1 );
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Actions/Actions5_6_7
*)
node  Actions5_6_7_343_578(
	C1_1 : bool; C2_1 : bool; C3_1 : bool; C5_1 : bool; __time_step : real;
	__nb_step : int;)
returns(
	A5_1 : bool; A6_1 : bool; A7_1 : bool;);
let
	A5_1 = ( ( ( C1_1 and C2_1 ) and ( (not (C3_1)) ) ) and C5_1 );
	A6_1 = ( ( ( C1_1 and ( (not (C2_1)) ) ) and C3_1 ) and C5_1 );
	A7_1 = ( ( ( ( (not (C1_1)) ) and C2_1 ) and C3_1 ) and C5_1 );
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Actions
*)
node  Actions_13_578(
	C1_1 : bool; C2_1 : bool; C3_1 : bool; C4_1 : bool; C5_1 : bool;
	state_1 : int; state_2 : int; state_3 : int; __time_step : real; __nb_step : int;)
returns(
	NextState_1 : int; NextState_2 : int; NextState_3 : int;);
var 
	ExecutionCond_of_Act1_20_578 : bool; Act1_1 : int; Act1_2 : int; Act1_3 : int; ExecutionCond_of_Act2_40_578 : bool;
	Act2_1 : int; Act2_2 : int; Act2_3 : int; ExecutionCond_of_Act3_61_578 : bool; Act3_1 : int;
	Act3_2 : int; Act3_3 : int; ExecutionCond_of_Act4_67_578 : bool; Act4_1 : int; Act4_2 : int;
	Act4_3 : int; ExecutionCond_of_Act5_92_578 : bool; Act5_1 : int; Act5_2 : int; Act5_3 : int;
	ExecutionCond_of_Act6_111_578 : bool; Act6_1 : int; Act6_2 : int; Act6_3 : int; ExecutionCond_of_Act7_130_578 : bool;
	Act7_1 : int; Act7_2 : int; Act7_3 : int; ExecutionCond_of_Act8_149_578 : bool; Act8_1 : int;
	Act8_2 : int; Act8_3 : int; Action3_1 : bool; Action4_1 : bool; Action8_1 : bool;
	Actions1_2_1 : bool; Actions1_2_2 : bool; Actions5_6_7_1 : bool; Actions5_6_7_2 : bool; Actions5_6_7_3 : bool;
	If_1 : bool; If_2 : bool; If_3 : bool; If_4 : bool; If_5 : bool;
	If_6 : bool; If_7 : bool; If_8 : bool; Merge_1 : int; Merge_2 : int;
	Merge_3 : int;
let
	assert (((- (2147483648)) <= state_1) and (state_1 <= 2147483647));
	assert (((- (2147483648)) <= state_2) and (state_2 <= 2147483647));
	assert (((- (2147483648)) <= state_3) and (state_3 <= 2147483647));
	ExecutionCond_of_Act1_20_578 = If_1;
	(Act1_1, Act1_2, Act1_3) = Act1_20_578_condExecSS(state_1, state_2, state_3, ExecutionCond_of_Act1_20_578, __time_step, __nb_step);
	ExecutionCond_of_Act2_40_578 = If_2;
	(Act2_1, Act2_2, Act2_3) = Act2_40_578_condExecSS(state_1, state_2, state_3, ExecutionCond_of_Act2_40_578, __time_step, __nb_step);
	ExecutionCond_of_Act3_61_578 = If_3;
	(Act3_1, Act3_2, Act3_3) = Act3_61_578_condExecSS(state_1, state_2, state_3, ExecutionCond_of_Act3_61_578, __time_step, __nb_step);
	ExecutionCond_of_Act4_67_578 = If_4;
	(Act4_1, Act4_2, Act4_3) = Act4_67_578_condExecSS(state_1, state_2, state_3, ExecutionCond_of_Act4_67_578, __time_step, __nb_step);
	ExecutionCond_of_Act5_92_578 = If_5;
	(Act5_1, Act5_2, Act5_3) = Act5_92_578_condExecSS(state_1, state_2, state_3, ExecutionCond_of_Act5_92_578, __time_step, __nb_step);
	ExecutionCond_of_Act6_111_578 = If_6;
	(Act6_1, Act6_2, Act6_3) = Act6_111_578_condExecSS(state_1, state_2, state_3, ExecutionCond_of_Act6_111_578, __time_step, __nb_step);
	ExecutionCond_of_Act7_130_578 = If_7;
	(Act7_1, Act7_2, Act7_3) = Act7_130_578_condExecSS(state_1, state_2, state_3, ExecutionCond_of_Act7_130_578, __time_step, __nb_step);
	ExecutionCond_of_Act8_149_578 = If_8;
	(Act8_1, Act8_2, Act8_3) = Act8_149_578_condExecSS(state_1, state_2, state_3, ExecutionCond_of_Act8_149_578, __time_step, __nb_step);
	Action3_1 = Action3_170_578(C1_1, C2_1, C3_1, __time_step, __nb_step);
	Action4_1 = Action4_225_578(C1_1, C2_1, C3_1, C5_1, __time_step, __nb_step);
	Action8_1 = Action8_297_578(C1_1, C2_1, C3_1, __time_step, __nb_step);
	(Actions1_2_1, Actions1_2_2) = Actions1_2_309_578(C1_1, C2_1, C3_1, C4_1, __time_step, __nb_step);
	(Actions5_6_7_1, Actions5_6_7_2, Actions5_6_7_3) = Actions5_6_7_343_578(C1_1, C2_1, C3_1, C5_1, __time_step, __nb_step);
	(If_1, If_2, If_3, If_4, If_5, If_6, If_7, If_8) = if Actions1_2_1 then
		(true, false, false, false, false, false, false, false)
	    else if Actions1_2_2 then
		(false, true, false, false, false, false, false, false)
	    else if Action3_1 then
		(false, false, true, false, false, false, false, false)
	    else if Action4_1 then
		(false, false, false, true, false, false, false, false)
	    else if Actions5_6_7_1 then
		(false, false, false, false, true, false, false, false)
	    else if Actions5_6_7_2 then
		(false, false, false, false, false, true, false, false)
	    else if Actions5_6_7_3 then
		(false, false, false, false, false, false, true, false)
	    else if Action8_1 then
		(false, false, false, false, false, false, false, true)
	    else (false, false, false, false, false, false, false, false);
	Merge_1 = if ExecutionCond_of_Act1_20_578 then
		Act1_1
	    else if ExecutionCond_of_Act2_40_578 then
		Act2_1
	    else if ExecutionCond_of_Act3_61_578 then
		Act3_1
	    else if ExecutionCond_of_Act4_67_578 then
		Act4_1
	    else if ExecutionCond_of_Act5_92_578 then
		Act5_1
	    else if ExecutionCond_of_Act6_111_578 then
		Act6_1
	    else if ExecutionCond_of_Act7_130_578 then
		Act7_1
	    else if ExecutionCond_of_Act8_149_578 then
		Act8_1
	    else (0 -> (pre (Merge_1)));
	Merge_2 = if ExecutionCond_of_Act1_20_578 then
		Act1_2
	    else if ExecutionCond_of_Act2_40_578 then
		Act2_2
	    else if ExecutionCond_of_Act3_61_578 then
		Act3_2
	    else if ExecutionCond_of_Act4_67_578 then
		Act4_2
	    else if ExecutionCond_of_Act5_92_578 then
		Act5_2
	    else if ExecutionCond_of_Act6_111_578 then
		Act6_2
	    else if ExecutionCond_of_Act7_130_578 then
		Act7_2
	    else if ExecutionCond_of_Act8_149_578 then
		Act8_2
	    else (0 -> (pre (Merge_2)));
	Merge_3 = if ExecutionCond_of_Act1_20_578 then
		Act1_3
	    else if ExecutionCond_of_Act2_40_578 then
		Act2_3
	    else if ExecutionCond_of_Act3_61_578 then
		Act3_3
	    else if ExecutionCond_of_Act4_67_578 then
		Act4_3
	    else if ExecutionCond_of_Act5_92_578 then
		Act5_3
	    else if ExecutionCond_of_Act6_111_578 then
		Act6_3
	    else if ExecutionCond_of_Act7_130_578 then
		Act7_3
	    else if ExecutionCond_of_Act8_149_578 then
		Act8_3
	    else (0 -> (pre (Merge_3)));
	NextState_1 = Merge_1;
	NextState_2 = Merge_2;
	NextState_3 = Merge_3;
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Conditions
*)
node  Conditions_1035_004(
	ia_1 : real; ib_1 : real; ic_1 : real; Tlevel_1 : real; PClimit_1 : int;
	state_1 : int; state_2 : int; state_3 : int; __time_step : real; __nb_step : int;)
returns(
	C1_1 : bool; C2_1 : bool; C3_1 : bool; C4_1 : bool; C5_1 : bool;);
var 
	Abs_1 : real; Abs1_1 : real; Abs2_1 : real; Demux_1 : int; Demux_2 : int;
	Demux_3 : int; Sum_1 : real; Sum1_1 : real; Sum2_1 : real;
let
	assert (((- (2147483648)) <= PClimit_1) and (PClimit_1 <= 2147483647));
	assert (((- (2147483648)) <= state_1) and (state_1 <= 2147483647));
	assert (((- (2147483648)) <= state_2) and (state_2 <= 2147483647));
	assert (((- (2147483648)) <= state_3) and (state_3 <= 2147483647));
	Abs_1 = if (Sum_1 >= 0.0) then
		Sum_1
	    else (- (Sum_1));
	Abs1_1 = if (Sum1_1 >= 0.0) then
		Sum1_1
	    else (- (Sum1_1));
	Abs2_1 = if (Sum2_1 >= 0.0) then
		Sum2_1
	    else (- (Sum2_1));
	Demux_1 = state_1;
	Demux_2 = state_2;
	Demux_3 = state_3;
	Sum_1 = ia_1 - ib_1;
	Sum1_1 = ib_1 - ic_1;
	Sum2_1 = ia_1 - ic_1;
	C1_1 = ( (Abs_1 > Tlevel_1) );
	C2_1 = ( (Abs1_1 > Tlevel_1) );
	C3_1 = ( (Abs2_1 > Tlevel_1) );
	C4_1 = ( (int_to_real(Demux_1) > 0.0) );
	C5_1 = ( (Demux_1 > PClimit_1) );
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Output/No_minus_Fail/Avg3
*)
node  Avg3_1151_004(
	i1_1 : real; i2_1 : real; i3_1 : real; __time_step : real; __nb_step : int;)
returns(
	Avg_1 : real;);
let
	Avg_1 = ( 1.0 * ( ( i1_1 + i2_1 ) + i3_1 ) / 3.0 );
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Output/No_minus_Fail/choose
*)
node  choose_1176_013(
	i1_1 : real; avg_1 : real; i2_1 : real; __time_step : real; __nb_step : int;)
returns(
	choice_1 : real;);
var 
	Abs_1 : real; Abs1_1 : real; Sum_1 : real; Sum1_1 : real; Switch_1 : real;
let
	Abs_1 = if (Sum_1 >= 0.0) then
		Sum_1
	    else (- (Sum_1));
	Abs1_1 = if (Sum1_1 >= 0.0) then
		Sum1_1
	    else (- (Sum1_1));
	Sum_1 = i1_1 - avg_1;
	Sum1_1 = 0.0 - avg_1 + i2_1;
	Switch_1 = if ( (Abs_1 > Abs1_1) ) then
		i2_1
	    else i1_1;
	choice_1 = Switch_1;
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Output/No_minus_Fail/choose1
*)
node  choose1_1211_004(
	i1_1 : real; avg_1 : real; i2_1 : real; __time_step : real; __nb_step : int;)
returns(
	choice_1 : real;);
var 
	Abs_1 : real; Abs1_1 : real; Sum_1 : real; Sum1_1 : real; Switch_1 : real;
let
	Abs_1 = if (Sum_1 >= 0.0) then
		Sum_1
	    else (- (Sum_1));
	Abs1_1 = if (Sum1_1 >= 0.0) then
		Sum1_1
	    else (- (Sum1_1));
	Sum_1 = i1_1 - avg_1;
	Sum1_1 = 0.0 - avg_1 + i2_1;
	Switch_1 = if ( (Abs_1 > Abs1_1) ) then
		i2_1
	    else i1_1;
	choice_1 = Switch_1;
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Output/No_minus_Fail
*)
node  No_minus_Fail_1146_004(
	ia_1 : real; ib_1 : real; ic_1 : real; __time_step : real; __nb_step : int;)
returns(
	sel_val_1 : real;);
var 
	Avg3_1 : real; choose_1 : real; choose1_1 : real;
let
	Avg3_1 = Avg3_1151_004(ia_1, ib_1, ic_1, __time_step, __nb_step);
	choose_1 = choose_1176_013(ia_1, Avg3_1, ib_1, __time_step, __nb_step);
	choose1_1 = choose1_1211_004(choose_1, Avg3_1, ic_1, __time_step, __nb_step);
	sel_val_1 = choose1_1;
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Output/No_minus_Fail
*)
node  No_minus_Fail_1146_004_condExecSS(
	ia_1 : real; ib_1 : real; ic_1 : real; _isEnabled : bool; __time_step : real;
	__nb_step : int;)
returns(
	sel_val_1 : real;);
var 
	pre_sel_val_1 : real;
let
	pre_sel_val_1 = if (__nb_step > 0) then
		(pre (sel_val_1))
	    else 0.0;
	sel_val_1 = merge(_isEnabled;
		 (activate No_minus_Fail_1146_004 every _isEnabled)(ia_1, ib_1, ic_1, __time_step, __nb_step); 
		pre_sel_val_1 when not(_isEnabled));
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Output/Single_minus_BranchA_minus_Fail/Avg2
*)
node  Avg2_1266_004(
	i1_1 : real; i2_1 : real; __time_step : real; __nb_step : int;)
returns(
	Avg_1 : real;);
let
	Avg_1 = ( 1.0 * ( i1_1 + i2_1 ) / 2.0 );
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Output/Single_minus_BranchA_minus_Fail
*)
node  Single_minus_BranchA_minus_Fail_1262_004(
	ib_1 : real; ic_1 : real; __time_step : real; __nb_step : int;)
returns(
	sel_val_1 : real;);
var 
	Avg2_1 : real;
let
	Avg2_1 = Avg2_1266_004(ib_1, ic_1, __time_step, __nb_step);
	sel_val_1 = Avg2_1;
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Output/Single_minus_BranchA_minus_Fail
*)
node  Single_minus_BranchA_minus_Fail_1262_004_condExecSS(
	ib_1 : real; ic_1 : real; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	sel_val_1 : real;);
var 
	pre_sel_val_1 : real;
let
	pre_sel_val_1 = if (__nb_step > 0) then
		(pre (sel_val_1))
	    else 0.0;
	sel_val_1 = merge(_isEnabled;
		 (activate Single_minus_BranchA_minus_Fail_1262_004 every _isEnabled)(ib_1, ic_1, __time_step, __nb_step); 
		pre_sel_val_1 when not(_isEnabled));
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Output/Single_minus_BranchB_minus_Fail/Avg2
*)
node  Avg2_1294_004(
	i1_1 : real; i2_1 : real; __time_step : real; __nb_step : int;)
returns(
	Avg_1 : real;);
let
	Avg_1 = ( 1.0 * ( i1_1 + i2_1 ) / 2.0 );
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Output/Single_minus_BranchB_minus_Fail
*)
node  Single_minus_BranchB_minus_Fail_1290_004(
	ia_1 : real; ic_1 : real; __time_step : real; __nb_step : int;)
returns(
	sel_val_1 : real;);
var 
	Avg2_1 : real;
let
	Avg2_1 = Avg2_1294_004(ia_1, ic_1, __time_step, __nb_step);
	sel_val_1 = Avg2_1;
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Output/Single_minus_BranchB_minus_Fail
*)
node  Single_minus_BranchB_minus_Fail_1290_004_condExecSS(
	ia_1 : real; ic_1 : real; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	sel_val_1 : real;);
var 
	pre_sel_val_1 : real;
let
	pre_sel_val_1 = if (__nb_step > 0) then
		(pre (sel_val_1))
	    else 0.0;
	sel_val_1 = merge(_isEnabled;
		 (activate Single_minus_BranchB_minus_Fail_1290_004 every _isEnabled)(ia_1, ic_1, __time_step, __nb_step); 
		pre_sel_val_1 when not(_isEnabled));
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Output/Single_minus_BranchC_minus_Fail/Avg2
*)
node  Avg2_1322_004(
	i1_1 : real; i2_1 : real; __time_step : real; __nb_step : int;)
returns(
	Avg_1 : real;);
let
	Avg_1 = ( 1.0 * ( i1_1 + i2_1 ) / 2.0 );
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Output/Single_minus_BranchC_minus_Fail
*)
node  Single_minus_BranchC_minus_Fail_1318_004(
	ia_1 : real; ib_1 : real; __time_step : real; __nb_step : int;)
returns(
	sel_val_1 : real;);
var 
	Avg2_1 : real;
let
	Avg2_1 = Avg2_1322_004(ia_1, ib_1, __time_step, __nb_step);
	sel_val_1 = Avg2_1;
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Output/Single_minus_BranchC_minus_Fail
*)
node  Single_minus_BranchC_minus_Fail_1318_004_condExecSS(
	ia_1 : real; ib_1 : real; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	sel_val_1 : real;);
var 
	pre_sel_val_1 : real;
let
	pre_sel_val_1 = if (__nb_step > 0) then
		(pre (sel_val_1))
	    else 0.0;
	sel_val_1 = merge(_isEnabled;
		 (activate Single_minus_BranchC_minus_Fail_1318_004 every _isEnabled)(ia_1, ib_1, __time_step, __nb_step); 
		pre_sel_val_1 when not(_isEnabled));
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail/Output
*)
node  Output_1124_004(
	NextState_1 : int; NextState_2 : int; NextState_3 : int; ia_1 : real; ib_1 : real;
	ic_1 : real; __time_step : real; __nb_step : int;)
returns(
	PC_1 : int; TC_1 : int; FC_1 : int; sel_val_1 : real;);
var 
	Demux_3 : int; If_1 : bool; If_2 : bool; If_3 : bool; If_4 : bool;
	Merge_1 : real; ExecutionCond_of_No_minus_Fail_1146_004 : bool; No_minus_Fail_1 : real; ExecutionCond_of_Single_minus_BranchA_minus_Fail_1262_004 : bool; Single_minus_BranchA_minus_Fail_1 : real;
	ExecutionCond_of_Single_minus_BranchB_minus_Fail_1290_004 : bool; Single_minus_BranchB_minus_Fail_1 : real; ExecutionCond_of_Single_minus_BranchC_minus_Fail_1318_004 : bool; Single_minus_BranchC_minus_Fail_1 : real;
let
	assert (((- (2147483648)) <= NextState_1) and (NextState_1 <= 2147483647));
	assert (((- (2147483648)) <= NextState_2) and (NextState_2 <= 2147483647));
	assert (((- (2147483648)) <= NextState_3) and (NextState_3 <= 2147483647));
	Demux_3 = NextState_3;
	(If_1, If_2, If_3, If_4) = if int_to_real(Demux_3) = 0.0 then
		(true, false, false, false)
	    else if int_to_real(Demux_3) = 1.0 then
		(false, true, false, false)
	    else if int_to_real(Demux_3) = 2.0 then
		(false, false, true, false)
	    else if int_to_real(Demux_3) = 4.0 then
		(false, false, false, true)
	    else (false, false, false, false);
	Merge_1 = if ExecutionCond_of_No_minus_Fail_1146_004 then
		No_minus_Fail_1
	    else if ExecutionCond_of_Single_minus_BranchC_minus_Fail_1318_004 then
		Single_minus_BranchC_minus_Fail_1
	    else if ExecutionCond_of_Single_minus_BranchB_minus_Fail_1290_004 then
		Single_minus_BranchB_minus_Fail_1
	    else if ExecutionCond_of_Single_minus_BranchA_minus_Fail_1262_004 then
		Single_minus_BranchA_minus_Fail_1
	    else (0.0 -> (pre (Merge_1)));
	ExecutionCond_of_No_minus_Fail_1146_004 = If_1;
	No_minus_Fail_1 = No_minus_Fail_1146_004_condExecSS(ia_1, ib_1, ic_1, ExecutionCond_of_No_minus_Fail_1146_004, __time_step, __nb_step);
	ExecutionCond_of_Single_minus_BranchA_minus_Fail_1262_004 = If_4;
	Single_minus_BranchA_minus_Fail_1 = Single_minus_BranchA_minus_Fail_1262_004_condExecSS(ib_1, ic_1, ExecutionCond_of_Single_minus_BranchA_minus_Fail_1262_004, __time_step, __nb_step);
	ExecutionCond_of_Single_minus_BranchB_minus_Fail_1290_004 = If_3;
	Single_minus_BranchB_minus_Fail_1 = Single_minus_BranchB_minus_Fail_1290_004_condExecSS(ia_1, ic_1, ExecutionCond_of_Single_minus_BranchB_minus_Fail_1290_004, __time_step, __nb_step);
	ExecutionCond_of_Single_minus_BranchC_minus_Fail_1318_004 = If_2;
	Single_minus_BranchC_minus_Fail_1 = Single_minus_BranchC_minus_Fail_1318_004_condExecSS(ia_1, ib_1, ExecutionCond_of_Single_minus_BranchC_minus_Fail_1318_004, __time_step, __nb_step);
	PC_1 = NextState_1;
	TC_1 = NextState_2;
	FC_1 = Demux_3;
	sel_val_1 = Merge_1;
tel

(*
Original block name: triplex_12B_with_contracts_PP/triplex_12B_TriplexSignalMonitorSpec/TSM_minus_001
*)
node  TSM_minus_001_1423_004(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: triplex_12B_with_contracts_PP/triplex_12B_TriplexSignalMonitorSpec/TSM_minus_002
*)
node  TSM_minus_002_1427_004(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: triplex_12B_with_contracts_PP/triplex_12B_TriplexSignalMonitorSpec/TSM_minus_003a
*)
node  TSM_minus_003a_1431_005(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: triplex_12B_with_contracts_PP/triplex_12B_TriplexSignalMonitorSpec/TSM_minus_003b
*)
node  TSM_minus_003b_1435_004(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: triplex_12B_with_contracts_PP/triplex_12B_TriplexSignalMonitorSpec/TSM_minus_003c
*)
node  TSM_minus_003c_1439_003(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: triplex_12B_with_contracts_PP/triplex_12B_TriplexSignalMonitorSpec/TSM_minus_004
*)
node  TSM_minus_004_1443_004(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: triplex_12B_with_contracts_PP/triplex_12B_TriplexSignalMonitorSpec/abs_call
*)
node  abs_call_1447_004(
	abs_x_1 : real; __time_step : real; __nb_step : int;)
returns(
	abs_y_1 : real;);
var 
	branch_6_IF_1 : real;
let
	branch_6_IF_1 = if ( (abs_x_1 >= 0.0) ) then
		abs_x_1
	    else ( (abs_x_1 * -1.0) );
	abs_y_1 = branch_6_IF_1;
tel

(*
Original block name: triplex_12B_with_contracts_PP/triplex_12B_TriplexSignalMonitorSpec/abs_call1
*)
node  abs_call1_1462_004(
	abs_x_1 : real; __time_step : real; __nb_step : int;)
returns(
	abs_y_1 : real;);
var 
	branch_6_IF_1 : real;
let
	branch_6_IF_1 = if ( (abs_x_1 >= 0.0) ) then
		abs_x_1
	    else ( (abs_x_1 * -1.0) );
	abs_y_1 = branch_6_IF_1;
tel

(*
Original block name: triplex_12B_with_contracts_PP/triplex_12B_TriplexSignalMonitorSpec/abs_call11
*)
node  abs_call11_1477_004(
	abs_x_1 : real; __time_step : real; __nb_step : int;)
returns(
	abs_y_1 : real;);
var 
	branch_6_IF_1 : real;
let
	branch_6_IF_1 = if ( (abs_x_1 >= 0.0) ) then
		abs_x_1
	    else ( (abs_x_1 * -1.0) );
	abs_y_1 = branch_6_IF_1;
tel

(*
Original block name: triplex_12B_with_contracts_PP/triplex_12B_TriplexSignalMonitorSpec/spec284_operator
*)
node  spec284_operator_1503_003(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: triplex_12B_with_contracts_PP/triplex_12B_TriplexSignalMonitorSpec/spec292_operator
*)
node  spec292_operator_1504_004(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: triplex_12B_with_contracts_PP/triplex_12B_TriplexSignalMonitorSpec/spec309_operator
*)
node  spec309_operator_1505_003(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: triplex_12B_with_contracts_PP/triplex_12B_TriplexSignalMonitorSpec/spec326_operator
*)
node  spec326_operator_1506_003(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: triplex_12B_with_contracts_PP/triplex_12B_TriplexSignalMonitorSpec/spec334_operator
*)
node  spec334_operator_1507_003(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: triplex_12B_with_contracts_PP/triplex_12B_TriplexSignalMonitorSpec/spec351_operator
*)
node  spec351_operator_1509_003(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: triplex_12B_with_contracts_PP/triplex_12B_TriplexSignalMonitorSpec
*)
contract triplex_12B_TriplexSignalMonitorSpec_1407_004(
	TriplexSignalMonitorSpec_Tlevel_1 : real; TriplexSignalMonitorSpec_ia_1 : real; TriplexSignalMonitorSpec_ib_1 : real; TriplexSignalMonitorSpec_ic_1 : real; TriplexSignalMonitorSpec_PCLimit_1 : int;
	__time_step : real; __nb_step : int;)
returns(
	TriplexSignalMonitorSpec_FC_1 : int; TriplexSignalMonitorSpec_set_val_1 : real; TriplexSignalMonitorSpec_PC_1 : int;);
let
	var Arrow_xxTriplexS_443436564_ec_35_ni_0_1 : bool = (true -> (pre (false)));
	var C1_operator_1 : bool = (abs_call_1 > TriplexSignalMonitorSpec_Tlevel_1);
	var C2_operator_1 : bool = (abs_call1_1 > TriplexSignalMonitorSpec_Tlevel_1);
	var C3_operator_1 : bool = (abs_call11_1 > TriplexSignalMonitorSpec_Tlevel_1);
	var PRE_xxTriplexSignalMonitorSpec_37_1 : int = (0 -> (pre (TriplexSignalMonitorSpec_PC_1)));
	var PRE_xxTriplexSignalMonitorSpec_40_1 : real = (0.0 -> (pre (TriplexSignalMonitorSpec_set_val_1)));
	var PRE_xxTriplexSignalMonitorSpec_46_1 : bool = (false -> (pre (no_fail_operator_1)));
	var TSM_minus_001_1 : bool = TSM_minus_001_1423_004(spec292_operator_1, __time_step, __nb_step);
	guarantee "TSM_minus_001_1423_004" TSM_minus_001_1;
	var TSM_minus_002_1 : bool = TSM_minus_002_1427_004(spec334_operator_1, __time_step, __nb_step);
	guarantee "TSM_minus_002_1427_004" TSM_minus_002_1;
	var TSM_minus_003a_1 : bool = TSM_minus_003a_1431_005(spec351_operator_1, __time_step, __nb_step);
	guarantee "TSM_minus_003a_1431_005" TSM_minus_003a_1;
	var TSM_minus_003b_1 : bool = TSM_minus_003b_1435_004(spec309_operator_1, __time_step, __nb_step);
	guarantee "TSM_minus_003b_1435_004" TSM_minus_003b_1;
	var TSM_minus_003c_1 : bool = TSM_minus_003c_1439_003(spec326_operator_1, __time_step, __nb_step);
	guarantee "TSM_minus_003c_1439_003" TSM_minus_003c_1;
	var TSM_minus_004_1 : bool = TSM_minus_004_1443_004(spec284_operator_1, __time_step, __nb_step);
	guarantee "TSM_minus_004_1443_004" TSM_minus_004_1;
	var abs_call_1 : real = abs_call_1447_004(TriplexSignalMonitorSpec_ia_1 - TriplexSignalMonitorSpec_ib_1, __time_step, __nb_step);
	var abs_call1_1 : real = abs_call1_1462_004(TriplexSignalMonitorSpec_ib_1 - TriplexSignalMonitorSpec_ic_1, __time_step, __nb_step);
	var abs_call11_1 : real = abs_call11_1477_004(TriplexSignalMonitorSpec_ia_1 - TriplexSignalMonitorSpec_ic_1, __time_step, __nb_step);
	var branch_10_IF_1 : real = if ( ( xxTriplexSignalMonitorSpec_23_operator_1 and ( (TriplexSignalMonitorSpec_ia_1 <= TriplexSignalMonitorSpec_ic_1) ) ) or ( ( (TriplexSignalMonitorSpec_ic_1 <= TriplexSignalMonitorSpec_ia_1) ) and xxTriplexSignalMonitorSpec_27_operator_1 ) ) then
		TriplexSignalMonitorSpec_ia_1
	    else TriplexSignalMonitorSpec_ic_1;
	var branch_11_IF_1 : bool = if Arrow_xxTriplexS_443436564_ec_35_ni_0_1 then
		PRE_xxTriplexSignalMonitorSpec_46_1
	    else PRE_xxTriplexSignalMonitorSpec_46_1;
	var branch_12_IF_1 : int = if Arrow_xxTriplexS_443436564_ec_35_ni_0_1 then
		PRE_xxTriplexSignalMonitorSpec_37_1
	    else PRE_xxTriplexSignalMonitorSpec_37_1;
	var branch_13_IF_1 : real = if Arrow_xxTriplexS_443436564_ec_35_ni_0_1 then
		PRE_xxTriplexSignalMonitorSpec_40_1
	    else PRE_xxTriplexSignalMonitorSpec_40_1;
	var branch_9_IF_1 : real = if ( ( xxTriplexSignalMonitorSpec_27_operator_1 and ( (TriplexSignalMonitorSpec_ib_1 <= TriplexSignalMonitorSpec_ic_1) ) ) or ( ( (TriplexSignalMonitorSpec_ic_1 <= TriplexSignalMonitorSpec_ib_1) ) and xxTriplexSignalMonitorSpec_23_operator_1 ) ) then
		TriplexSignalMonitorSpec_ib_1
	    else branch_10_IF_1;
	var miscompare_operator_1 : bool = ( ( ( ( ( (not (C1_operator_1)) ) and C2_operator_1 ) and C3_operator_1 ) or ( ( C1_operator_1 and ( (not (C2_operator_1)) ) ) and C3_operator_1 ) ) or ( ( C1_operator_1 and C2_operator_1 ) and ( (not (C3_operator_1)) ) ) );
	var no_fail_operator_1 : bool = (TriplexSignalMonitorSpec_FC_1 = 0);
	var single_fail_reported_operator_1 : bool = ( ( ( (TriplexSignalMonitorSpec_FC_1 = 1) ) or ( (TriplexSignalMonitorSpec_FC_1 = 2) ) ) or ( (TriplexSignalMonitorSpec_FC_1 = 4) ) );
	var spec284_operator_1 : bool = spec284_operator_1503_003(single_fail_reported_operator_1 and ( ( miscompare_operator_1 and ( (branch_12_IF_1 <= TriplexSignalMonitorSpec_PCLimit_1) ) ) and ( (TriplexSignalMonitorSpec_PC_1 > 0) ) ), (TriplexSignalMonitorSpec_set_val_1 = branch_13_IF_1), __time_step, __nb_step);
	var spec292_operator_1 : bool = spec292_operator_1504_004(branch_11_IF_1 and ( miscompare_operator_1 and ( (branch_12_IF_1 > TriplexSignalMonitorSpec_PCLimit_1) ) ), single_fail_reported_operator_1, __time_step, __nb_step);
	var spec309_operator_1 : bool = spec309_operator_1505_003((TriplexSignalMonitorSpec_FC_1 = 2), (TriplexSignalMonitorSpec_set_val_1 = ( 1.0 * 0.50 * ( TriplexSignalMonitorSpec_ia_1 + TriplexSignalMonitorSpec_ic_1 ) )), __time_step, __nb_step);
	var spec326_operator_1 : bool = spec326_operator_1506_003((TriplexSignalMonitorSpec_FC_1 = 4), (TriplexSignalMonitorSpec_set_val_1 = ( 1.0 * 0.50 * ( TriplexSignalMonitorSpec_ib_1 + TriplexSignalMonitorSpec_ic_1 ) )), __time_step, __nb_step);
	var spec334_operator_1 : bool = spec334_operator_1507_003(no_fail_operator_1, (TriplexSignalMonitorSpec_set_val_1 = branch_9_IF_1), __time_step, __nb_step);
	var spec351_operator_1 : bool = spec351_operator_1509_003((TriplexSignalMonitorSpec_FC_1 = 1), (TriplexSignalMonitorSpec_set_val_1 = ( 1.0 * 0.50 * ( TriplexSignalMonitorSpec_ia_1 + TriplexSignalMonitorSpec_ib_1 ) )), __time_step, __nb_step);
	var xxTriplexSignalMonitorSpec_23_operator_1 : bool = (TriplexSignalMonitorSpec_ib_1 <= TriplexSignalMonitorSpec_ia_1);
	var xxTriplexSignalMonitorSpec_27_operator_1 : bool = (TriplexSignalMonitorSpec_ia_1 <= TriplexSignalMonitorSpec_ib_1);
	var xxTriplexSignalMonitorSpec_36_rhs_1 : real = 0.0;
	var xxTriplexSignalMonitorSpec_39_rhs_1 : real = 0.0;
	var xxTriplexSignalMonitorSpec_47_rhs1_1 : bool = true;
	assume "NB_STEP" (__nb_step = (0 -> ((pre (__nb_step)) + 1)));
	assume "TIME_STEP" (__time_step = (0.0 -> ((pre (__time_step)) + 0.10)));
tel

(*
Original block name: triplex_12B_with_contracts_PP/TriplexMonitorNoFail
*)
node  TriplexMonitorNoFail_7_578(
	ia_1 : real; ib_1 : real; ic_1 : real; Tlevel_1 : real; PClimit_1 : int;
	__time_step : real; __nb_step : int;)
returns(
	PC_1 : int; TC_1 : int; FC_1 : int; sel_val_1 : real;);
(*@contract
	import triplex_12B_TriplexSignalMonitorSpec_1407_004(Tlevel_1, ia_1, ib_1, ic_1, PClimit_1, __time_step, __nb_step) returns (FC_1, sel_val_1, PC_1);
*)
var 
	Actions_1 : int; Actions_2 : int; Actions_3 : int; Conditions_1 : bool; Conditions_2 : bool;
	Conditions_3 : bool; Conditions_4 : bool; Conditions_5 : bool; Delay1_1 : int; Delay1_2 : int;
	Delay1_3 : int; Output_1 : int; Output_2 : int; Output_3 : int; Output_4 : real;
let
	assert (((- (2147483648)) <= PClimit_1) and (PClimit_1 <= 2147483647));
	(Actions_1, Actions_2, Actions_3) = Actions_13_578(Conditions_1, Conditions_2, Conditions_3, Conditions_4, Conditions_5, Delay1_1, Delay1_2, Delay1_3, __time_step, __nb_step);
	(Conditions_1, Conditions_2, Conditions_3, Conditions_4, Conditions_5) = Conditions_1035_004(ia_1, ib_1, ic_1, Tlevel_1, PClimit_1, Delay1_1, Delay1_2, Delay1_3, __time_step, __nb_step);
	Delay1_1 = (0 -> (pre (Actions_1)));
	Delay1_2 = (0 -> (pre (Actions_2)));
	Delay1_3 = (0 -> (pre (Actions_3)));
	(Output_1, Output_2, Output_3, Output_4) = Output_1124_004(Actions_1, Actions_2, Actions_3, ia_1, ib_1, ic_1, __time_step, __nb_step);
	PC_1 = Output_1;
	TC_1 = Output_2;
	FC_1 = Output_3;
	sel_val_1 = Output_4;
tel

(*
Original block name: triplex_12B_with_contracts_PP
*)
node  triplex_12B_with_contracts_PP(
	ia_1 : real; ib_1 : real; ic_1 : real; Tlevel_1 : real; PClimit_1 : int;)
returns(
	PC_1 : int; TC_1 : int; FC_1 : int; sel_val_1 : real;);
var 
	TriplexMonitorNoFail_1 : int; TriplexMonitorNoFail_2 : int; TriplexMonitorNoFail_3 : int; TriplexMonitorNoFail_4 : real; __time_step : real;
	__nb_step : int;
let
	assert (((- (2147483648)) <= PClimit_1) and (PClimit_1 <= 2147483647));
	(TriplexMonitorNoFail_1, TriplexMonitorNoFail_2, TriplexMonitorNoFail_3, TriplexMonitorNoFail_4) = TriplexMonitorNoFail_7_578(ia_1, ib_1, ic_1, Tlevel_1, PClimit_1, __time_step, __nb_step);
	PC_1 = TriplexMonitorNoFail_1;
	TC_1 = TriplexMonitorNoFail_2;
	FC_1 = TriplexMonitorNoFail_3;
	sel_val_1 = TriplexMonitorNoFail_4;
	__time_step = (0.0 -> ((pre (__time_step)) + 0.10));
	__nb_step = (0 -> ((pre (__nb_step)) + 1));
tel

