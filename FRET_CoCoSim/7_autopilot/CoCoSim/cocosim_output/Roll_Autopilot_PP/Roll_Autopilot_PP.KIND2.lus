-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 06-Nov-2019 15:53:00
node kind2_times(x, y: real) returns (z: real) ;
var abs_x, abs_y, abs_z: real;
let
   abs_x = if x < 0.0 then -x else x ;
    abs_y = if y < 0.0 then -y else y ;
    abs_z = if z < 0.0 then -z else z ;
    -- Neutral.
    assert (z = y) = ((x = 1.0) or (y = 0.0)) ;
    assert (z = x) = ((y = 1.0) or (x = 0.0)) ;
    -- Absorbing.
    assert (z = 0.0) = ( (x = 0.0) or (y = 0.0) ) ;
    -- Sign.
    assert (z > 0.0) = (
      ( (x > 0.0) and (y > 0.0) ) or
      ( (x < 0.0) and (y < 0.0) )
    ) ;
    assert (z < 0.0) = (
      ( (x > 0.0) and (y < 0.0) ) or
      ( (x < 0.0) and (y > 0.0) )
    ) ;
    -- Loose proportionality.
    assert (abs_z >= abs_y) = ((abs_x >= 1.0) or (y = 0.0)) ;
    assert (abs_z >= abs_x) = ((abs_y >= 1.0) or (x = 0.0)) ;
    assert (abs_z <= abs_y) = ((abs_x <= 1.0) or (y = 0.0)) ;
    assert (abs_z <= abs_x) = ((abs_y <= 1.0) or (x = 0.0)) ;
    z = x * y ;
tel
node kind2_divide(num, den: real) returns (res: real) ;
var abs_num, abs_den, abs_res: real;
let
 abs_num = if num < 0.0 then -num else num ;
 abs_den = if den < 0.0 then -den else den ;
 abs_res = if res < 0.0 then -res else res ;
assert not (den = 0.0) ;
-- Neutral.
assert (res = num) = ((den = 1.0) or (num = 0.0)) ;
assert (res = - num) = ((den = - 1.0) or (num = 0.0)) ;
-- Absorbing.
assert (num = 0.0) = (res = 0.0) ;
-- Sign.
assert (res > 0.0) = (
  ( (num > 0.0) and (den > 0.0) ) or
  ( (num < 0.0) and (den < 0.0) )
) ;
assert (res < 0.0) = (
  ( (num > 0.0) and (den < 0.0) ) or
  ( (num < 0.0) and (den > 0.0) )
) ;
-- Loose proportionality.
assert (abs_res >= abs_num) = ((abs_den <= 1.0) or (num = 0.0)) ;
assert (abs_res <= abs_num) = ((abs_den >= 1.0) or (num = 0.0)) ;
-- Annulation.
assert (res = 1.0) = (num = den) ;
assert (res = - 1.0) = (num = - den) ;
  res = num / den ;
tel
node  _floor(
	x : real;)
returns(
	y : real;);
(*@contract
	guarantee (y <= x) and (x < y + 1.0);
*)
let
	y = (real ((int (x))));
tel

node  _max_real(
	x : real; y : real;)
returns(
	z : real;);
let
	z = if (x > y) then
		x
	    else y;
tel

node  _min_real(
	x : real; y : real;)
returns(
	z : real;);
let
	z = if (x < y) then
		x
	    else y;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot/BasicRollMode/CmdLimit
*)
node  CmdLimit_1_100(
	In_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out_1 : real;);
var 
	lower_1 : real; upper_1 : real;
let
	lower_1 = _max_real(upper_1, -15.0);
	upper_1 = _min_real(15.0, In_1);
	Out_1 = lower_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot/BasicRollMode/DispLimit
*)
node  DispLimit_182_100(
	In_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out_1 : real;);
var 
	lower_1 : real; upper_1 : real;
let
	lower_1 = _max_real(upper_1, -30.0);
	upper_1 = _min_real(30.0, In_1);
	Out_1 = lower_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot/BasicRollMode/RateLimit
*)
node  RateLimit_188_100(
	In_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out_1 : real;);
var 
	lower_1 : real; upper_1 : real;
let
	lower_1 = _max_real(upper_1, -6.0);
	upper_1 = _min_real(6.0, In_1);
	Out_1 = lower_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot/BasicRollMode/ResetIntegratorInternal/Saturation
*)
node  Saturation_192_100(
	In_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out_1 : real;);
var 
	lower_1 : real; upper_1 : real;
let
	lower_1 = _max_real(upper_1, -5.0);
	upper_1 = _min_real(5.0, In_1);
	Out_1 = lower_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot/BasicRollMode/ResetIntegratorInternal
*)
node  ResetIntegratorInternal_1270_002(
	U_1 : real; R_1 : bool; __time_step : real; __nb_step : int;)
returns(
	Y_1 : real;);
var 
	Constant2_1 : real; Saturation_1 : real; Switch_1 : real; Switch1_1 : real;
let
	Constant2_1 = 0.0;
	Saturation_1 = Saturation_192_100(Switch_1, __time_step, __nb_step);
	Switch_1 = if R_1 then
		Constant2_1
	    else ( (0.0 -> (pre (Switch1_1))) );
	Switch1_1 = if R_1 then
		Constant2_1
	    else ( ( kind2_times(kind2_times(1.0, ( kind2_times(kind2_times(1.0, 1.0), 0.0250) )), U_1) ) + Saturation_1 );
	Y_1 = Saturation_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot/BasicRollMode
*)
node  BasicRollMode_1247_002(
	Disp_Cmd_1 : real; Disp_FB__1 : real; Rate_FB_1 : real; Engaged_1 : bool; __time_step : real;
	__nb_step : int;)
returns(
	Surf_Cmd_1 : real;);
var 
	CmdLimit_1 : real; DispLimit_1 : real; RateLimit_1 : real; ResetIntegratorInternal_1 : real; Sum1_1 : real;
let
	CmdLimit_1 = CmdLimit_1_100(ResetIntegratorInternal_1 + ( (kind2_times(Sum1_1, 3.0)) ), __time_step, __nb_step);
	DispLimit_1 = DispLimit_182_100(Disp_Cmd_1, __time_step, __nb_step);
	RateLimit_1 = RateLimit_188_100((kind2_times(( DispLimit_1 - Disp_FB__1 ), 1.0)), __time_step, __nb_step);
	ResetIntegratorInternal_1 = ResetIntegratorInternal_1270_002((kind2_times(Sum1_1, 1.0)), (not (Engaged_1)), __time_step, __nb_step);
	Sum1_1 = RateLimit_1 - Rate_FB_1;
	Surf_Cmd_1 = CmdLimit_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot/HeadingMode/anglediff
*)
node  anglediff_1356_002(
	plus_1 : real; minus_1 : real; __time_step : real; __nb_step : int;)
returns(
	diff_1 : real;);
var 
	abs_1 : real; constant1_1 : real; floor_1 : real; signum_1 : real; sum_1 : real;
let
	abs_1 = if (sum_1 >= 0.0) then
		sum_1
	    else (- (sum_1));
	constant1_1 = 360.0;
	floor_1 = _floor(kind2_divide(kind2_times(1.0, ( abs_1 + 180.0 )), constant1_1));
	signum_1 = if (sum_1 > 0.0) then
		1.0
	    else if (sum_1 < 0.0) then
		(- (1.0))
	    else 0.0;
	sum_1 = plus_1 - minus_1;
	diff_1 = ( sum_1 - ( kind2_times(kind2_times(1.0, signum_1), ( kind2_times(kind2_times(1.0, floor_1), constant1_1) )) ) );
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot/HeadingMode
*)
node  HeadingMode_1343_002(
	PsiRef_1 : real; Psi_1 : real; TAS_1 : real; __time_step : real; __nb_step : int;)
returns(
	PhiCmd_1 : real;);
var 
	anglediff_1 : real;
let
	anglediff_1 = anglediff_1356_002(PsiRef_1, Psi_1, __time_step, __nb_step);
	PhiCmd_1 = ( kind2_times(kind2_times(1.0, ( (kind2_times(anglediff_1, 0.0150)) )), TAS_1) );
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot/RollReference/latch
*)
node  latch_1412_002(
	u_1 : real; E_1 : bool; __time_step : real; __nb_step : int;)
returns(
	y_1 : real;);
var 
	Enable_1 : real; FixPt_newline_UnitDelay1_1 : real;
let
	Enable_1 = if E_1 then
		u_1
	    else FixPt_newline_UnitDelay1_1;
	FixPt_newline_UnitDelay1_1 = (0.0 -> (pre (Enable_1)));
	y_1 = FixPt_newline_UnitDelay1_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot/RollReference
*)
node  RollReference_1402_002(
	Phi_1 : real; APeng_1 : bool; TurnKnob_1 : real; __time_step : real; __nb_step : int;)
returns(
	PhiRef_1 : real;);
var 
	Abs_1 : real; TKswitch_1 : real; latch_1 : real; refswitch_1 : real;
let
	Abs_1 = if (TurnKnob_1 >= 0.0) then
		TurnKnob_1
	    else (- (TurnKnob_1));
	TKswitch_1 = if ( (Abs_1 < 3.0) ) then
		latch_1
	    else TurnKnob_1;
	latch_1 = latch_1412_002(refswitch_1, (not (APeng_1)), __time_step, __nb_step);
	refswitch_1 = if ( ( (Phi_1 >= 6.0) ) or ( (Phi_1 <= -6.0) ) ) then
		Phi_1
	    else 0.0;
	PhiRef_1 = TKswitch_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/AP_minus_001
*)
node  AP_minus_001_3094_002(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/AP_minus_003A
*)
node  AP_minus_003A_3098_002(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/AP_minus_003B
*)
node  AP_minus_003B_3106_002(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/AP_minus_003C
*)
node  AP_minus_003C_3110_002(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/AP_minus_003D
*)
node  AP_minus_003D_3118_002(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/AP_minus_007
*)
node  AP_minus_007_3122_002(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/H_call
*)
node  H_call_3146_002(
	H_X_1 : bool; __time_step : real; __nb_step : int;)
returns(
	H_Y_1 : bool;);
var 
	branch_6_IF_1 : bool;
let
	branch_6_IF_1 = if ( (true -> (pre (false))) ) then
		H_X_1
	    else ( H_X_1 and ( (false -> (pre (branch_6_IF_1))) ) );
	H_Y_1 = branch_6_IF_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/H_call1
*)
node  H_call1_3176_002(
	H_X_1 : bool; __time_step : real; __nb_step : int;)
returns(
	H_Y_1 : bool;);
var 
	branch_6_IF_1 : bool;
let
	branch_6_IF_1 = if ( (true -> (pre (false))) ) then
		H_X_1
	    else ( H_X_1 and ( (false -> (pre (branch_6_IF_1))) ) );
	H_Y_1 = branch_6_IF_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/H_call11
*)
node  H_call11_3220_002(
	H_X_1 : bool; __time_step : real; __nb_step : int;)
returns(
	H_Y_1 : bool;);
var 
	branch_6_IF_1 : bool;
let
	branch_6_IF_1 = if ( (true -> (pre (false))) ) then
		H_X_1
	    else ( H_X_1 and ( (false -> (pre (branch_6_IF_1))) ) );
	H_Y_1 = branch_6_IF_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/SI_call
*)
node  SI_call_3275_002(
	SI_X_1 : bool; SI_Y_1 : bool; __time_step : real; __nb_step : int;)
returns(
	SI_Z_1 : bool;);
var 
	Z_operator_1 : bool; branch_4_IF_1 : bool;
let
	Z_operator_1 = ( SI_Y_1 and ( SI_X_1 or branch_4_IF_1 ) );
	branch_4_IF_1 = if ( (true -> (pre (false))) ) then
		false
	    else ( (false -> (pre (Z_operator_1))) );
	SI_Z_1 = Z_operator_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/SI_call1
*)
node  SI_call1_3300_002(
	SI_X_1 : bool; SI_Y_1 : bool; __time_step : real; __nb_step : int;)
returns(
	SI_Z_1 : bool;);
var 
	Z_operator_1 : bool; branch_4_IF_1 : bool;
let
	Z_operator_1 = ( SI_Y_1 and ( SI_X_1 or branch_4_IF_1 ) );
	branch_4_IF_1 = if ( (true -> (pre (false))) ) then
		false
	    else ( (false -> (pre (Z_operator_1))) );
	SI_Z_1 = Z_operator_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/SI_call11
*)
node  SI_call11_3343_002(
	SI_X_1 : bool; SI_Y_1 : bool; __time_step : real; __nb_step : int;)
returns(
	SI_Z_1 : bool;);
var 
	Z_operator_1 : bool; branch_4_IF_1 : bool;
let
	Z_operator_1 = ( SI_Y_1 and ( SI_X_1 or branch_4_IF_1 ) );
	branch_4_IF_1 = if ( (true -> (pre (false))) ) then
		false
	    else ( (false -> (pre (Z_operator_1))) );
	SI_Z_1 = Z_operator_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/SI_call111
*)
node  SI_call111_3368_002(
	SI_X_1 : bool; SI_Y_1 : bool; __time_step : real; __nb_step : int;)
returns(
	SI_Z_1 : bool;);
var 
	Z_operator_1 : bool; branch_4_IF_1 : bool;
let
	Z_operator_1 = ( SI_Y_1 and ( SI_X_1 or branch_4_IF_1 ) );
	branch_4_IF_1 = if ( (true -> (pre (false))) ) then
		false
	    else ( (false -> (pre (Z_operator_1))) );
	SI_Z_1 = Z_operator_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/SI_call1111
*)
node  SI_call1111_3392_002(
	SI_X_1 : bool; SI_Y_1 : bool; __time_step : real; __nb_step : int;)
returns(
	SI_Z_1 : bool;);
var 
	Z_operator_1 : bool; branch_4_IF_1 : bool;
let
	Z_operator_1 = ( SI_Y_1 and ( SI_X_1 or branch_4_IF_1 ) );
	branch_4_IF_1 = if ( (true -> (pre (false))) ) then
		false
	    else ( (false -> (pre (Z_operator_1))) );
	SI_Z_1 = Z_operator_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/SI_call11111
*)
node  SI_call11111_3420_003(
	SI_X_1 : bool; SI_Y_1 : bool; __time_step : real; __nb_step : int;)
returns(
	SI_Z_1 : bool;);
var 
	Z_operator_1 : bool; branch_4_IF_1 : bool;
let
	Z_operator_1 = ( SI_Y_1 and ( SI_X_1 or branch_4_IF_1 ) );
	branch_4_IF_1 = if ( (true -> (pre (false))) ) then
		false
	    else ( (false -> (pre (Z_operator_1))) );
	SI_Z_1 = Z_operator_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/SI_call111111
*)
node  SI_call111111_3445_002(
	SI_X_1 : bool; SI_Y_1 : bool; __time_step : real; __nb_step : int;)
returns(
	SI_Z_1 : bool;);
var 
	Z_operator_1 : bool; branch_4_IF_1 : bool;
let
	Z_operator_1 = ( SI_Y_1 and ( SI_X_1 or branch_4_IF_1 ) );
	branch_4_IF_1 = if ( (true -> (pre (false))) ) then
		false
	    else ( (false -> (pre (Z_operator_1))) );
	SI_Z_1 = Z_operator_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/SI_call1111111
*)
node  SI_call1111111_3494_002(
	SI_X_1 : bool; SI_Y_1 : bool; __time_step : real; __nb_step : int;)
returns(
	SI_Z_1 : bool;);
var 
	Z_operator_1 : bool; branch_4_IF_1 : bool;
let
	Z_operator_1 = ( SI_Y_1 and ( SI_X_1 or branch_4_IF_1 ) );
	branch_4_IF_1 = if ( (true -> (pre (false))) ) then
		false
	    else ( (false -> (pre (Z_operator_1))) );
	SI_Z_1 = Z_operator_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/SI_call11111111
*)
node  SI_call11111111_3541_002(
	SI_X_1 : bool; SI_Y_1 : bool; __time_step : real; __nb_step : int;)
returns(
	SI_Z_1 : bool;);
var 
	Z_operator_1 : bool; branch_4_IF_1 : bool;
let
	Z_operator_1 = ( SI_Y_1 and ( SI_X_1 or branch_4_IF_1 ) );
	branch_4_IF_1 = if ( (true -> (pre (false))) ) then
		false
	    else ( (false -> (pre (Z_operator_1))) );
	SI_Z_1 = Z_operator_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/hdg_hold_mode_ensure
*)
node  hdg_hold_mode_ensure_3614_001(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	ensure_1 : bool;);
let
	ensure_1 = In1_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/hdg_hold_mode_require
*)
node  hdg_hold_mode_require_3619_001(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	require_1 : bool;);
let
	require_1 = In1_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/roll_hold_mode_ensure
*)
node  roll_hold_mode_ensure_3648_001(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	ensure_1 : bool;);
let
	ensure_1 = In1_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/roll_hold_mode_require
*)
node  roll_hold_mode_require_3654_001(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	require_1 : bool;);
let
	require_1 = In1_1;
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/spec206_operator
*)
node  spec206_operator_3661_001(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/spec252_operator
*)
node  spec252_operator_3676_001(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/xxRollAutopilotSpec_107_operator
*)
node  xxRollAutopilotSpec_107_operator_3700_001(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/xxRollAutopilotSpec_112_operator
*)
node  xxRollAutopilotSpec_112_operator_3722_001(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/xxRollAutopilotSpec_11_operator
*)
node  xxRollAutopilotSpec_11_operator_3738_001(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/xxRollAutopilotSpec_127_operator
*)
node  xxRollAutopilotSpec_127_operator_3754_001(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/xxRollAutopilotSpec_131_operator
*)
node  xxRollAutopilotSpec_131_operator_3787_001(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/xxRollAutopilotSpec_136_operator
*)
node  xxRollAutopilotSpec_136_operator_3805_001(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/xxRollAutopilotSpec_148_operator
*)
node  xxRollAutopilotSpec_148_operator_3823_001(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/xxRollAutopilotSpec_26_operator
*)
node  xxRollAutopilotSpec_26_operator_3911_001(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/xxRollAutopilotSpec_31_operator
*)
node  xxRollAutopilotSpec_31_operator_3935_001(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/xxRollAutopilotSpec_36_operator
*)
node  xxRollAutopilotSpec_36_operator_3949_001(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/xxRollAutopilotSpec_48_operator
*)
node  xxRollAutopilotSpec_48_operator_3970_001(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/xxRollAutopilotSpec_57_operator
*)
node  xxRollAutopilotSpec_57_operator_3993_001(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/xxRollAutopilotSpec_62_operator
*)
node  xxRollAutopilotSpec_62_operator_4011_001(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/xxRollAutopilotSpec_6_operator
*)
node  xxRollAutopilotSpec_6_operator_4033_001(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/xxRollAutopilotSpec_77_operator
*)
node  xxRollAutopilotSpec_77_operator_4052_001(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/xxRollAutopilotSpec_82_operator
*)
node  xxRollAutopilotSpec_82_operator_4087_001(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/xxRollAutopilotSpec_87_operator
*)
node  xxRollAutopilotSpec_87_operator_4113_001(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1/xxRollAutopilotSpec_99_operator
*)
node  xxRollAutopilotSpec_99_operator_4150_001(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot_RollAutopilotSpec1
*)
contract Roll_Autopilot_RollAutopilotSpec1_3081_002(
	RollAutopilotSpec_roll_angle_1 : real; RollAutopilotSpec_TurnKnob_1 : real; RollAutopilotSpec_HDGmode_1 : bool; RollAutopilotSpec_autopilot_engaged_1 : bool; __time_step : real;
	__nb_step : int;)
returns(
	RollAutopilotSpec_hdg_hold_mode_cmd_1 : real; RollAutopilotSpec_roll_actuator_command_1 : real; RollAutopilotSpec_roll_cmd_1 : real; RollAutopilotSpec_roll_hold_reference_1 : real;);
let
	var AP_minus_001_1 : bool = AP_minus_001_3094_002(spec206_operator_1, __time_step, __nb_step);
	guarantee "AP_minus_001_3094_002" AP_minus_001_1;
	var AP_minus_003A_1 : bool = AP_minus_003A_3098_002(branch_11_IF_1, __time_step, __nb_step);
	guarantee "AP_minus_003A_3098_002" AP_minus_003A_1;
	var AP_minus_003B_1 : bool = AP_minus_003B_3106_002(branch_12_IF_1, __time_step, __nb_step);
	guarantee "AP_minus_003B_3106_002" AP_minus_003B_1;
	var AP_minus_003C_1 : bool = AP_minus_003C_3110_002(branch_14_IF_1, __time_step, __nb_step);
	guarantee "AP_minus_003C_3110_002" AP_minus_003C_1;
	var AP_minus_003D_1 : bool = AP_minus_003D_3118_002(spec252_operator_1, __time_step, __nb_step);
	guarantee "AP_minus_003D_3118_002" AP_minus_003D_1;
	var AP_minus_007_1 : bool = AP_minus_007_3122_002((branch_8_IF_1 <= 15.0), __time_step, __nb_step);
	guarantee "AP_minus_007_3122_002" AP_minus_007_1;
	var Arrow_xxRollAutopilotSpec_183_ni_3_1 : bool = (true -> (pre (false)));
	var Cb_operator_1 : bool = ( ( (RollAutopilotSpec_roll_angle_1 > -6.0) ) and ( (RollAutopilotSpec_roll_angle_1 < 6.0) ) );
	var Cc_operator_1 : bool = (branch_9_IF_1 >= 30.0);
	var Cd_operator_1 : bool = ( ( ( (RollAutopilotSpec_TurnKnob_1 >= 3.0) ) or ( (RollAutopilotSpec_TurnKnob_1 <= -3.0) ) ) and ( ( (RollAutopilotSpec_TurnKnob_1 <= 30.0) ) or ( (RollAutopilotSpec_TurnKnob_1 >= -30.0) ) ) );
	var H_call_1 : bool = H_call_3146_002(xxRollAutopilotSpec_48_operator_1, __time_step, __nb_step);
	var H_call1_1 : bool = H_call1_3176_002(xxRollAutopilotSpec_99_operator_1, __time_step, __nb_step);
	var H_call11_1 : bool = H_call11_3220_002(xxRollAutopilotSpec_148_operator_1, __time_step, __nb_step);
	var SI_call_1 : bool = SI_call_3275_002(roll_hold_operator_1 and ( branch_10_IF_1 or ( (false -> (pre (( (not (roll_hold_operator_1)) )))) ) ), (not (( ( (not (roll_hold_operator_1)) ) and ( (false -> (pre (roll_hold_operator_1))) ) ))), __time_step, __nb_step);
	var SI_call1_1 : bool = SI_call1_3300_002(roll_hold_operator_1 and ( branch_10_IF_1 or ( (false -> (pre (( (not (roll_hold_operator_1)) )))) ) ), xxRollAutopilotSpec_11_operator_1, __time_step, __nb_step);
	var SI_call11_1 : bool = SI_call11_3343_002(roll_hold_operator_1 and ( branch_10_IF_1 or ( (false -> (pre (( (not (roll_hold_operator_1)) )))) ) ), (not (( ( (not (roll_hold_operator_1)) ) and ( (false -> (pre (roll_hold_operator_1))) ) ))), __time_step, __nb_step);
	var SI_call111_1 : bool = SI_call111_3368_002(roll_hold_operator_1 and ( branch_10_IF_1 or ( (false -> (pre (( (not (roll_hold_operator_1)) )))) ) ), xxRollAutopilotSpec_62_operator_1, __time_step, __nb_step);
	var SI_call1111_1 : bool = SI_call1111_3392_002(roll_hold_operator_1 and ( branch_10_IF_1 or ( (false -> (pre (( (not (roll_hold_operator_1)) )))) ) ), (not (( ( (not (roll_hold_operator_1)) ) and ( (false -> (pre (roll_hold_operator_1))) ) ))), __time_step, __nb_step);
	var SI_call11111_1 : bool = SI_call11111_3420_003(roll_hold_operator_1 and ( branch_10_IF_1 or ( (false -> (pre (( (not (roll_hold_operator_1)) )))) ) ), xxRollAutopilotSpec_112_operator_1, __time_step, __nb_step);
	var SI_call111111_1 : bool = SI_call111111_3445_002(roll_hold_operator_1 and ( branch_10_IF_1 or ( (false -> (pre (( (not (roll_hold_operator_1)) )))) ) ), xxRollAutopilotSpec_87_operator_1, __time_step, __nb_step);
	var SI_call1111111_1 : bool = SI_call1111111_3494_002(roll_hold_operator_1 and ( branch_10_IF_1 or ( (false -> (pre (( (not (roll_hold_operator_1)) )))) ) ), xxRollAutopilotSpec_36_operator_1, __time_step, __nb_step);
	var SI_call11111111_1 : bool = SI_call11111111_3541_002(roll_hold_operator_1 and ( branch_10_IF_1 or ( (false -> (pre (( (not (roll_hold_operator_1)) )))) ) ), xxRollAutopilotSpec_136_operator_1, __time_step, __nb_step);
	var branch_10_IF_1 : bool = if ( (true -> (pre (false))) ) then
		true
	    else false;
	var branch_11_IF_1 : bool = if ( (true -> (pre (false))) ) then
		true
	    else ( H_call_1 and xxRollAutopilotSpec_26_operator_1 );
	var branch_12_IF_1 : bool = if ( (true -> (pre (false))) ) then
		true
	    else ( H_call1_1 and xxRollAutopilotSpec_77_operator_1 );
	var branch_13_IF_1 : real = if xxRollAutopilotSpec_169_operator_1 then
		1.0
	    else -1.0;
	var branch_14_IF_1 : bool = if ( (true -> (pre (false))) ) then
		true
	    else ( H_call11_1 and xxRollAutopilotSpec_127_operator_1 );
	var branch_15_IF_1 : real = if Arrow_xxRollAutopilotSpec_183_ni_3_1 then
		0.0
	    else ( (0.0 -> (pre (RollAutopilotSpec_roll_angle_1))) );
	var branch_16_IF_1 : bool = if Arrow_xxRollAutopilotSpec_183_ni_3_1 then
		false
	    else ( (false -> (pre (( (not (( ( Cb_operator_1 or Cc_operator_1 ) or Cd_operator_1 ))) )))) );
	var branch_8_IF_1 : real = if ( (RollAutopilotSpec_roll_actuator_command_1 >= 0.0) ) then
		RollAutopilotSpec_roll_actuator_command_1
	    else ( (kind2_times(RollAutopilotSpec_roll_actuator_command_1, -1.0)) );
	var branch_9_IF_1 : real = if xxRollAutopilotSpec_169_operator_1 then
		RollAutopilotSpec_roll_angle_1
	    else ( (kind2_times(RollAutopilotSpec_roll_angle_1, -1.0)) );
		mode hdg_hold_mode_3594_001(
		require hdg_hold_mode_require_1;
		ensure "hdg_hold_mode_ensure_3614_001" hdg_hold_mode_ensure_1;	);

	var hdg_hold_mode_ensure_1 : bool = hdg_hold_mode_ensure_3614_001((RollAutopilotSpec_roll_cmd_1 = RollAutopilotSpec_hdg_hold_mode_cmd_1), __time_step, __nb_step);
	var hdg_hold_mode_require_1 : bool = hdg_hold_mode_require_3619_001(RollAutopilotSpec_HDGmode_1, __time_step, __nb_step);
	var no_other_lateral_mode_operator_1 : bool = (not (RollAutopilotSpec_HDGmode_1));
		mode roll_hold_mode_3628_001(
		require roll_hold_mode_require_1;
		ensure "roll_hold_mode_ensure_3648_001" roll_hold_mode_ensure_1;	);

	var roll_hold_mode_ensure_1 : bool = roll_hold_mode_ensure_3648_001((RollAutopilotSpec_roll_cmd_1 = RollAutopilotSpec_roll_hold_reference_1), __time_step, __nb_step);
	var roll_hold_mode_require_1 : bool = roll_hold_mode_require_3654_001(no_other_lateral_mode_operator_1 and RollAutopilotSpec_autopilot_engaged_1, __time_step, __nb_step);
	var roll_hold_operator_1 : bool = ( no_other_lateral_mode_operator_1 and RollAutopilotSpec_autopilot_engaged_1 );
	var spec206_operator_1 : bool = spec206_operator_3661_001((not (RollAutopilotSpec_autopilot_engaged_1)), (RollAutopilotSpec_roll_actuator_command_1 = 0.0), __time_step, __nb_step);
	var spec252_operator_1 : bool = spec252_operator_3676_001(( ( (RollAutopilotSpec_TurnKnob_1 >= 3.0) ) or ( (RollAutopilotSpec_TurnKnob_1 <= -3.0) ) ) and ( ( (RollAutopilotSpec_TurnKnob_1 <= 30.0) ) or ( (RollAutopilotSpec_TurnKnob_1 >= -30.0) ) ), (RollAutopilotSpec_roll_hold_reference_1 = RollAutopilotSpec_TurnKnob_1), __time_step, __nb_step);
	var xxRollAutopilotSpec_107_operator_1 : bool = xxRollAutopilotSpec_107_operator_3700_001((branch_9_IF_1 >= 30.0), (RollAutopilotSpec_roll_hold_reference_1 = ( kind2_times(kind2_times(1.0, 30.0), branch_13_IF_1) )), __time_step, __nb_step);
	var xxRollAutopilotSpec_112_operator_1 : bool = xxRollAutopilotSpec_112_operator_3722_001(roll_hold_operator_1 and ( branch_10_IF_1 or ( (false -> (pre (( (not (roll_hold_operator_1)) )))) ) ), xxRollAutopilotSpec_107_operator_1, __time_step, __nb_step);
	var xxRollAutopilotSpec_11_operator_1 : bool = xxRollAutopilotSpec_11_operator_3738_001(roll_hold_operator_1 and ( branch_10_IF_1 or ( (false -> (pre (( (not (roll_hold_operator_1)) )))) ) ), xxRollAutopilotSpec_6_operator_1, __time_step, __nb_step);
	var xxRollAutopilotSpec_127_operator_1 : bool = xxRollAutopilotSpec_127_operator_3754_001(SI_call1111_1, SI_call11111_1, __time_step, __nb_step);
	var xxRollAutopilotSpec_131_operator_1 : bool = xxRollAutopilotSpec_131_operator_3787_001((branch_9_IF_1 >= 30.0), (RollAutopilotSpec_roll_hold_reference_1 = ( kind2_times(kind2_times(1.0, 30.0), branch_13_IF_1) )), __time_step, __nb_step);
	var xxRollAutopilotSpec_136_operator_1 : bool = xxRollAutopilotSpec_136_operator_3805_001(roll_hold_operator_1 and ( branch_10_IF_1 or ( (false -> (pre (( (not (roll_hold_operator_1)) )))) ) ), xxRollAutopilotSpec_131_operator_1, __time_step, __nb_step);
	var xxRollAutopilotSpec_148_operator_1 : bool = xxRollAutopilotSpec_148_operator_3823_001(( ( (not (roll_hold_operator_1)) ) and ( (false -> (pre (roll_hold_operator_1))) ) ) and ( (not (branch_10_IF_1)) ), (false -> (pre (SI_call11111111_1))), __time_step, __nb_step);
	var xxRollAutopilotSpec_169_operator_1 : bool = (RollAutopilotSpec_roll_angle_1 >= 0.0);
	var xxRollAutopilotSpec_26_operator_1 : bool = xxRollAutopilotSpec_26_operator_3911_001(SI_call_1, SI_call1_1, __time_step, __nb_step);
	var xxRollAutopilotSpec_31_operator_1 : bool = xxRollAutopilotSpec_31_operator_3935_001((not (( ( Cb_operator_1 or Cc_operator_1 ) or Cd_operator_1 ))), (RollAutopilotSpec_roll_hold_reference_1 = RollAutopilotSpec_roll_angle_1), __time_step, __nb_step);
	var xxRollAutopilotSpec_36_operator_1 : bool = xxRollAutopilotSpec_36_operator_3949_001(roll_hold_operator_1 and ( branch_10_IF_1 or ( (false -> (pre (( (not (roll_hold_operator_1)) )))) ) ), xxRollAutopilotSpec_31_operator_1, __time_step, __nb_step);
	var xxRollAutopilotSpec_48_operator_1 : bool = xxRollAutopilotSpec_48_operator_3970_001(( ( (not (roll_hold_operator_1)) ) and ( (false -> (pre (roll_hold_operator_1))) ) ) and ( (not (branch_10_IF_1)) ), (false -> (pre (SI_call1111111_1))), __time_step, __nb_step);
	var xxRollAutopilotSpec_57_operator_1 : bool = xxRollAutopilotSpec_57_operator_3993_001(( (RollAutopilotSpec_roll_angle_1 < 6.0) ) and ( (RollAutopilotSpec_roll_angle_1 > -6.0) ), (RollAutopilotSpec_roll_hold_reference_1 = 0.0), __time_step, __nb_step);
	var xxRollAutopilotSpec_62_operator_1 : bool = xxRollAutopilotSpec_62_operator_4011_001(roll_hold_operator_1 and ( branch_10_IF_1 or ( (false -> (pre (( (not (roll_hold_operator_1)) )))) ) ), xxRollAutopilotSpec_57_operator_1, __time_step, __nb_step);
	var xxRollAutopilotSpec_6_operator_1 : bool = xxRollAutopilotSpec_6_operator_4033_001((not (( ( Cb_operator_1 or Cc_operator_1 ) or Cd_operator_1 ))), (RollAutopilotSpec_roll_hold_reference_1 = RollAutopilotSpec_roll_angle_1), __time_step, __nb_step);
	var xxRollAutopilotSpec_77_operator_1 : bool = xxRollAutopilotSpec_77_operator_4052_001(SI_call11_1, SI_call111_1, __time_step, __nb_step);
	var xxRollAutopilotSpec_82_operator_1 : bool = xxRollAutopilotSpec_82_operator_4087_001(( (RollAutopilotSpec_roll_angle_1 < 6.0) ) and ( (RollAutopilotSpec_roll_angle_1 > -6.0) ), (RollAutopilotSpec_roll_hold_reference_1 = 0.0), __time_step, __nb_step);
	var xxRollAutopilotSpec_87_operator_1 : bool = xxRollAutopilotSpec_87_operator_4113_001(roll_hold_operator_1 and ( branch_10_IF_1 or ( (false -> (pre (( (not (roll_hold_operator_1)) )))) ) ), xxRollAutopilotSpec_82_operator_1, __time_step, __nb_step);
	var xxRollAutopilotSpec_99_operator_1 : bool = xxRollAutopilotSpec_99_operator_4150_001(( ( (not (roll_hold_operator_1)) ) and ( (false -> (pre (roll_hold_operator_1))) ) ) and ( (not (branch_10_IF_1)) ), (false -> (pre (SI_call111111_1))), __time_step, __nb_step);
	assume "NB_STEP" (__nb_step = (0 -> ((pre (__nb_step)) + 1)));
	assume "TIME_STEP" (__time_step = (0.0 -> ((pre (__time_step)) + 0.0250)));
tel

(*
Original block name: Roll_Autopilot_PP/Roll_Autopilot
*)
node  Roll_Autopilot_1232_002(
	Phi_1 : real; Psi_1 : real; p_1 : real; TAS_1 : real; APEng_1 : bool;
	HDGMode_1 : bool; HDGRef_1 : real; TurnKnob_1 : real; __time_step : real; __nb_step : int;)
returns(
	AilCmd_1 : real; HdgMode_cmd_1 : real; PhiRef_cmd_1 : real; phiCmd_1 : real;);
(*@contract
	import Roll_Autopilot_RollAutopilotSpec1_3081_002(Phi_1, TurnKnob_1, HDGMode_1, APEng_1, __time_step, __nb_step) returns (HdgMode_cmd_1, AilCmd_1, phiCmd_1, PhiRef_cmd_1);
*)
var 
	BasicRollMode_1 : real; Engswitch_1 : real; HeadingMode_1 : real; Modeswitch_1 : real; RollReference_1 : real;
let
	assert ((-180.0 <= Phi_1) and (Phi_1 <= 180.0));
	assert ((-180.0 <= Psi_1) and (Psi_1 <= 180.0));
	assert ((-180.0 <= p_1) and (p_1 <= 180.0));
	assert ((0.0 <= TAS_1) and (TAS_1 <= 1000.0));
	assert ((-180.0 <= HDGRef_1) and (HDGRef_1 <= 180.0));
	assert ((-45.0 <= TurnKnob_1) and (TurnKnob_1 <= 45.0));
	BasicRollMode_1 = BasicRollMode_1247_002(Modeswitch_1, Phi_1, p_1, APEng_1, __time_step, __nb_step);
	Engswitch_1 = if APEng_1 then
		BasicRollMode_1
	    else 0.0;
	HeadingMode_1 = HeadingMode_1343_002(HDGRef_1, Psi_1, TAS_1, __time_step, __nb_step);
	Modeswitch_1 = if HDGMode_1 then
		HeadingMode_1
	    else RollReference_1;
	RollReference_1 = RollReference_1402_002(Phi_1, APEng_1, TurnKnob_1, __time_step, __nb_step);
	AilCmd_1 = Engswitch_1;
	HdgMode_cmd_1 = HeadingMode_1;
	PhiRef_cmd_1 = RollReference_1;
	phiCmd_1 = Modeswitch_1;
tel

(*
Original block name: Roll_Autopilot_PP
*)
node  Roll_Autopilot_PP(
	HDGMode_1 : bool; HDGRef_1 : real; TurnKnob_1 : real; phi_1 : real; psi_1 : real;
	p_1 : real; TAS_1 : real; APEng_1 : bool;)
returns(
	AileronCmd_1 : real; phiCmd_1 : real; HdgModeCmd_1 : real;);
var 
	Roll_Autopilot_1 : real; Roll_Autopilot_2 : real; Roll_Autopilot_3 : real; Roll_Autopilot_4 : real; __time_step : real;
	__nb_step : int;
let
	assert ((-180.0 <= HDGRef_1) and (HDGRef_1 <= 180.0));
	assert ((-45.0 <= TurnKnob_1) and (TurnKnob_1 <= 45.0));
	(Roll_Autopilot_1, Roll_Autopilot_2, Roll_Autopilot_3, Roll_Autopilot_4) = Roll_Autopilot_1232_002(phi_1, psi_1, p_1, TAS_1, APEng_1, HDGMode_1, HDGRef_1, TurnKnob_1, __time_step, __nb_step);
	AileronCmd_1 = Roll_Autopilot_1;
	phiCmd_1 = Roll_Autopilot_4;
	HdgModeCmd_1 = Roll_Autopilot_2;
	__time_step = (0.0 -> ((pre (__time_step)) + 0.0250));
	__nb_step = (0 -> ((pre (__nb_step)) + 1));
tel

