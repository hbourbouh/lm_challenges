-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 04-Nov-2019 19:15:18
node kind2_times(x, y: real) returns (z: real) ;
var abs_x, abs_y, abs_z: real;
let
   abs_x = if x < 0.0 then -x else x ;
    abs_y = if y < 0.0 then -y else y ;
    abs_z = if z < 0.0 then -z else z ;
    -- Neutral.
    assert (z = y) = ((x = 1.0) or (y = 0.0)) ;
    assert (z = x) = ((y = 1.0) or (x = 0.0)) ;
    -- Absorbing.
    assert (z = 0.0) = ( (x = 0.0) or (y = 0.0) ) ;
    -- Sign.
    assert (z > 0.0) = (
      ( (x > 0.0) and (y > 0.0) ) or
      ( (x < 0.0) and (y < 0.0) )
    ) ;
    assert (z < 0.0) = (
      ( (x > 0.0) and (y < 0.0) ) or
      ( (x < 0.0) and (y > 0.0) )
    ) ;
    -- Loose proportionality.
    assert (abs_z >= abs_y) = ((abs_x >= 1.0) or (y = 0.0)) ;
    assert (abs_z >= abs_x) = ((abs_y >= 1.0) or (x = 0.0)) ;
    assert (abs_z <= abs_y) = ((abs_x <= 1.0) or (y = 0.0)) ;
    assert (abs_z <= abs_x) = ((abs_y <= 1.0) or (x = 0.0)) ;
    z = x * y ;
tel
node  bool_to_int(
	x : bool;)
returns(
	y : int;);
let
	y = if x then
		1
	    else 0;
tel

node imported _inv_M_3x3(
	a11 : real; a21 : real; a31 : real; a12 : real; a22 : real;
	a32 : real; a13 : real; a23 : real; a33 : real;)
returns(
	ai11 : real; ai21 : real; ai31 : real; ai12 : real; ai22 : real;
	ai32 : real; ai13 : real; ai23 : real; ai33 : real;);
(*@contract
	guarantee (( (kind2_times(a11, ai11)) + (kind2_times(a12, ai21)) + (kind2_times(a13, ai31)) ) = 1.0);
	guarantee (( (kind2_times(a11, ai12)) + (kind2_times(a12, ai22)) + (kind2_times(a13, ai32)) ) = 0.0);
	guarantee (( (kind2_times(a11, ai13)) + (kind2_times(a12, ai23)) + (kind2_times(a13, ai33)) ) = 0.0);
	guarantee (( (kind2_times(a21, ai11)) + (kind2_times(a22, ai21)) + (kind2_times(a23, ai31)) ) = 0.0);
	guarantee (( (kind2_times(a21, ai12)) + (kind2_times(a22, ai22)) + (kind2_times(a23, ai32)) ) = 1.0);
	guarantee (( (kind2_times(a21, ai13)) + (kind2_times(a22, ai23)) + (kind2_times(a23, ai33)) ) = 0.0);
	guarantee (( (kind2_times(a31, ai11)) + (kind2_times(a32, ai21)) + (kind2_times(a33, ai31)) ) = 0.0);
	guarantee (( (kind2_times(a31, ai12)) + (kind2_times(a32, ai22)) + (kind2_times(a33, ai32)) ) = 0.0);
	guarantee (( (kind2_times(a31, ai13)) + (kind2_times(a32, ai23)) + (kind2_times(a33, ai33)) ) = 1.0);
*)

node imported _inv_M_5x5(
	a11 : real; a21 : real; a31 : real; a41 : real; a51 : real;
	a12 : real; a22 : real; a32 : real; a42 : real; a52 : real;
	a13 : real; a23 : real; a33 : real; a43 : real; a53 : real;
	a14 : real; a24 : real; a34 : real; a44 : real; a54 : real;
	a15 : real; a25 : real; a35 : real; a45 : real; a55 : real;)
returns(
	ai11 : real; ai21 : real; ai31 : real; ai41 : real; ai51 : real;
	ai12 : real; ai22 : real; ai32 : real; ai42 : real; ai52 : real;
	ai13 : real; ai23 : real; ai33 : real; ai43 : real; ai53 : real;
	ai14 : real; ai24 : real; ai34 : real; ai44 : real; ai54 : real;
	ai15 : real; ai25 : real; ai35 : real; ai45 : real; ai55 : real;);
(*@contract
	guarantee (( (kind2_times(a11, ai11)) + (kind2_times(a12, ai21)) + (kind2_times(a13, ai31)) + (kind2_times(a14, ai41)) + (kind2_times(a15, ai51)) ) = 1.0);
	guarantee (( (kind2_times(a11, ai12)) + (kind2_times(a12, ai22)) + (kind2_times(a13, ai32)) + (kind2_times(a14, ai42)) + (kind2_times(a15, ai52)) ) = 0.0);
	guarantee (( (kind2_times(a11, ai13)) + (kind2_times(a12, ai23)) + (kind2_times(a13, ai33)) + (kind2_times(a14, ai43)) + (kind2_times(a15, ai53)) ) = 0.0);
	guarantee (( (kind2_times(a11, ai14)) + (kind2_times(a12, ai24)) + (kind2_times(a13, ai34)) + (kind2_times(a14, ai44)) + (kind2_times(a15, ai54)) ) = 0.0);
	guarantee (( (kind2_times(a11, ai15)) + (kind2_times(a12, ai25)) + (kind2_times(a13, ai35)) + (kind2_times(a14, ai45)) + (kind2_times(a15, ai55)) ) = 0.0);
	guarantee (( (kind2_times(a21, ai11)) + (kind2_times(a22, ai21)) + (kind2_times(a23, ai31)) + (kind2_times(a24, ai41)) + (kind2_times(a25, ai51)) ) = 0.0);
	guarantee (( (kind2_times(a21, ai12)) + (kind2_times(a22, ai22)) + (kind2_times(a23, ai32)) + (kind2_times(a24, ai42)) + (kind2_times(a25, ai52)) ) = 1.0);
	guarantee (( (kind2_times(a21, ai13)) + (kind2_times(a22, ai23)) + (kind2_times(a23, ai33)) + (kind2_times(a24, ai43)) + (kind2_times(a25, ai53)) ) = 0.0);
	guarantee (( (kind2_times(a21, ai14)) + (kind2_times(a22, ai24)) + (kind2_times(a23, ai34)) + (kind2_times(a24, ai44)) + (kind2_times(a25, ai54)) ) = 0.0);
	guarantee (( (kind2_times(a21, ai15)) + (kind2_times(a22, ai25)) + (kind2_times(a23, ai35)) + (kind2_times(a24, ai45)) + (kind2_times(a25, ai55)) ) = 0.0);
	guarantee (( (kind2_times(a31, ai11)) + (kind2_times(a32, ai21)) + (kind2_times(a33, ai31)) + (kind2_times(a34, ai41)) + (kind2_times(a35, ai51)) ) = 0.0);
	guarantee (( (kind2_times(a31, ai12)) + (kind2_times(a32, ai22)) + (kind2_times(a33, ai32)) + (kind2_times(a34, ai42)) + (kind2_times(a35, ai52)) ) = 0.0);
	guarantee (( (kind2_times(a31, ai13)) + (kind2_times(a32, ai23)) + (kind2_times(a33, ai33)) + (kind2_times(a34, ai43)) + (kind2_times(a35, ai53)) ) = 1.0);
	guarantee (( (kind2_times(a31, ai14)) + (kind2_times(a32, ai24)) + (kind2_times(a33, ai34)) + (kind2_times(a34, ai44)) + (kind2_times(a35, ai54)) ) = 0.0);
	guarantee (( (kind2_times(a31, ai15)) + (kind2_times(a32, ai25)) + (kind2_times(a33, ai35)) + (kind2_times(a34, ai45)) + (kind2_times(a35, ai55)) ) = 0.0);
	guarantee (( (kind2_times(a41, ai11)) + (kind2_times(a42, ai21)) + (kind2_times(a43, ai31)) + (kind2_times(a44, ai41)) + (kind2_times(a45, ai51)) ) = 0.0);
	guarantee (( (kind2_times(a41, ai12)) + (kind2_times(a42, ai22)) + (kind2_times(a43, ai32)) + (kind2_times(a44, ai42)) + (kind2_times(a45, ai52)) ) = 0.0);
	guarantee (( (kind2_times(a41, ai13)) + (kind2_times(a42, ai23)) + (kind2_times(a43, ai33)) + (kind2_times(a44, ai43)) + (kind2_times(a45, ai53)) ) = 0.0);
	guarantee (( (kind2_times(a41, ai14)) + (kind2_times(a42, ai24)) + (kind2_times(a43, ai34)) + (kind2_times(a44, ai44)) + (kind2_times(a45, ai54)) ) = 1.0);
	guarantee (( (kind2_times(a41, ai15)) + (kind2_times(a42, ai25)) + (kind2_times(a43, ai35)) + (kind2_times(a44, ai45)) + (kind2_times(a45, ai55)) ) = 0.0);
	guarantee (( (kind2_times(a51, ai11)) + (kind2_times(a52, ai21)) + (kind2_times(a53, ai31)) + (kind2_times(a54, ai41)) + (kind2_times(a55, ai51)) ) = 0.0);
	guarantee (( (kind2_times(a51, ai12)) + (kind2_times(a52, ai22)) + (kind2_times(a53, ai32)) + (kind2_times(a54, ai42)) + (kind2_times(a55, ai52)) ) = 0.0);
	guarantee (( (kind2_times(a51, ai13)) + (kind2_times(a52, ai23)) + (kind2_times(a53, ai33)) + (kind2_times(a54, ai43)) + (kind2_times(a55, ai53)) ) = 0.0);
	guarantee (( (kind2_times(a51, ai14)) + (kind2_times(a52, ai24)) + (kind2_times(a53, ai34)) + (kind2_times(a54, ai44)) + (kind2_times(a55, ai54)) ) = 0.0);
	guarantee (( (kind2_times(a51, ai15)) + (kind2_times(a52, ai25)) + (kind2_times(a53, ai35)) + (kind2_times(a54, ai45)) + (kind2_times(a55, ai55)) ) = 1.0);
*)

(*
Original block name: EB_12B_with_contracts_PP/EB/ridge/det
*)
node  det_43_034(
	Matrix_1 : real; Matrix_2 : real; Matrix_3 : real; Matrix_4 : real; Matrix_5 : real;
	Matrix_6 : real; Matrix_7 : real; Matrix_8 : real; Matrix_9 : real; __time_step : real;
	__nb_step : int;)
returns(
	det_lpar_Matrix_rpar__1 : real;);
var 
	Reshape_1 : real; Reshape_2 : real; Reshape_3 : real; Reshape_4 : real; Reshape_5 : real;
	Reshape_6 : real; Reshape_7 : real; Reshape_8 : real; Reshape_9 : real;
let
	Reshape_1 = Matrix_1;
	Reshape_2 = Matrix_2;
	Reshape_3 = Matrix_3;
	Reshape_4 = Matrix_4;
	Reshape_5 = Matrix_5;
	Reshape_6 = Matrix_6;
	Reshape_7 = Matrix_7;
	Reshape_8 = Matrix_8;
	Reshape_9 = Matrix_9;
	det_lpar_Matrix_rpar__1 = ( ( kind2_times(1.0, Reshape_1) * Reshape_5 * Reshape_9 ) - ( kind2_times(1.0, Reshape_1) * Reshape_6 * Reshape_8 ) - ( kind2_times(1.0, Reshape_2) * Reshape_4 * Reshape_9 ) + ( kind2_times(1.0, Reshape_3) * Reshape_4 * Reshape_8 ) + ( kind2_times(1.0, Reshape_2) * Reshape_6 * Reshape_7 ) - ( kind2_times(1.0, Reshape_3) * Reshape_5 * Reshape_7 ) );
tel

(*
Original block name: EB_12B_with_contracts_PP/EB/ridge
*)
node  ridge_33_034(
	In1_1 : real; In1_2 : real; In1_3 : real; In1_4 : real; In1_5 : real;
	In1_6 : real; In1_7 : real; In1_8 : real; In1_9 : real; __time_step : real;
	__nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real; Out1_4 : real; Out1_5 : real;
	Out1_6 : real; Out1_7 : real; Out1_8 : real; Out1_9 : real; ridge_on_1 : bool;);
var 
	Constant4_1 : real; Constant4_2 : real; Constant4_3 : real; Constant4_4 : real; Constant4_5 : real;
	Constant4_6 : real; Constant4_7 : real; Constant4_8 : real; Constant4_9 : real; RelationalOperator_1 : bool;
	Switch_1 : real; Switch_2 : real; Switch_3 : real; Switch_4 : real; Switch_5 : real;
	Switch_6 : real; Switch_7 : real; Switch_8 : real; Switch_9 : real; Switch1_1 : real;
	Switch1_2 : real; Switch1_3 : real; Switch1_4 : real; Switch1_5 : real; Switch1_6 : real;
	Switch1_7 : real; Switch1_8 : real; Switch1_9 : real; det_1 : real; fix_on_1 : real;
let
	Constant4_1 = 0.0000000000010;
	Constant4_2 = 0.0;
	Constant4_3 = 0.0;
	Constant4_4 = 0.0;
	Constant4_5 = 0.0000000000010;
	Constant4_6 = 0.0;
	Constant4_7 = 0.0;
	Constant4_8 = 0.0;
	Constant4_9 = 0.0000000000010;
	RelationalOperator_1 = (det_1 <= 0.0000000000010);
	Switch_1 = if RelationalOperator_1 then
		Constant4_1
	    else 0.0;
	Switch_2 = if RelationalOperator_1 then
		Constant4_2
	    else 0.0;
	Switch_3 = if RelationalOperator_1 then
		Constant4_3
	    else 0.0;
	Switch_4 = if RelationalOperator_1 then
		Constant4_4
	    else 0.0;
	Switch_5 = if RelationalOperator_1 then
		Constant4_5
	    else 0.0;
	Switch_6 = if RelationalOperator_1 then
		Constant4_6
	    else 0.0;
	Switch_7 = if RelationalOperator_1 then
		Constant4_7
	    else 0.0;
	Switch_8 = if RelationalOperator_1 then
		Constant4_8
	    else 0.0;
	Switch_9 = if RelationalOperator_1 then
		Constant4_9
	    else 0.0;
	Switch1_1 = if (fix_on_1 >= 0.10) then
		Switch_1
	    else Constant4_1;
	Switch1_2 = if (fix_on_1 >= 0.10) then
		Switch_2
	    else Constant4_2;
	Switch1_3 = if (fix_on_1 >= 0.10) then
		Switch_3
	    else Constant4_3;
	Switch1_4 = if (fix_on_1 >= 0.10) then
		Switch_4
	    else Constant4_4;
	Switch1_5 = if (fix_on_1 >= 0.10) then
		Switch_5
	    else Constant4_5;
	Switch1_6 = if (fix_on_1 >= 0.10) then
		Switch_6
	    else Constant4_6;
	Switch1_7 = if (fix_on_1 >= 0.10) then
		Switch_7
	    else Constant4_7;
	Switch1_8 = if (fix_on_1 >= 0.10) then
		Switch_8
	    else Constant4_8;
	Switch1_9 = if (fix_on_1 >= 0.10) then
		Switch_9
	    else Constant4_9;
	det_1 = det_43_034(In1_1, In1_2, In1_3, In1_4, In1_5, In1_6, In1_7, In1_8, In1_9, __time_step, __nb_step);
	fix_on_1 = 1.0;
	Out1_1 = ( In1_1 + Switch1_1 );
	Out1_2 = ( In1_2 + Switch1_2 );
	Out1_3 = ( In1_3 + Switch1_3 );
	Out1_4 = ( In1_4 + Switch1_4 );
	Out1_5 = ( In1_5 + Switch1_5 );
	Out1_6 = ( In1_6 + Switch1_6 );
	Out1_7 = ( In1_7 + Switch1_7 );
	Out1_8 = ( In1_8 + Switch1_8 );
	Out1_9 = ( In1_9 + Switch1_9 );
	ridge_on_1 = RelationalOperator_1;
tel

(*
Original block name: EB_12B_with_contracts_PP/EB_12B_EBSpec/EB001
*)
node  EB001_195_034(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: EB_12B_with_contracts_PP/EB_12B_EBSpec/EB002
*)
node  EB002_199_034(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: EB_12B_with_contracts_PP/EB_12B_EBSpec/EB004
*)
node  EB004_203_034(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: EB_12B_with_contracts_PP/EB_12B_EBSpec/abs_call
*)
node  abs_call_227_034(
	abs_x_1 : real; __time_step : real; __nb_step : int;)
returns(
	abs_y_1 : real;);
var 
	branch_4_IF_1 : real;
let
	branch_4_IF_1 = if ( (abs_x_1 >= 0.0) ) then
		abs_x_1
	    else ( (kind2_times(abs_x_1, -1.0)) );
	abs_y_1 = branch_4_IF_1;
tel

(*
Original block name: EB_12B_with_contracts_PP/EB_12B_EBSpec/abs_call1
*)
node  abs_call1_242_034(
	abs_x_1 : real; __time_step : real; __nb_step : int;)
returns(
	abs_y_1 : real;);
var 
	branch_4_IF_1 : real;
let
	branch_4_IF_1 = if ( (abs_x_1 >= 0.0) ) then
		abs_x_1
	    else ( (kind2_times(abs_x_1, -1.0)) );
	abs_y_1 = branch_4_IF_1;
tel

(*
Original block name: EB_12B_with_contracts_PP/EB_12B_EBSpec/abs_call11
*)
node  abs_call11_258_034(
	abs_x_1 : real; __time_step : real; __nb_step : int;)
returns(
	abs_y_1 : real;);
var 
	branch_4_IF_1 : real;
let
	branch_4_IF_1 = if ( (abs_x_1 >= 0.0) ) then
		abs_x_1
	    else ( (kind2_times(abs_x_1, -1.0)) );
	abs_y_1 = branch_4_IF_1;
tel

(*
Original block name: EB_12B_with_contracts_PP/EB_12B_EBSpec/abs_call111
*)
node  abs_call111_273_034(
	abs_x_1 : real; __time_step : real; __nb_step : int;)
returns(
	abs_y_1 : real;);
var 
	branch_4_IF_1 : real;
let
	branch_4_IF_1 = if ( (abs_x_1 >= 0.0) ) then
		abs_x_1
	    else ( (kind2_times(abs_x_1, -1.0)) );
	abs_y_1 = branch_4_IF_1;
tel

(*
Original block name: EB_12B_with_contracts_PP/EB_12B_EBSpec/abs_call1111
*)
node  abs_call1111_288_034(
	abs_x_1 : real; __time_step : real; __nb_step : int;)
returns(
	abs_y_1 : real;);
var 
	branch_4_IF_1 : real;
let
	branch_4_IF_1 = if ( (abs_x_1 >= 0.0) ) then
		abs_x_1
	    else ( (kind2_times(abs_x_1, -1.0)) );
	abs_y_1 = branch_4_IF_1;
tel

(*
Original block name: EB_12B_with_contracts_PP/EB_12B_EBSpec/abs_call11111
*)
node  abs_call11111_303_034(
	abs_x_1 : real; __time_step : real; __nb_step : int;)
returns(
	abs_y_1 : real;);
var 
	branch_4_IF_1 : real;
let
	branch_4_IF_1 = if ( (abs_x_1 >= 0.0) ) then
		abs_x_1
	    else ( (kind2_times(abs_x_1, -1.0)) );
	abs_y_1 = branch_4_IF_1;
tel

(*
Original block name: EB_12B_with_contracts_PP/EB_12B_EBSpec/abs_call111111
*)
node  abs_call111111_318_034(
	abs_x_1 : real; __time_step : real; __nb_step : int;)
returns(
	abs_y_1 : real;);
var 
	branch_4_IF_1 : real;
let
	branch_4_IF_1 = if ( (abs_x_1 >= 0.0) ) then
		abs_x_1
	    else ( (kind2_times(abs_x_1, -1.0)) );
	abs_y_1 = branch_4_IF_1;
tel

(*
Original block name: EB_12B_with_contracts_PP/EB_12B_EBSpec/abs_call1111111
*)
node  abs_call1111111_333_034(
	abs_x_1 : real; __time_step : real; __nb_step : int;)
returns(
	abs_y_1 : real;);
var 
	branch_4_IF_1 : real;
let
	branch_4_IF_1 = if ( (abs_x_1 >= 0.0) ) then
		abs_x_1
	    else ( (kind2_times(abs_x_1, -1.0)) );
	abs_y_1 = branch_4_IF_1;
tel

(*
Original block name: EB_12B_with_contracts_PP/EB_12B_EBSpec/abs_call11111111
*)
node  abs_call11111111_348_034(
	abs_x_1 : real; __time_step : real; __nb_step : int;)
returns(
	abs_y_1 : real;);
var 
	branch_4_IF_1 : real;
let
	branch_4_IF_1 = if ( (abs_x_1 >= 0.0) ) then
		abs_x_1
	    else ( (kind2_times(abs_x_1, -1.0)) );
	abs_y_1 = branch_4_IF_1;
tel

(*
Original block name: EB_12B_with_contracts_PP/EB_12B_EBSpec/abs_call111111111
*)
node  abs_call111111111_363_034(
	abs_x_1 : real; __time_step : real; __nb_step : int;)
returns(
	abs_y_1 : real;);
var 
	branch_4_IF_1 : real;
let
	branch_4_IF_1 = if ( (abs_x_1 >= 0.0) ) then
		abs_x_1
	    else ( (kind2_times(abs_x_1, -1.0)) );
	abs_y_1 = branch_4_IF_1;
tel

(*
Original block name: EB_12B_with_contracts_PP/EB_12B_EBSpec/abs_call1111111111
*)
node  abs_call1111111111_378_034(
	abs_x_1 : real; __time_step : real; __nb_step : int;)
returns(
	abs_y_1 : real;);
var 
	branch_4_IF_1 : real;
let
	branch_4_IF_1 = if ( (abs_x_1 >= 0.0) ) then
		abs_x_1
	    else ( (kind2_times(abs_x_1, -1.0)) );
	abs_y_1 = branch_4_IF_1;
tel

(*
Original block name: EB_12B_with_contracts_PP/EB_12B_EBSpec/abs_call11111111111
*)
node  abs_call11111111111_393_034(
	abs_x_1 : real; __time_step : real; __nb_step : int;)
returns(
	abs_y_1 : real;);
var 
	branch_4_IF_1 : real;
let
	branch_4_IF_1 = if ( (abs_x_1 >= 0.0) ) then
		abs_x_1
	    else ( (kind2_times(abs_x_1, -1.0)) );
	abs_y_1 = branch_4_IF_1;
tel

(*
Original block name: EB_12B_with_contracts_PP/EB_12B_EBSpec/abs_call111111111111
*)
node  abs_call111111111111_408_034(
	abs_x_1 : real; __time_step : real; __nb_step : int;)
returns(
	abs_y_1 : real;);
var 
	branch_4_IF_1 : real;
let
	branch_4_IF_1 = if ( (abs_x_1 >= 0.0) ) then
		abs_x_1
	    else ( (kind2_times(abs_x_1, -1.0)) );
	abs_y_1 = branch_4_IF_1;
tel

(*
Original block name: EB_12B_with_contracts_PP/EB_12B_EBSpec/abs_call1111111111111
*)
node  abs_call1111111111111_423_034(
	abs_x_1 : real; __time_step : real; __nb_step : int;)
returns(
	abs_y_1 : real;);
var 
	branch_4_IF_1 : real;
let
	branch_4_IF_1 = if ( (abs_x_1 >= 0.0) ) then
		abs_x_1
	    else ( (kind2_times(abs_x_1, -1.0)) );
	abs_y_1 = branch_4_IF_1;
tel

(*
Original block name: EB_12B_with_contracts_PP/EB_12B_EBSpec/abs_call11111111111111
*)
node  abs_call11111111111111_438_034(
	abs_x_1 : real; __time_step : real; __nb_step : int;)
returns(
	abs_y_1 : real;);
var 
	branch_4_IF_1 : real;
let
	branch_4_IF_1 = if ( (abs_x_1 >= 0.0) ) then
		abs_x_1
	    else ( (kind2_times(abs_x_1, -1.0)) );
	abs_y_1 = branch_4_IF_1;
tel

(*
Original block name: EB_12B_with_contracts_PP/EB_12B_EBSpec/abs_call111111111111111
*)
node  abs_call111111111111111_453_034(
	abs_x_1 : real; __time_step : real; __nb_step : int;)
returns(
	abs_y_1 : real;);
var 
	branch_4_IF_1 : real;
let
	branch_4_IF_1 = if ( (abs_x_1 >= 0.0) ) then
		abs_x_1
	    else ( (kind2_times(abs_x_1, -1.0)) );
	abs_y_1 = branch_4_IF_1;
tel

(*
Original block name: EB_12B_with_contracts_PP/EB_12B_EBSpec/abs_call1111111111111111
*)
node  abs_call1111111111111111_468_034(
	abs_x_1 : real; __time_step : real; __nb_step : int;)
returns(
	abs_y_1 : real;);
var 
	branch_4_IF_1 : real;
let
	branch_4_IF_1 = if ( (abs_x_1 >= 0.0) ) then
		abs_x_1
	    else ( (kind2_times(abs_x_1, -1.0)) );
	abs_y_1 = branch_4_IF_1;
tel

(*
Original block name: EB_12B_with_contracts_PP/EB_12B_EBSpec/abs_call11111111111111111
*)
node  abs_call11111111111111111_483_034(
	abs_x_1 : real; __time_step : real; __nb_step : int;)
returns(
	abs_y_1 : real;);
var 
	branch_4_IF_1 : real;
let
	branch_4_IF_1 = if ( (abs_x_1 >= 0.0) ) then
		abs_x_1
	    else ( (kind2_times(abs_x_1, -1.0)) );
	abs_y_1 = branch_4_IF_1;
tel

(*
Original block name: EB_12B_with_contracts_PP/EB_12B_EBSpec/det_3x3_call
*)
node  det_3x3_call_498_034(
	det_3x3_a11_1 : real; det_3x3_a21_1 : real; det_3x3_a31_1 : real; det_3x3_a12_1 : real; det_3x3_a22_1 : real;
	det_3x3_a32_1 : real; det_3x3_a13_1 : real; det_3x3_a23_1 : real; det_3x3_a33_1 : real; __time_step : real;
	__nb_step : int;)
returns(
	det_3x3_det_1 : real;);
let
	det_3x3_det_1 = ( ( ( kind2_times(kind2_times(1.0, det_3x3_a11_1), ( ( kind2_times(kind2_times(1.0, det_3x3_a22_1), det_3x3_a33_1) ) - ( kind2_times(kind2_times(1.0, det_3x3_a23_1), det_3x3_a32_1) ) )) ) + ( kind2_times(kind2_times(1.0, det_3x3_a12_1), ( ( kind2_times(kind2_times(1.0, det_3x3_a23_1), det_3x3_a31_1) ) - ( kind2_times(kind2_times(1.0, det_3x3_a21_1), det_3x3_a33_1) ) )) ) ) + ( kind2_times(kind2_times(1.0, det_3x3_a13_1), ( ( kind2_times(kind2_times(1.0, det_3x3_a21_1), det_3x3_a32_1) ) - ( kind2_times(kind2_times(1.0, det_3x3_a31_1), det_3x3_a22_1) ) )) ) );
tel

(*
Original block name: EB_12B_with_contracts_PP/EB_12B_EBSpec/spec446_operator
*)
node  spec446_operator_3118_000(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: EB_12B_with_contracts_PP/EB_12B_EBSpec/spec529_operator
*)
node  spec529_operator_3119_000(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: EB_12B_with_contracts_PP/EB_12B_EBSpec
*)
contract EB_12B_EBSpec_179_034(
	B_1 : real; B_2 : real; B_3 : real; B_4 : real; B_5 : real;
	B_6 : real; B_7 : real; B_8 : real; B_9 : real; B_10 : real;
	B_11 : real; B_12 : real; B_13 : real; B_14 : real; B_15 : real;
	__time_step : real; __nb_step : int;)
returns(
	EBSpec_ridge_on_1 : bool; Buminusd_1 : real; Buminusd_2 : real; Buminusd_3 : real; check_1 : real;
	check_2 : real; check_3 : real; check_4 : real; check_5 : real; check_6 : real;
	check_7 : real; check_8 : real; check_9 : real;);
let
	var B_B_T_1_2_operator_1 : real = ( ( ( ( kind2_times(kind2_times(1.0, Selector_1), Selector5_1) ) + ( kind2_times(kind2_times(1.0, Selector1_1), Selector6_1) ) ) + ( kind2_times(kind2_times(1.0, Selector2_1), Selector7_1) ) ) + ( kind2_times(kind2_times(1.0, Selector3_1), Selector8_1) ) ) + ( kind2_times(kind2_times(1.0, Selector4_1), Selector9_1) );
	var B_B_T_1_3_operator_1 : real = ( ( ( ( kind2_times(kind2_times(1.0, Selector_1), Selector10_1) ) + ( kind2_times(kind2_times(1.0, Selector1_1), Selector11_1) ) ) + ( kind2_times(kind2_times(1.0, Selector2_1), Selector12_1) ) ) + ( kind2_times(kind2_times(1.0, Selector3_1), Selector13_1) ) ) + ( kind2_times(kind2_times(1.0, Selector4_1), Selector14_1) );
	var B_B_T_2_3_operator_1 : real = ( ( ( ( kind2_times(kind2_times(1.0, Selector5_1), Selector10_1) ) + ( kind2_times(kind2_times(1.0, Selector6_1), Selector11_1) ) ) + ( kind2_times(kind2_times(1.0, Selector7_1), Selector12_1) ) ) + ( kind2_times(kind2_times(1.0, Selector8_1), Selector13_1) ) ) + ( kind2_times(kind2_times(1.0, Selector9_1), Selector14_1) );
	var Demux_1 : real = Buminusd_1;
	var Demux_2 : real = Buminusd_2;
	var Demux_3 : real = Buminusd_3;
	var Demux1_1 : real = check_1;
	var Demux1_2 : real = check_4;
	var Demux1_3 : real = check_7;
	var Demux2_1 : real = check_2;
	var Demux2_2 : real = check_5;
	var Demux2_3 : real = check_8;
	var Demux3_1 : real = check_3;
	var Demux3_2 : real = check_6;
	var Demux3_3 : real = check_9;
	var EB001_1 : bool = EB001_195_034(spec446_operator_1, __time_step, __nb_step);
	--guarantee "EB001_195_034" EB001_1;
	var EB002_1 : bool = EB002_199_034(spec529_operator_1, __time_step, __nb_step);
	--guarantee "EB002_199_034" EB002_1;
	var EB004_1 : bool = EB004_203_034((( ( ( kind2_times(kind2_times(1.0, Demux_1), Demux_1) ) + ( kind2_times(kind2_times(1.0, Demux_2), Demux_2) ) ) + ( kind2_times(kind2_times(1.0, Demux_3), Demux_3) ) ) < 0.00010), __time_step, __nb_step);
	guarantee "EB004_203_034" EB004_1;
	var Selector_1 : real = B_1;
	var Selector1_1 : real = B_4;
	var Selector10_1 : real = B_3;
	var Selector11_1 : real = B_6;
	var Selector12_1 : real = B_9;
	var Selector13_1 : real = B_12;
	var Selector14_1 : real = B_15;
	var Selector2_1 : real = B_7;
	var Selector3_1 : real = B_10;
	var Selector4_1 : real = B_13;
	var Selector5_1 : real = B_2;
	var Selector6_1 : real = B_5;
	var Selector7_1 : real = B_8;
	var Selector8_1 : real = B_11;
	var Selector9_1 : real = B_14;
	var abs_call_1 : real = abs_call_227_034(Demux2_3, __time_step, __nb_step);
	var abs_call1_1 : real = abs_call1_242_034(Demux3_1, __time_step, __nb_step);
	var abs_call11_1 : real = abs_call11_258_034(Demux3_2, __time_step, __nb_step);
	var abs_call111_1 : real = abs_call111_273_034(Demux1_1 - 1.0, __time_step, __nb_step);
	var abs_call1111_1 : real = abs_call1111_288_034(Demux1_2, __time_step, __nb_step);
	var abs_call11111_1 : real = abs_call11111_303_034(Demux1_3, __time_step, __nb_step);
	var abs_call111111_1 : real = abs_call111111_318_034(Demux2_1, __time_step, __nb_step);
	var abs_call1111111_1 : real = abs_call1111111_333_034(Demux2_2 - 1.0, __time_step, __nb_step);
	var abs_call11111111_1 : real = abs_call11111111_348_034(Demux3_3 - 1.0, __time_step, __nb_step);
	var abs_call111111111_1 : real = abs_call111111111_363_034(Demux1_1 - 1.0, __time_step, __nb_step);
	var abs_call1111111111_1 : real = abs_call1111111111_378_034(Demux1_2, __time_step, __nb_step);
	var abs_call11111111111_1 : real = abs_call11111111111_393_034(Demux1_3, __time_step, __nb_step);
	var abs_call111111111111_1 : real = abs_call111111111111_408_034(Demux2_1, __time_step, __nb_step);
	var abs_call1111111111111_1 : real = abs_call1111111111111_423_034(Demux2_2 - 1.0, __time_step, __nb_step);
	var abs_call11111111111111_1 : real = abs_call11111111111111_438_034(Demux2_3, __time_step, __nb_step);
	var abs_call111111111111111_1 : real = abs_call111111111111111_453_034(Demux3_1, __time_step, __nb_step);
	var abs_call1111111111111111_1 : real = abs_call1111111111111111_468_034(Demux3_2, __time_step, __nb_step);
	var abs_call11111111111111111_1 : real = abs_call11111111111111111_483_034(Demux3_3 - 1.0, __time_step, __nb_step);
	var det_3x3_call_1 : real = det_3x3_call_498_034(( ( ( ( kind2_times(kind2_times(1.0, Selector_1), Selector_1) ) + ( kind2_times(kind2_times(1.0, Selector1_1), Selector1_1) ) ) + ( kind2_times(kind2_times(1.0, Selector2_1), Selector2_1) ) ) + ( kind2_times(kind2_times(1.0, Selector3_1), Selector3_1) ) ) + ( kind2_times(kind2_times(1.0, Selector4_1), Selector4_1) ), B_B_T_1_2_operator_1, B_B_T_1_3_operator_1, B_B_T_1_2_operator_1, ( ( ( ( kind2_times(kind2_times(1.0, Selector5_1), Selector5_1) ) + ( kind2_times(kind2_times(1.0, Selector6_1), Selector6_1) ) ) + ( kind2_times(kind2_times(1.0, Selector7_1), Selector7_1) ) ) + ( kind2_times(kind2_times(1.0, Selector8_1), Selector8_1) ) ) + ( kind2_times(kind2_times(1.0, Selector9_1), Selector9_1) ), B_B_T_2_3_operator_1, B_B_T_1_3_operator_1, B_B_T_2_3_operator_1, ( ( ( ( kind2_times(kind2_times(1.0, Selector10_1), Selector10_1) ) + ( kind2_times(kind2_times(1.0, Selector11_1), Selector11_1) ) ) + ( kind2_times(kind2_times(1.0, Selector12_1), Selector12_1) ) ) + ( kind2_times(kind2_times(1.0, Selector13_1), Selector13_1) ) ) + ( kind2_times(kind2_times(1.0, Selector14_1), Selector14_1) ), __time_step, __nb_step);
	var spec446_operator_1 : bool = spec446_operator_3118_000((det_3x3_call_1 <= xxEBSpec_69_rhs_1), ( ( ( ( ( ( ( ( ( (bool_to_int(EBSpec_ridge_on_1) = bool_to_int(true)) ) and ( (abs_call111111111_1 < xxEBSpec_70_rhs_1) ) ) and ( (abs_call1111111111_1 < xxEBSpec_70_rhs_1) ) ) and ( (abs_call11111111111_1 < xxEBSpec_70_rhs_1) ) ) and ( (abs_call111111111111_1 < xxEBSpec_70_rhs_1) ) ) and ( (abs_call1111111111111_1 < xxEBSpec_70_rhs_1) ) ) and ( (abs_call11111111111111_1 < xxEBSpec_70_rhs_1) ) ) and ( (abs_call111111111111111_1 < xxEBSpec_70_rhs_1) ) ) and ( (abs_call1111111111111111_1 < xxEBSpec_70_rhs_1) ) ) and ( (abs_call11111111111111111_1 < xxEBSpec_70_rhs_1) ), __time_step, __nb_step);
	var spec529_operator_1 : bool = spec529_operator_3119_000((det_3x3_call_1 <= xxEBSpec_69_rhs_1), ( ( ( ( ( ( ( ( ( (bool_to_int(EBSpec_ridge_on_1) = bool_to_int(true)) ) and ( (abs_call111_1 < xxEBSpec_69_rhs_1) ) ) and ( (abs_call1111_1 < xxEBSpec_69_rhs_1) ) ) and ( (abs_call11111_1 < xxEBSpec_69_rhs_1) ) ) and ( (abs_call111111_1 < xxEBSpec_69_rhs_1) ) ) and ( (abs_call1111111_1 < xxEBSpec_69_rhs_1) ) ) and ( (abs_call_1 < xxEBSpec_69_rhs_1) ) ) and ( (abs_call1_1 < xxEBSpec_69_rhs_1) ) ) and ( (abs_call11_1 < xxEBSpec_69_rhs_1) ) ) and ( (abs_call11111111_1 < xxEBSpec_69_rhs_1) ), __time_step, __nb_step);
	var xxEBSpec_69_rhs_1 : real = 0.0000000000010;
	var xxEBSpec_70_rhs_1 : real = 0.0000010;
	assume "NB_STEP" (__nb_step = (0 -> ((pre (__nb_step)) + 1)));
	assume "TIME_STEP" (__time_step = (0.0 -> ((pre (__time_step)) + 0.010)));
tel

(*
Original block name: EB_12B_with_contracts_PP/EB
*)
node  EB_6_034(
	Wp_1 : real; Wp_2 : real; Wp_3 : real; Wp_4 : real; Wp_5 : real;
	Wp_6 : real; Wp_7 : real; Wp_8 : real; Wp_9 : real; Wp_10 : real;
	Wp_11 : real; Wp_12 : real; Wp_13 : real; Wp_14 : real; Wp_15 : real;
	Wp_16 : real; Wp_17 : real; Wp_18 : real; Wp_19 : real; Wp_20 : real;
	Wp_21 : real; Wp_22 : real; Wp_23 : real; Wp_24 : real; Wp_25 : real;
	B_1 : real; B_2 : real; B_3 : real; B_4 : real; B_5 : real;
	B_6 : real; B_7 : real; B_8 : real; B_9 : real; B_10 : real;
	B_11 : real; B_12 : real; B_13 : real; B_14 : real; B_15 : real;
	d_1 : real; d_2 : real; d_3 : real; up_1 : real; up_2 : real;
	up_3 : real; up_4 : real; up_5 : real; __time_step : real; __nb_step : int;)
returns(
	check_1 : real; check_2 : real; check_3 : real; check_4 : real; check_5 : real;
	check_6 : real; check_7 : real; check_8 : real; check_9 : real; yinv_1 : real;
	yinv_2 : real; yinv_3 : real; yinv_4 : real; yinv_5 : real; yinv_6 : real;
	yinv_7 : real; yinv_8 : real; yinv_9 : real; P_1 : real; P_2 : real;
	P_3 : real; P_4 : real; P_5 : real; P_6 : real; P_7 : real;
	P_8 : real; P_9 : real; P_10 : real; P_11 : real; P_12 : real;
	P_13 : real; P_14 : real; P_15 : real; u_1 : real; u_2 : real;
	u_3 : real; u_4 : real; u_5 : real; Buminusd_1 : real; Buminusd_2 : real;
	Buminusd_3 : real; J_1 : real; ridge_on_1 : bool;);
(*@contract
	import EB_12B_EBSpec_179_034(B_1, B_2, B_3, B_4, B_5, B_6, B_7, B_8, B_9, B_10, B_11, B_12, B_13, B_14, B_15, __time_step, __nb_step) returns (ridge_on_1, Buminusd_1, Buminusd_2, Buminusd_3, check_1, check_2, check_3, check_4, check_5, check_6, check_7, check_8, check_9);
*)
var 
	Divide_1 : real; Divide_2 : real; Divide_3 : real; Divide_4 : real; Divide_5 : real;
	Divide_6 : real; Divide_7 : real; Divide_8 : real; Divide_9 : real; Divide_10 : real;
	Divide_11 : real; Divide_12 : real; Divide_13 : real; Divide_14 : real; Divide_15 : real;
	Divide_16 : real; Divide_17 : real; Divide_18 : real; Divide_19 : real; Divide_20 : real;
	Divide_21 : real; Divide_22 : real; Divide_23 : real; Divide_24 : real; Divide_25 : real;
	Divide1_1 : real; Divide1_2 : real; Divide1_3 : real; Divide1_4 : real; Divide1_5 : real;
	Divide1_6 : real; Divide1_7 : real; Divide1_8 : real; Divide1_9 : real; Math_newline_Function1_1 : real;
	Math_newline_Function1_2 : real; Math_newline_Function1_3 : real; Math_newline_Function1_4 : real; Math_newline_Function1_5 : real; Math_newline_Function1_6 : real;
	Math_newline_Function1_7 : real; Math_newline_Function1_8 : real; Math_newline_Function1_9 : real; Math_newline_Function1_10 : real; Math_newline_Function1_11 : real;
	Math_newline_Function1_12 : real; Math_newline_Function1_13 : real; Math_newline_Function1_14 : real; Math_newline_Function1_15 : real; Product1_1 : real;
	Product1_2 : real; Product1_3 : real; Product1_4 : real; Product1_5 : real; Product1_6 : real;
	Product1_7 : real; Product1_8 : real; Product1_9 : real; Product2_1 : real; Product2_2 : real;
	Product2_3 : real; Product2_4 : real; Product2_5 : real; Product2_6 : real; Product2_7 : real;
	Product2_8 : real; Product2_9 : real; Product2_10 : real; Product2_11 : real; Product2_12 : real;
	Product2_13 : real; Product2_14 : real; Product2_15 : real; Product3_1 : real; Product3_2 : real;
	Product3_3 : real; Product3_4 : real; Product3_5 : real; Product5_1 : real; Product5_2 : real;
	Product5_3 : real; Product5_4 : real; Product5_5 : real; Product5_6 : real; Product5_7 : real;
	Product5_8 : real; Product5_9 : real; Product5_10 : real; Product5_11 : real; Product5_12 : real;
	Product5_13 : real; Product5_14 : real; Product5_15 : real; Sum1_1 : real; Sum1_2 : real;
	Sum1_3 : real; Sum1_4 : real; Sum1_5 : real; ridge_1 : real; ridge_2 : real;
	ridge_3 : real; ridge_4 : real; ridge_5 : real; ridge_6 : real; ridge_7 : real;
	ridge_8 : real; ridge_9 : real; ridge_10 : bool;
let
	(Divide_1, Divide_2, Divide_3, Divide_4, Divide_5, Divide_6, Divide_7, Divide_8, Divide_9, Divide_10, Divide_11, Divide_12, Divide_13, Divide_14, Divide_15, Divide_16, Divide_17, Divide_18, Divide_19, Divide_20, Divide_21, Divide_22, Divide_23, Divide_24, Divide_25) = _inv_M_5x5(Wp_1, Wp_6, Wp_11, Wp_16, Wp_21, Wp_2, Wp_7, Wp_12, Wp_17, Wp_22, Wp_3, Wp_8, Wp_13, Wp_18, Wp_23, Wp_4, Wp_9, Wp_14, Wp_19, Wp_24, Wp_5, Wp_10, Wp_15, Wp_20, Wp_25);
	(Divide1_1, Divide1_2, Divide1_3, Divide1_4, Divide1_5, Divide1_6, Divide1_7, Divide1_8, Divide1_9) = _inv_M_3x3(ridge_1, ridge_2, ridge_3, ridge_4, ridge_5, ridge_6, ridge_7, ridge_8, ridge_9);
	Math_newline_Function1_1 = B_1;
	Math_newline_Function1_2 = B_4;
	Math_newline_Function1_3 = B_7;
	Math_newline_Function1_4 = B_10;
	Math_newline_Function1_5 = B_13;
	Math_newline_Function1_6 = B_2;
	Math_newline_Function1_7 = B_5;
	Math_newline_Function1_8 = B_8;
	Math_newline_Function1_9 = B_11;
	Math_newline_Function1_10 = B_14;
	Math_newline_Function1_11 = B_3;
	Math_newline_Function1_12 = B_6;
	Math_newline_Function1_13 = B_9;
	Math_newline_Function1_14 = B_12;
	Math_newline_Function1_15 = B_15;
	Product1_1 = (kind2_times(B_1, Product5_1)) + (kind2_times(B_4, Product5_2)) + (kind2_times(B_7, Product5_3)) + (kind2_times(B_10, Product5_4)) + (kind2_times(B_13, Product5_5));
	Product1_4 = (kind2_times(B_1, Product5_6)) + (kind2_times(B_4, Product5_7)) + (kind2_times(B_7, Product5_8)) + (kind2_times(B_10, Product5_9)) + (kind2_times(B_13, Product5_10));
	Product1_7 = (kind2_times(B_1, Product5_11)) + (kind2_times(B_4, Product5_12)) + (kind2_times(B_7, Product5_13)) + (kind2_times(B_10, Product5_14)) + (kind2_times(B_13, Product5_15));
	Product1_2 = (kind2_times(B_2, Product5_1)) + (kind2_times(B_5, Product5_2)) + (kind2_times(B_8, Product5_3)) + (kind2_times(B_11, Product5_4)) + (kind2_times(B_14, Product5_5));
	Product1_5 = (kind2_times(B_2, Product5_6)) + (kind2_times(B_5, Product5_7)) + (kind2_times(B_8, Product5_8)) + (kind2_times(B_11, Product5_9)) + (kind2_times(B_14, Product5_10));
	Product1_8 = (kind2_times(B_2, Product5_11)) + (kind2_times(B_5, Product5_12)) + (kind2_times(B_8, Product5_13)) + (kind2_times(B_11, Product5_14)) + (kind2_times(B_14, Product5_15));
	Product1_3 = (kind2_times(B_3, Product5_1)) + (kind2_times(B_6, Product5_2)) + (kind2_times(B_9, Product5_3)) + (kind2_times(B_12, Product5_4)) + (kind2_times(B_15, Product5_5));
	Product1_6 = (kind2_times(B_3, Product5_6)) + (kind2_times(B_6, Product5_7)) + (kind2_times(B_9, Product5_8)) + (kind2_times(B_12, Product5_9)) + (kind2_times(B_15, Product5_10));
	Product1_9 = (kind2_times(B_3, Product5_11)) + (kind2_times(B_6, Product5_12)) + (kind2_times(B_9, Product5_13)) + (kind2_times(B_12, Product5_14)) + (kind2_times(B_15, Product5_15));
	Product2_1 = (kind2_times(Product5_1, Divide1_1)) + (kind2_times(Product5_6, Divide1_2)) + (kind2_times(Product5_11, Divide1_3));
	Product2_6 = (kind2_times(Product5_1, Divide1_4)) + (kind2_times(Product5_6, Divide1_5)) + (kind2_times(Product5_11, Divide1_6));
	Product2_11 = (kind2_times(Product5_1, Divide1_7)) + (kind2_times(Product5_6, Divide1_8)) + (kind2_times(Product5_11, Divide1_9));
	Product2_2 = (kind2_times(Product5_2, Divide1_1)) + (kind2_times(Product5_7, Divide1_2)) + (kind2_times(Product5_12, Divide1_3));
	Product2_7 = (kind2_times(Product5_2, Divide1_4)) + (kind2_times(Product5_7, Divide1_5)) + (kind2_times(Product5_12, Divide1_6));
	Product2_12 = (kind2_times(Product5_2, Divide1_7)) + (kind2_times(Product5_7, Divide1_8)) + (kind2_times(Product5_12, Divide1_9));
	Product2_3 = (kind2_times(Product5_3, Divide1_1)) + (kind2_times(Product5_8, Divide1_2)) + (kind2_times(Product5_13, Divide1_3));
	Product2_8 = (kind2_times(Product5_3, Divide1_4)) + (kind2_times(Product5_8, Divide1_5)) + (kind2_times(Product5_13, Divide1_6));
	Product2_13 = (kind2_times(Product5_3, Divide1_7)) + (kind2_times(Product5_8, Divide1_8)) + (kind2_times(Product5_13, Divide1_9));
	Product2_4 = (kind2_times(Product5_4, Divide1_1)) + (kind2_times(Product5_9, Divide1_2)) + (kind2_times(Product5_14, Divide1_3));
	Product2_9 = (kind2_times(Product5_4, Divide1_4)) + (kind2_times(Product5_9, Divide1_5)) + (kind2_times(Product5_14, Divide1_6));
	Product2_14 = (kind2_times(Product5_4, Divide1_7)) + (kind2_times(Product5_9, Divide1_8)) + (kind2_times(Product5_14, Divide1_9));
	Product2_5 = (kind2_times(Product5_5, Divide1_1)) + (kind2_times(Product5_10, Divide1_2)) + (kind2_times(Product5_15, Divide1_3));
	Product2_10 = (kind2_times(Product5_5, Divide1_4)) + (kind2_times(Product5_10, Divide1_5)) + (kind2_times(Product5_15, Divide1_6));
	Product2_15 = (kind2_times(Product5_5, Divide1_7)) + (kind2_times(Product5_10, Divide1_8)) + (kind2_times(Product5_15, Divide1_9));
	Product3_1 = (kind2_times(Product2_1, d_1)) + (kind2_times(Product2_6, d_2)) + (kind2_times(Product2_11, d_3));
	Product3_2 = (kind2_times(Product2_2, d_1)) + (kind2_times(Product2_7, d_2)) + (kind2_times(Product2_12, d_3));
	Product3_3 = (kind2_times(Product2_3, d_1)) + (kind2_times(Product2_8, d_2)) + (kind2_times(Product2_13, d_3));
	Product3_4 = (kind2_times(Product2_4, d_1)) + (kind2_times(Product2_9, d_2)) + (kind2_times(Product2_14, d_3));
	Product3_5 = (kind2_times(Product2_5, d_1)) + (kind2_times(Product2_10, d_2)) + (kind2_times(Product2_15, d_3));
	Product5_1 = (kind2_times(Divide_1, Math_newline_Function1_1)) + (kind2_times(Divide_6, Math_newline_Function1_2)) + (kind2_times(Divide_11, Math_newline_Function1_3)) + (kind2_times(Divide_16, Math_newline_Function1_4)) + (kind2_times(Divide_21, Math_newline_Function1_5));
	Product5_6 = (kind2_times(Divide_1, Math_newline_Function1_6)) + (kind2_times(Divide_6, Math_newline_Function1_7)) + (kind2_times(Divide_11, Math_newline_Function1_8)) + (kind2_times(Divide_16, Math_newline_Function1_9)) + (kind2_times(Divide_21, Math_newline_Function1_10));
	Product5_11 = (kind2_times(Divide_1, Math_newline_Function1_11)) + (kind2_times(Divide_6, Math_newline_Function1_12)) + (kind2_times(Divide_11, Math_newline_Function1_13)) + (kind2_times(Divide_16, Math_newline_Function1_14)) + (kind2_times(Divide_21, Math_newline_Function1_15));
	Product5_2 = (kind2_times(Divide_2, Math_newline_Function1_1)) + (kind2_times(Divide_7, Math_newline_Function1_2)) + (kind2_times(Divide_12, Math_newline_Function1_3)) + (kind2_times(Divide_17, Math_newline_Function1_4)) + (kind2_times(Divide_22, Math_newline_Function1_5));
	Product5_7 = (kind2_times(Divide_2, Math_newline_Function1_6)) + (kind2_times(Divide_7, Math_newline_Function1_7)) + (kind2_times(Divide_12, Math_newline_Function1_8)) + (kind2_times(Divide_17, Math_newline_Function1_9)) + (kind2_times(Divide_22, Math_newline_Function1_10));
	Product5_12 = (kind2_times(Divide_2, Math_newline_Function1_11)) + (kind2_times(Divide_7, Math_newline_Function1_12)) + (kind2_times(Divide_12, Math_newline_Function1_13)) + (kind2_times(Divide_17, Math_newline_Function1_14)) + (kind2_times(Divide_22, Math_newline_Function1_15));
	Product5_3 = (kind2_times(Divide_3, Math_newline_Function1_1)) + (kind2_times(Divide_8, Math_newline_Function1_2)) + (kind2_times(Divide_13, Math_newline_Function1_3)) + (kind2_times(Divide_18, Math_newline_Function1_4)) + (kind2_times(Divide_23, Math_newline_Function1_5));
	Product5_8 = (kind2_times(Divide_3, Math_newline_Function1_6)) + (kind2_times(Divide_8, Math_newline_Function1_7)) + (kind2_times(Divide_13, Math_newline_Function1_8)) + (kind2_times(Divide_18, Math_newline_Function1_9)) + (kind2_times(Divide_23, Math_newline_Function1_10));
	Product5_13 = (kind2_times(Divide_3, Math_newline_Function1_11)) + (kind2_times(Divide_8, Math_newline_Function1_12)) + (kind2_times(Divide_13, Math_newline_Function1_13)) + (kind2_times(Divide_18, Math_newline_Function1_14)) + (kind2_times(Divide_23, Math_newline_Function1_15));
	Product5_4 = (kind2_times(Divide_4, Math_newline_Function1_1)) + (kind2_times(Divide_9, Math_newline_Function1_2)) + (kind2_times(Divide_14, Math_newline_Function1_3)) + (kind2_times(Divide_19, Math_newline_Function1_4)) + (kind2_times(Divide_24, Math_newline_Function1_5));
	Product5_9 = (kind2_times(Divide_4, Math_newline_Function1_6)) + (kind2_times(Divide_9, Math_newline_Function1_7)) + (kind2_times(Divide_14, Math_newline_Function1_8)) + (kind2_times(Divide_19, Math_newline_Function1_9)) + (kind2_times(Divide_24, Math_newline_Function1_10));
	Product5_14 = (kind2_times(Divide_4, Math_newline_Function1_11)) + (kind2_times(Divide_9, Math_newline_Function1_12)) + (kind2_times(Divide_14, Math_newline_Function1_13)) + (kind2_times(Divide_19, Math_newline_Function1_14)) + (kind2_times(Divide_24, Math_newline_Function1_15));
	Product5_5 = (kind2_times(Divide_5, Math_newline_Function1_1)) + (kind2_times(Divide_10, Math_newline_Function1_2)) + (kind2_times(Divide_15, Math_newline_Function1_3)) + (kind2_times(Divide_20, Math_newline_Function1_4)) + (kind2_times(Divide_25, Math_newline_Function1_5));
	Product5_10 = (kind2_times(Divide_5, Math_newline_Function1_6)) + (kind2_times(Divide_10, Math_newline_Function1_7)) + (kind2_times(Divide_15, Math_newline_Function1_8)) + (kind2_times(Divide_20, Math_newline_Function1_9)) + (kind2_times(Divide_25, Math_newline_Function1_10));
	Product5_15 = (kind2_times(Divide_5, Math_newline_Function1_11)) + (kind2_times(Divide_10, Math_newline_Function1_12)) + (kind2_times(Divide_15, Math_newline_Function1_13)) + (kind2_times(Divide_20, Math_newline_Function1_14)) + (kind2_times(Divide_25, Math_newline_Function1_15));
	Sum1_1 = Product3_1 - up_1;
	Sum1_2 = Product3_2 - up_2;
	Sum1_3 = Product3_3 - up_3;
	Sum1_4 = Product3_4 - up_4;
	Sum1_5 = Product3_5 - up_5;
	(ridge_1, ridge_2, ridge_3, ridge_4, ridge_5, ridge_6, ridge_7, ridge_8, ridge_9, ridge_10) = ridge_33_034(Product1_1, Product1_2, Product1_3, Product1_4, Product1_5, Product1_6, Product1_7, Product1_8, Product1_9, __time_step, __nb_step);
	check_1 = ( (kind2_times(Product1_1, Divide1_1)) + (kind2_times(Product1_4, Divide1_2)) + (kind2_times(Product1_7, Divide1_3)) );
	check_2 = ( (kind2_times(Product1_2, Divide1_1)) + (kind2_times(Product1_5, Divide1_2)) + (kind2_times(Product1_8, Divide1_3)) );
	check_3 = ( (kind2_times(Product1_3, Divide1_1)) + (kind2_times(Product1_6, Divide1_2)) + (kind2_times(Product1_9, Divide1_3)) );
	check_4 = ( (kind2_times(Product1_1, Divide1_4)) + (kind2_times(Product1_4, Divide1_5)) + (kind2_times(Product1_7, Divide1_6)) );
	check_5 = ( (kind2_times(Product1_2, Divide1_4)) + (kind2_times(Product1_5, Divide1_5)) + (kind2_times(Product1_8, Divide1_6)) );
	check_6 = ( (kind2_times(Product1_3, Divide1_4)) + (kind2_times(Product1_6, Divide1_5)) + (kind2_times(Product1_9, Divide1_6)) );
	check_7 = ( (kind2_times(Product1_1, Divide1_7)) + (kind2_times(Product1_4, Divide1_8)) + (kind2_times(Product1_7, Divide1_9)) );
	check_8 = ( (kind2_times(Product1_2, Divide1_7)) + (kind2_times(Product1_5, Divide1_8)) + (kind2_times(Product1_8, Divide1_9)) );
	check_9 = ( (kind2_times(Product1_3, Divide1_7)) + (kind2_times(Product1_6, Divide1_8)) + (kind2_times(Product1_9, Divide1_9)) );
	yinv_1 = Divide1_1;
	yinv_2 = Divide1_2;
	yinv_3 = Divide1_3;
	yinv_4 = Divide1_4;
	yinv_5 = Divide1_5;
	yinv_6 = Divide1_6;
	yinv_7 = Divide1_7;
	yinv_8 = Divide1_8;
	yinv_9 = Divide1_9;
	P_1 = Product2_1;
	P_2 = Product2_2;
	P_3 = Product2_3;
	P_4 = Product2_4;
	P_5 = Product2_5;
	P_6 = Product2_6;
	P_7 = Product2_7;
	P_8 = Product2_8;
	P_9 = Product2_9;
	P_10 = Product2_10;
	P_11 = Product2_11;
	P_12 = Product2_12;
	P_13 = Product2_13;
	P_14 = Product2_14;
	P_15 = Product2_15;
	u_1 = Product3_1;
	u_2 = Product3_2;
	u_3 = Product3_3;
	u_4 = Product3_4;
	u_5 = Product3_5;
	Buminusd_1 = ( ( (kind2_times(B_1, Product3_1)) + (kind2_times(B_4, Product3_2)) + (kind2_times(B_7, Product3_3)) + (kind2_times(B_10, Product3_4)) + (kind2_times(B_13, Product3_5)) ) - d_1 );
	Buminusd_2 = ( ( (kind2_times(B_2, Product3_1)) + (kind2_times(B_5, Product3_2)) + (kind2_times(B_8, Product3_3)) + (kind2_times(B_11, Product3_4)) + (kind2_times(B_14, Product3_5)) ) - d_2 );
	Buminusd_3 = ( ( (kind2_times(B_3, Product3_1)) + (kind2_times(B_6, Product3_2)) + (kind2_times(B_9, Product3_3)) + (kind2_times(B_12, Product3_4)) + (kind2_times(B_15, Product3_5)) ) - d_3 );
	J_1 = ( (kind2_times(Sum1_1, ( (kind2_times(Wp_1, Sum1_1)) + (kind2_times(Wp_6, Sum1_2)) + (kind2_times(Wp_11, Sum1_3)) + (kind2_times(Wp_16, Sum1_4)) + (kind2_times(Wp_21, Sum1_5)) ))) + (kind2_times(Sum1_2, ( (kind2_times(Wp_2, Sum1_1)) + (kind2_times(Wp_7, Sum1_2)) + (kind2_times(Wp_12, Sum1_3)) + (kind2_times(Wp_17, Sum1_4)) + (kind2_times(Wp_22, Sum1_5)) ))) + (kind2_times(Sum1_3, ( (kind2_times(Wp_3, Sum1_1)) + (kind2_times(Wp_8, Sum1_2)) + (kind2_times(Wp_13, Sum1_3)) + (kind2_times(Wp_18, Sum1_4)) + (kind2_times(Wp_23, Sum1_5)) ))) + (kind2_times(Sum1_4, ( (kind2_times(Wp_4, Sum1_1)) + (kind2_times(Wp_9, Sum1_2)) + (kind2_times(Wp_14, Sum1_3)) + (kind2_times(Wp_19, Sum1_4)) + (kind2_times(Wp_24, Sum1_5)) ))) + (kind2_times(Sum1_5, ( (kind2_times(Wp_5, Sum1_1)) + (kind2_times(Wp_10, Sum1_2)) + (kind2_times(Wp_15, Sum1_3)) + (kind2_times(Wp_20, Sum1_4)) + (kind2_times(Wp_25, Sum1_5)) ))) );
	ridge_on_1 = ridge_10;
tel

(*
Original block name: EB_12B_with_contracts_PP
*)
node  EB_12B_with_contracts_PP(
	B_1 : real; B_2 : real; B_3 : real; B_4 : real; B_5 : real;
	B_6 : real; B_7 : real; B_8 : real; B_9 : real; B_10 : real;
	B_11 : real; B_12 : real; B_13 : real; B_14 : real; B_15 : real;)
returns(
	check_1 : real; check_2 : real; check_3 : real; check_4 : real; check_5 : real;
	check_6 : real; check_7 : real; check_8 : real; check_9 : real; yinv_1 : real;
	yinv_2 : real; yinv_3 : real; yinv_4 : real; yinv_5 : real; yinv_6 : real;
	yinv_7 : real; yinv_8 : real; yinv_9 : real; P_1 : real; P_2 : real;
	P_3 : real; P_4 : real; P_5 : real; P_6 : real; P_7 : real;
	P_8 : real; P_9 : real; P_10 : real; P_11 : real; P_12 : real;
	P_13 : real; P_14 : real; P_15 : real; u_1 : real; u_2 : real;
	u_3 : real; u_4 : real; u_5 : real; Buminusd_1 : real; Buminusd_2 : real;
	Buminusd_3 : real; J_1 : real; ridge_on_1 : bool;);
var 
	EB_1 : real; EB_2 : real; EB_3 : real; EB_4 : real; EB_5 : real;
	EB_6 : real; EB_7 : real; EB_8 : real; EB_9 : real; EB_10 : real;
	EB_11 : real; EB_12 : real; EB_13 : real; EB_14 : real; EB_15 : real;
	EB_16 : real; EB_17 : real; EB_18 : real; EB_19 : real; EB_20 : real;
	EB_21 : real; EB_22 : real; EB_23 : real; EB_24 : real; EB_25 : real;
	EB_26 : real; EB_27 : real; EB_28 : real; EB_29 : real; EB_30 : real;
	EB_31 : real; EB_32 : real; EB_33 : real; EB_34 : real; EB_35 : real;
	EB_36 : real; EB_37 : real; EB_38 : real; EB_39 : real; EB_40 : real;
	EB_41 : real; EB_42 : real; EB_43 : bool; __time_step : real; __nb_step : int;
let
	(EB_1, EB_2, EB_3, EB_4, EB_5, EB_6, EB_7, EB_8, EB_9, EB_10, EB_11, EB_12, EB_13, EB_14, EB_15, EB_16, EB_17, EB_18, EB_19, EB_20, EB_21, EB_22, EB_23, EB_24, EB_25, EB_26, EB_27, EB_28, EB_29, EB_30, EB_31, EB_32, EB_33, EB_34, EB_35, EB_36, EB_37, EB_38, EB_39, EB_40, EB_41, EB_42, EB_43) = EB_6_034(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, B_1, B_2, B_3, B_4, B_5, B_6, B_7, B_8, B_9, B_10, B_11, B_12, B_13, B_14, B_15, 3.0, -1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, __time_step, __nb_step);
	check_1 = EB_1;
	check_2 = EB_2;
	check_3 = EB_3;
	check_4 = EB_4;
	check_5 = EB_5;
	check_6 = EB_6;
	check_7 = EB_7;
	check_8 = EB_8;
	check_9 = EB_9;
	yinv_1 = EB_10;
	yinv_2 = EB_11;
	yinv_3 = EB_12;
	yinv_4 = EB_13;
	yinv_5 = EB_14;
	yinv_6 = EB_15;
	yinv_7 = EB_16;
	yinv_8 = EB_17;
	yinv_9 = EB_18;
	P_1 = EB_19;
	P_2 = EB_20;
	P_3 = EB_21;
	P_4 = EB_22;
	P_5 = EB_23;
	P_6 = EB_24;
	P_7 = EB_25;
	P_8 = EB_26;
	P_9 = EB_27;
	P_10 = EB_28;
	P_11 = EB_29;
	P_12 = EB_30;
	P_13 = EB_31;
	P_14 = EB_32;
	P_15 = EB_33;
	u_1 = EB_34;
	u_2 = EB_35;
	u_3 = EB_36;
	u_4 = EB_37;
	u_5 = EB_38;
	Buminusd_1 = EB_39;
	Buminusd_2 = EB_40;
	Buminusd_3 = EB_41;
	J_1 = EB_42;
	ridge_on_1 = EB_43;
	__time_step = (0.0 -> ((pre (__time_step)) + 0.010));
	__nb_step = (0 -> ((pre (__nb_step)) + 1));
tel

