--Historically
node H(X:bool) returns (Y:bool);
let
    Y = X -> (X and (pre Y));
tel

--Y since inclusive X
node SI(X,Y: bool) returns (Z:bool);
let
Z = Y and (X or (false -> pre Z));
tel

--Y since X
node S(X,Y: bool) returns (Z:bool);
let
Z = X or (Y and (false -> pre Z));
tel

--Once
node O(X:bool) returns (Y:bool);
let
 Y = X or (false -> pre Y);
tel

--Timed Once: less than or equal to N
node OTlore(const N: int; X: bool;) returns (Y: bool);
    var C:int;
let
    C = if X then 0
        else (-1 -> pre C + (if pre C <0 then 0 else 1));

    Y = 0 <= C and C <= N;
tel

--Timed Once: general case
node OT(const L: int; const R: int; X: bool;) returns (Y: bool);
var  D:bool;
let
  D=delay(X, R);
  Y=OTlore(L-R, D);
tel

-- Timed Historically: general case
node HT(const L: int; const R: int; X: bool;) returns (Y: bool);
let
  Y = not OT(L, R, not X);
tel

-- Timed Since: general case
node ST(const L: int; const R: int; X: bool; Y: bool;)  returns (Z: bool);
let
  Z = S(X, Y) and OT(L, R, X);
tel

-- Timed Since: general case
node SIT(const L: int; const R: int; X: bool; Y: bool;) returns (Z: bool);
let
  Z = SI(X, Y) and OT(L, R, X);
tel


node delay(X:bool; const R:int;) returns(Y:bool);
let

  Y = X;
 
tel



(*@contract FSMSpec (apfail:bool; limits:bool; standby:bool; supported:bool; ) returns (pullup: bool; );

let

var FTP: bool = true -> false;
var autopilot: bool = (not standby) and supported and (not apfail);
var htlore3_autopilot: bool = HT(3, 0, autopilot);
var htlore3_notpreprelimits: bool = HT(3, 0, not_pre_pre_limits);
var pre_autopilot: bool = false -> pre autopilot;
var pre_limits: bool = false -> pre limits;
var not_pre_pre_limits : bool = (false -> pre (false -> not  pre_limits));

(* Req text: FSM  shall  always  satisfy (limits & !standby & !apfail & supported) => pullup  *)
guarantee "FSM-001v1" (( limits and not standby and not apfail and supported ) => pullup);


(* Req text: if autopilot & pre_autopilot & pre_limits FSM shall immediately satisfy pullup  *)
guarantee "FSM-001v2" ((autopilot and pre_autopilot and pre_limits) and ((false -> pre ( not (autopilot and pre_autopilot and pre_limits))) or FTP)) => (pullup);


(* Req text: if  htlore3_autopilot  &  htlore3_notpreprelimits  &  pre_limits  FSM  shall  immediately satisfy pullup  *)
guarantee "FSM-001v3" ((htlore3_autopilot and htlore3_notpreprelimits and pre_limits) and ((false -> pre ( not (htlore3_autopilot and htlore3_notpreprelimits and pre_limits))) or FTP)) => (pullup);


tel
*)
