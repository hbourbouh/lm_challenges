--Historically
node H(X:bool) returns (Y:bool);
let
    Y = X -> (X and (pre Y));
tel

--Y since inclusive X
node SI(X,Y: bool) returns (Z:bool);
let
Z = Y and (X or (false -> pre Z));
tel

--Y since X
node S(X,Y: bool) returns (Z:bool);
let
Z = X or (Y and (false -> pre Z));
tel

--Once
node O(X:bool) returns (Y:bool);
let
 Y = X or (false -> pre Y);
tel

--Timed Once: less than or equal to N
node OTlore(const N: int; X: bool;) returns (Y: bool);
    var C:int;
let
    C = if X then 0
        else (-1 -> pre C + (if pre C <0 then 0 else 1));

    Y = 0 <= C and C <= N;
tel

--Timed Once: general case
node OT(const L: int; const R: int; X: bool;) returns (Y: bool);
var  D:bool;
let
  D=delay(X, R);
  Y=OTlore(L-R, D);
tel

-- Timed Historically: general case
node HT(const L: int; const R: int; X: bool;) returns (Y: bool);
let
  Y = not OT(L, R, not X);
tel

-- Timed Since: general case
node ST(const L: int; const R: int; X: bool; Y: bool;)  returns (Z: bool);
let
  Z = S(X, Y) and OT(L, R, X);
tel

-- Timed Since: general case
node SIT(const L: int; const R: int; X: bool; Y: bool;) returns (Z: bool);
let
  Z = SI(X, Y) and OT(L, R, X);
tel


node delay(X:bool; const R:int;) returns(Y:bool);
let

  Y = X;
 
tel



(*@contract FSM_SensorSpec (MODE:bool; limits:bool; request:bool; senstate:real; ) returns (SENSTATE: real; );

let
var FTP: bool = true -> false;

var sen_fault_state: real = 2.0;
var sen_nominal_state: real = 0.0;
var sen_transition_state: real = 1.0;




(* Req text: FSM_Sensor shall always  satisfy (senstate = sen_nominal_state & !request) => SENSTATE = sen_transition_state  *)
guarantee "FSM-011v1" ( senstate = sen_nominal_state and not request ) => SENSTATE = sen_transition_state;


(* Req text: FSM_Sensor shall  always  satisfy (senstate = sen_fault_state & !request & !limits) => SENSTATE = sen_transition_state  *)
guarantee "FSM-012" ( senstate = sen_fault_state and not request and not limits ) => SENSTATE = sen_transition_state;


(* Req text: FSM_Sensor shall always satisfy (senstate = sen_nominal_state & limits) => SENSTATE = sen_fault_state  *)
guarantee "FSM-010" ( senstate = sen_nominal_state and limits ) => SENSTATE = sen_fault_state;


(* Req text: FSM_Sensor shall always satisfy (senstate = sen_transition_state & request & MODE) => SENSTATE = sen_nominal_state  *)
guarantee "FSM-013" ( senstate = sen_transition_state and request and MODE ) => SENSTATE = sen_nominal_state;


(* Req text: FSM_Sensor shall always satisfy (senstate = sen_nominal_state & !request & !limits) => SENSTATE = sen_transition_state  *)
guarantee "FSM-011v2" ( senstate = sen_nominal_state and not request and not limits ) => SENSTATE = sen_transition_state;


tel
*)
