-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 31-Oct-2019 16:41:28
node  abs_int(
	x : int;)
returns(
	y : int;);
let
	y = if (x >= 0) then
		x
	    else (- (x));
tel

node  rem_int_int(
	x : int; y : int;)
returns(
	z : int;);
let
	z = if ((y = 0) or (x = 0)) then
		0
	    else ((x mod y) - (if (((x mod y) <> 0) and (x <= 0)) then abs_int(y) else 0));
tel

node  int_to_int32(
	x : int;)
returns(
	y : int;);
let
	y = if (x > 2147483647) then
		((- (2147483648)) + rem_int_int(x - 2147483647 - 1, 4294967296))
	    else if (x < (- (2147483648))) then
		(2147483647 + rem_int_int(x + 2147483648 + 1, 4294967296))
	    else x;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_AutopilotSpec1/FSM002
*)
node  FSM002_413_117(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_AutopilotSpec1/FSM003
*)
node  FSM003_421_118(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_AutopilotSpec1/FSM003v2
*)
node  FSM003v2_425_118(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_AutopilotSpec1/FSM004
*)
node  FSM004_449_116(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_AutopilotSpec1/FSM004v2
*)
node  FSM004v2_437_120(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_AutopilotSpec1/FSM005
*)
node  FSM005_417_116(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_AutopilotSpec1/FSM006
*)
node  FSM006_457_117(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_AutopilotSpec1/FSM007
*)
node  FSM007_445_117(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_AutopilotSpec1/FSM007v2
*)
node  FSM007v2_453_116(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_AutopilotSpec1/FSM008v1
*)
node  FSM008v1_429_116(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_AutopilotSpec1/FSM008v2
*)
node  FSM008v2_441_117(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_AutopilotSpec1/FSM009
*)
node  FSM009_433_116(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_AutopilotSpec1/spec129_operator
*)
node  spec129_operator_461_118(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_AutopilotSpec1/spec143_operator
*)
node  spec143_operator_471_116(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_AutopilotSpec1/spec160_operator
*)
node  spec160_operator_481_117(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_AutopilotSpec1/spec182_operator
*)
node  spec182_operator_491_117(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_AutopilotSpec1/spec198_operator
*)
node  spec198_operator_501_116(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_AutopilotSpec1/spec212_operator
*)
node  spec212_operator_511_116(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_AutopilotSpec1/spec233_operator
*)
node  spec233_operator_521_114(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_AutopilotSpec1/spec254_operator
*)
node  spec254_operator_531_114(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_AutopilotSpec1/spec271_operator
*)
node  spec271_operator_541_113(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_AutopilotSpec1/spec287_operator
*)
node  spec287_operator_551_114(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_AutopilotSpec1/spec309_operator
*)
node  spec309_operator_561_114(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_AutopilotSpec1/spec326_operator
*)
node  spec326_operator_571_115(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_SensorSpec/FSM010
*)
node  FSM010_1456_014(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_SensorSpec/FSM011v1
*)
node  FSM011v1_1460_014(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_SensorSpec/FSM011v2
*)
node  FSM011v2_1477_014(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_SensorSpec/FSM012
*)
node  FSM012_1481_014(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_SensorSpec/FSM013
*)
node  FSM013_1489_014(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_SensorSpec/spec130_operator
*)
node  spec130_operator_1493_014(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_SensorSpec/spec151_operator
*)
node  spec151_operator_1494_014(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_SensorSpec/spec165_operator
*)
node  spec165_operator_1495_014(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_SensorSpec/spec182_operator
*)
node  spec182_operator_1496_014(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_SensorSpec/spec203_operator
*)
node  spec203_operator_1498_014(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/Manager/Actions/Maneuver
*)
node  Maneuver_1934_005(
	state_1 : real; good_1 : bool; supported_1 : bool; standby_1 : bool; apfail_1 : bool;
	__time_step : real; __nb_step : int;)
returns(
	NextState_1 : real;);
var 
	Switch1_1 : real; Switch2_1 : real;
let
	Switch1_1 = if ( supported_1 and good_1 ) then
		0.0
	    else state_1;
	Switch2_1 = if ( standby_1 and good_1 ) then
		3.0
	    else Switch1_1;
	NextState_1 = Switch2_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/Manager/Actions/Maneuver
*)
node  Maneuver_1934_005_condExecSS(
	state_1 : real; good_1 : bool; supported_1 : bool; standby_1 : bool; apfail_1 : bool;
	_isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	NextState_1 : real;);
var 
	pre_NextState_1 : real;
let
	pre_NextState_1 = if (__nb_step > 0) then
		(pre (NextState_1))
	    else 0.0;
	NextState_1 = merge(_isEnabled;
		 (activate Maneuver_1934_005 every _isEnabled)(state_1, good_1, supported_1, standby_1, apfail_1, __time_step, __nb_step); 
		pre_NextState_1 when not(_isEnabled));
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/Manager/Actions/Nominal
*)
node  Nominal_2036_005(
	state_1 : real; good_1 : bool; standby_1 : bool; __time_step : real; __nb_step : int;)
returns(
	NextState_1 : real;);
var 
	Switch1_1 : real; Switch2_1 : real;
let
	Switch1_1 = if ( (not (good_1)) ) then
		2.0
	    else state_1;
	Switch2_1 = if standby_1 then
		3.0
	    else Switch1_1;
	NextState_1 = Switch2_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/Manager/Actions/Nominal
*)
node  Nominal_2036_005_condExecSS(
	state_1 : real; good_1 : bool; standby_1 : bool; _isEnabled : bool; __time_step : real;
	__nb_step : int;)
returns(
	NextState_1 : real;);
var 
	pre_NextState_1 : real;
let
	pre_NextState_1 = if (__nb_step > 0) then
		(pre (NextState_1))
	    else 0.0;
	NextState_1 = merge(_isEnabled;
		 (activate Nominal_2036_005 every _isEnabled)(state_1, good_1, standby_1, __time_step, __nb_step); 
		pre_NextState_1 when not(_isEnabled));
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/Manager/Actions/Standby
*)
node  Standby_2101_005(
	state_1 : real; stby_1 : bool; apfail_1 : bool; __time_step : real; __nb_step : int;)
returns(
	NextState_1 : real;);
var 
	Switch1_1 : real; Switch2_1 : real;
let
	Switch1_1 = if ( (not (stby_1)) ) then
		0.0
	    else state_1;
	Switch2_1 = if apfail_1 then
		2.0
	    else Switch1_1;
	NextState_1 = Switch2_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/Manager/Actions/Standby
*)
node  Standby_2101_005_condExecSS(
	state_1 : real; stby_1 : bool; apfail_1 : bool; _isEnabled : bool; __time_step : real;
	__nb_step : int;)
returns(
	NextState_1 : real;);
var 
	pre_NextState_1 : real;
let
	pre_NextState_1 = if (__nb_step > 0) then
		(pre (NextState_1))
	    else 0.0;
	NextState_1 = merge(_isEnabled;
		 (activate Standby_2101_005 every _isEnabled)(state_1, stby_1, apfail_1, __time_step, __nb_step); 
		pre_NextState_1 when not(_isEnabled));
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/Manager/Actions/Transition
*)
node  Transition_2141_005(
	state_1 : real; good_1 : bool; supported_1 : bool; standby_1 : bool; __time_step : real;
	__nb_step : int;)
returns(
	NextState_1 : real;);
var 
	Switch1_1 : real; Switch2_1 : real;
let
	Switch1_1 = if ( supported_1 and good_1 ) then
		1.0
	    else state_1;
	Switch2_1 = if standby_1 then
		3.0
	    else Switch1_1;
	NextState_1 = Switch2_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/Manager/Actions/Transition
*)
node  Transition_2141_005_condExecSS(
	state_1 : real; good_1 : bool; supported_1 : bool; standby_1 : bool; _isEnabled : bool;
	__time_step : real; __nb_step : int;)
returns(
	NextState_1 : real;);
var 
	pre_NextState_1 : real;
let
	pre_NextState_1 = if (__nb_step > 0) then
		(pre (NextState_1))
	    else 0.0;
	NextState_1 = merge(_isEnabled;
		 (activate Transition_2141_005 every _isEnabled)(state_1, good_1, supported_1, standby_1, __time_step, __nb_step); 
		pre_NextState_1 when not(_isEnabled));
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/Manager/Actions
*)
node  Actions_1694_005(
	standby_1 : bool; apfail_1 : bool; supported_1 : bool; good_1 : bool; state_1 : real;
	__time_step : real; __nb_step : int;)
returns(
	STATE_1 : real;);
var 
	If_1 : bool; If_2 : bool; If_3 : bool; If_4 : bool; ExecutionCond_of_Maneuver_1934_005 : bool;
	Maneuver_1 : real; Merge_1 : real; ExecutionCond_of_Nominal_2036_005 : bool; Nominal_1 : real; ExecutionCond_of_Standby_2101_005 : bool;
	Standby_1 : real; ExecutionCond_of_Transition_2141_005 : bool; Transition_1 : real;
let
	(If_1, If_2, If_3, If_4) = if state_1 = 0.0 then
		(true, false, false, false)
	    else if state_1 = 1.0 then
		(false, true, false, false)
	    else if state_1 = 2.0 then
		(false, false, true, false)
	    else if state_1 = 3.0 then
		(false, false, false, true)
	    else (false, false, false, false);
	ExecutionCond_of_Maneuver_1934_005 = If_3;
	Maneuver_1 = Maneuver_1934_005_condExecSS(state_1, good_1, supported_1, standby_1, apfail_1, ExecutionCond_of_Maneuver_1934_005, __time_step, __nb_step);
	Merge_1 = if ExecutionCond_of_Transition_2141_005 then
		Transition_1
	    else if ExecutionCond_of_Nominal_2036_005 then
		Nominal_1
	    else if ExecutionCond_of_Maneuver_1934_005 then
		Maneuver_1
	    else if ExecutionCond_of_Standby_2101_005 then
		Standby_1
	    else (0.0 -> (pre (Merge_1)));
	ExecutionCond_of_Nominal_2036_005 = If_2;
	Nominal_1 = Nominal_2036_005_condExecSS(state_1, good_1, standby_1, ExecutionCond_of_Nominal_2036_005, __time_step, __nb_step);
	ExecutionCond_of_Standby_2101_005 = If_4;
	Standby_1 = Standby_2101_005_condExecSS(state_1, standby_1, apfail_1, ExecutionCond_of_Standby_2101_005, __time_step, __nb_step);
	ExecutionCond_of_Transition_2141_005 = If_1;
	Transition_1 = Transition_2141_005_condExecSS(state_1, good_1, supported_1, standby_1, ExecutionCond_of_Transition_2141_005, __time_step, __nb_step);
	STATE_1 = Merge_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/Manager/Output/Maneuver
*)
node  Maneuver_2242_005(
	__time_step : real; __nb_step : int;)
returns(
	Output_1 : bool; Output_2 : bool; Output_3 : bool;);
let
	Output_1 = true;
	Output_2 = false;
	Output_3 = true;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/Manager/Output/Maneuver
*)
node  Maneuver_2242_005_condExecSS(
	_isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Output_1 : bool; Output_2 : bool; Output_3 : bool;);
var 
	pre_Output_1 : bool; pre_Output_2 : bool; pre_Output_3 : bool;
let
	pre_Output_1 = if (__nb_step > 0) then
		(pre (Output_1))
	    else false;
	pre_Output_2 = if (__nb_step > 0) then
		(pre (Output_2))
	    else false;
	pre_Output_3 = if (__nb_step > 0) then
		(pre (Output_3))
	    else false;
	(Output_1, Output_2, Output_3) = merge(_isEnabled;
		 (activate Maneuver_2242_005 every _isEnabled)(__time_step, __nb_step); 
		(pre_Output_1, pre_Output_2, pre_Output_3) when not(_isEnabled));
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/Manager/Output/Nominal
*)
node  Nominal_2265_005(
	__time_step : real; __nb_step : int;)
returns(
	Output_1 : bool; Output_2 : bool; Output_3 : bool;);
let
	Output_1 = true;
	Output_2 = true;
	Output_3 = false;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/Manager/Output/Nominal
*)
node  Nominal_2265_005_condExecSS(
	_isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Output_1 : bool; Output_2 : bool; Output_3 : bool;);
var 
	pre_Output_1 : bool; pre_Output_2 : bool; pre_Output_3 : bool;
let
	pre_Output_1 = if (__nb_step > 0) then
		(pre (Output_1))
	    else false;
	pre_Output_2 = if (__nb_step > 0) then
		(pre (Output_2))
	    else false;
	pre_Output_3 = if (__nb_step > 0) then
		(pre (Output_3))
	    else false;
	(Output_1, Output_2, Output_3) = merge(_isEnabled;
		 (activate Nominal_2265_005 every _isEnabled)(__time_step, __nb_step); 
		(pre_Output_1, pre_Output_2, pre_Output_3) when not(_isEnabled));
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/Manager/Output/Standby
*)
node  Standby_2280_005(
	__time_step : real; __nb_step : int;)
returns(
	Output_1 : bool; Output_2 : bool; Output_3 : bool;);
let
	Output_1 = true;
	Output_2 = false;
	Output_3 = false;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/Manager/Output/Standby
*)
node  Standby_2280_005_condExecSS(
	_isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Output_1 : bool; Output_2 : bool; Output_3 : bool;);
var 
	pre_Output_1 : bool; pre_Output_2 : bool; pre_Output_3 : bool;
let
	pre_Output_1 = if (__nb_step > 0) then
		(pre (Output_1))
	    else false;
	pre_Output_2 = if (__nb_step > 0) then
		(pre (Output_2))
	    else false;
	pre_Output_3 = if (__nb_step > 0) then
		(pre (Output_3))
	    else false;
	(Output_1, Output_2, Output_3) = merge(_isEnabled;
		 (activate Standby_2280_005 every _isEnabled)(__time_step, __nb_step); 
		(pre_Output_1, pre_Output_2, pre_Output_3) when not(_isEnabled));
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/Manager/Output/Transition
*)
node  Transition_2296_005(
	__time_step : real; __nb_step : int;)
returns(
	Output_1 : bool; Output_2 : bool; Output_3 : bool;);
let
	Output_1 = false;
	Output_2 = true;
	Output_3 = false;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/Manager/Output/Transition
*)
node  Transition_2296_005_condExecSS(
	_isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Output_1 : bool; Output_2 : bool; Output_3 : bool;);
var 
	pre_Output_1 : bool; pre_Output_2 : bool; pre_Output_3 : bool;
let
	pre_Output_1 = if (__nb_step > 0) then
		(pre (Output_1))
	    else false;
	pre_Output_2 = if (__nb_step > 0) then
		(pre (Output_2))
	    else false;
	pre_Output_3 = if (__nb_step > 0) then
		(pre (Output_3))
	    else false;
	(Output_1, Output_2, Output_3) = merge(_isEnabled;
		 (activate Transition_2296_005 every _isEnabled)(__time_step, __nb_step); 
		(pre_Output_1, pre_Output_2, pre_Output_3) when not(_isEnabled));
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/Manager/Output
*)
node  Output_2237_005(
	Newstate_1 : real; __time_step : real; __nb_step : int;)
returns(
	MODE_1 : bool; REQUEST_1 : bool; PULL_1 : bool;);
var 
	If_1 : bool; If_2 : bool; If_3 : bool; If_4 : bool; ExecutionCond_of_Maneuver_2242_005 : bool;
	Maneuver_1 : bool; Maneuver_2 : bool; Maneuver_3 : bool; Merge_1 : bool; Merge_2 : bool;
	Merge_3 : bool; ExecutionCond_of_Nominal_2265_005 : bool; Nominal_1 : bool; Nominal_2 : bool; Nominal_3 : bool;
	ExecutionCond_of_Standby_2280_005 : bool; Standby_1 : bool; Standby_2 : bool; Standby_3 : bool; ExecutionCond_of_Transition_2296_005 : bool;
	Transition_1 : bool; Transition_2 : bool; Transition_3 : bool;
let
	(If_1, If_2, If_3, If_4) = if Newstate_1 = 0.0 then
		(true, false, false, false)
	    else if Newstate_1 = 1.0 then
		(false, true, false, false)
	    else if Newstate_1 = 2.0 then
		(false, false, true, false)
	    else if Newstate_1 = 3.0 then
		(false, false, false, true)
	    else (false, false, false, false);
	ExecutionCond_of_Maneuver_2242_005 = If_3;
	(Maneuver_1, Maneuver_2, Maneuver_3) = Maneuver_2242_005_condExecSS(ExecutionCond_of_Maneuver_2242_005, __time_step, __nb_step);
	Merge_1 = if ExecutionCond_of_Transition_2296_005 then
		Transition_1
	    else if ExecutionCond_of_Nominal_2265_005 then
		Nominal_1
	    else if ExecutionCond_of_Maneuver_2242_005 then
		Maneuver_1
	    else if ExecutionCond_of_Standby_2280_005 then
		Standby_1
	    else (false -> (pre (Merge_1)));
	Merge_2 = if ExecutionCond_of_Transition_2296_005 then
		Transition_2
	    else if ExecutionCond_of_Nominal_2265_005 then
		Nominal_2
	    else if ExecutionCond_of_Maneuver_2242_005 then
		Maneuver_2
	    else if ExecutionCond_of_Standby_2280_005 then
		Standby_2
	    else (false -> (pre (Merge_2)));
	Merge_3 = if ExecutionCond_of_Transition_2296_005 then
		Transition_3
	    else if ExecutionCond_of_Nominal_2265_005 then
		Nominal_3
	    else if ExecutionCond_of_Maneuver_2242_005 then
		Maneuver_3
	    else if ExecutionCond_of_Standby_2280_005 then
		Standby_3
	    else (false -> (pre (Merge_3)));
	ExecutionCond_of_Nominal_2265_005 = If_2;
	(Nominal_1, Nominal_2, Nominal_3) = Nominal_2265_005_condExecSS(ExecutionCond_of_Nominal_2265_005, __time_step, __nb_step);
	ExecutionCond_of_Standby_2280_005 = If_4;
	(Standby_1, Standby_2, Standby_3) = Standby_2280_005_condExecSS(ExecutionCond_of_Standby_2280_005, __time_step, __nb_step);
	ExecutionCond_of_Transition_2296_005 = If_1;
	(Transition_1, Transition_2, Transition_3) = Transition_2296_005_condExecSS(ExecutionCond_of_Transition_2296_005, __time_step, __nb_step);
	MODE_1 = Merge_1;
	REQUEST_1 = Merge_2;
	PULL_1 = Merge_3;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_AutopilotSpec1
*)
contract FiniteStateMachine_FSM_AutopilotSpec1_403_116(
	FSM_AutopilotSpec_apfail_1 : bool; FSM_AutopilotSpec_good_1 : bool; FSM_AutopilotSpec_standby_1 : bool; FSM_AutopilotSpec_state_1 : real; FSM_AutopilotSpec_supported_1 : bool;
	__time_step : real; __nb_step : int;)
returns(
	FSM_AutopilotSpec_STATE_1 : real;);
let
	var FSM002_1 : bool = FSM002_413_117(spec129_operator_1, __time_step, __nb_step);
	guarantee "FSM002_413_117" FSM002_1;
	var FSM003_1 : bool = FSM003_421_118(spec160_operator_1, __time_step, __nb_step);
	guarantee "FSM003_421_118" FSM003_1;
	var FSM003v2_1 : bool = FSM003v2_425_118(spec182_operator_1, __time_step, __nb_step);
	guarantee "FSM003v2_425_118" FSM003v2_1;
	var FSM004_1 : bool = FSM004_449_116(spec287_operator_1, __time_step, __nb_step);
	guarantee "FSM004_449_116" FSM004_1;
	var FSM004v2_1 : bool = FSM004v2_437_120(spec233_operator_1, __time_step, __nb_step);
	guarantee "FSM004v2_437_120" FSM004v2_1;
	var FSM005_1 : bool = FSM005_417_116(spec143_operator_1, __time_step, __nb_step);
	guarantee "FSM005_417_116" FSM005_1;
	var FSM006_1 : bool = FSM006_457_117(spec326_operator_1, __time_step, __nb_step);
	guarantee "FSM006_457_117" FSM006_1;
	var FSM007_1 : bool = FSM007_445_117(spec271_operator_1, __time_step, __nb_step);
	guarantee "FSM007_445_117" FSM007_1;
	var FSM007v2_1 : bool = FSM007v2_453_116(spec309_operator_1, __time_step, __nb_step);
	guarantee "FSM007v2_453_116" FSM007v2_1;
	var FSM008v1_1 : bool = FSM008v1_429_116(spec198_operator_1, __time_step, __nb_step);
	guarantee "FSM008v1_429_116" FSM008v1_1;
	var FSM008v2_1 : bool = FSM008v2_441_117(spec254_operator_1, __time_step, __nb_step);
	guarantee "FSM008v2_441_117" FSM008v2_1;
	var FSM009_1 : bool = FSM009_433_116(spec212_operator_1, __time_step, __nb_step);
	guarantee "FSM009_433_116" FSM009_1;
	var branch_6_IF_1 : bool = if ( (true -> (pre (false))) ) then
		true
	    else false;
	var spec129_operator_1 : bool = spec129_operator_461_118(FSM_AutopilotSpec_standby_1 and ( (FSM_AutopilotSpec_state_1 = xxFSM_AutopilotSpec_59_rhs_1) ), (FSM_AutopilotSpec_STATE_1 = xxFSM_AutopilotSpec_58_rhs_1), __time_step, __nb_step);
	var spec143_operator_1 : bool = spec143_operator_471_116(( (FSM_AutopilotSpec_state_1 = xxFSM_AutopilotSpec_57_rhs_1) ) and FSM_AutopilotSpec_standby_1, (FSM_AutopilotSpec_STATE_1 = xxFSM_AutopilotSpec_58_rhs_1), __time_step, __nb_step);
	var spec160_operator_1 : bool = spec160_operator_481_117(( ( (FSM_AutopilotSpec_state_1 = xxFSM_AutopilotSpec_59_rhs_1) ) and FSM_AutopilotSpec_good_1 ) and FSM_AutopilotSpec_supported_1, (FSM_AutopilotSpec_STATE_1 = xxFSM_AutopilotSpec_57_rhs_1), __time_step, __nb_step);
	var spec182_operator_1 : bool = spec182_operator_491_117(( ( ( (FSM_AutopilotSpec_state_1 = xxFSM_AutopilotSpec_59_rhs_1) ) and FSM_AutopilotSpec_good_1 ) and FSM_AutopilotSpec_supported_1 ) and ( (not (FSM_AutopilotSpec_standby_1)) ), (FSM_AutopilotSpec_STATE_1 = xxFSM_AutopilotSpec_57_rhs_1), __time_step, __nb_step);
	var spec198_operator_1 : bool = spec198_operator_501_116(( (FSM_AutopilotSpec_state_1 = xxFSM_AutopilotSpec_58_rhs_1) ) and ( (not (FSM_AutopilotSpec_standby_1)) ), (FSM_AutopilotSpec_STATE_1 = xxFSM_AutopilotSpec_59_rhs_1), __time_step, __nb_step);
	var spec212_operator_1 : bool = spec212_operator_511_116(( (FSM_AutopilotSpec_state_1 = xxFSM_AutopilotSpec_58_rhs_1) ) and FSM_AutopilotSpec_apfail_1, (FSM_AutopilotSpec_STATE_1 = xxFSM_AutopilotSpec_56_rhs_1), __time_step, __nb_step);
	var spec233_operator_1 : bool = spec233_operator_521_114(( ( (FSM_AutopilotSpec_state_1 = xxFSM_AutopilotSpec_57_rhs_1) ) and ( (not (FSM_AutopilotSpec_good_1)) ) ) and ( (not (FSM_AutopilotSpec_standby_1)) ), (FSM_AutopilotSpec_STATE_1 = xxFSM_AutopilotSpec_56_rhs_1), __time_step, __nb_step);
	var spec254_operator_1 : bool = spec254_operator_531_114(( ( (FSM_AutopilotSpec_state_1 = xxFSM_AutopilotSpec_58_rhs_1) ) and ( (not (FSM_AutopilotSpec_standby_1)) ) ) and ( (not (FSM_AutopilotSpec_apfail_1)) ), (FSM_AutopilotSpec_STATE_1 = xxFSM_AutopilotSpec_59_rhs_1), __time_step, __nb_step);
	var spec271_operator_1 : bool = spec271_operator_541_113(( ( (FSM_AutopilotSpec_state_1 = xxFSM_AutopilotSpec_56_rhs_1) ) and FSM_AutopilotSpec_supported_1 ) and FSM_AutopilotSpec_good_1, (FSM_AutopilotSpec_STATE_1 = xxFSM_AutopilotSpec_59_rhs_1), __time_step, __nb_step);
	var spec287_operator_1 : bool = spec287_operator_551_114(( (not (FSM_AutopilotSpec_good_1)) ) and ( (FSM_AutopilotSpec_state_1 = xxFSM_AutopilotSpec_57_rhs_1) ), (FSM_AutopilotSpec_STATE_1 = xxFSM_AutopilotSpec_56_rhs_1), __time_step, __nb_step);
	var spec309_operator_1 : bool = spec309_operator_561_114(( ( ( (FSM_AutopilotSpec_state_1 = xxFSM_AutopilotSpec_56_rhs_1) ) and FSM_AutopilotSpec_supported_1 ) and FSM_AutopilotSpec_good_1 ) and ( (not (FSM_AutopilotSpec_standby_1)) ), (FSM_AutopilotSpec_STATE_1 = xxFSM_AutopilotSpec_59_rhs_1), __time_step, __nb_step);
	var spec326_operator_1 : bool = spec326_operator_571_115(( ( (FSM_AutopilotSpec_state_1 = xxFSM_AutopilotSpec_56_rhs_1) ) and FSM_AutopilotSpec_standby_1 ) and FSM_AutopilotSpec_good_1, (FSM_AutopilotSpec_STATE_1 = xxFSM_AutopilotSpec_58_rhs_1), __time_step, __nb_step);
	var xxFSM_AutopilotSpec_56_rhs_1 : real = 2.0;
	var xxFSM_AutopilotSpec_57_rhs_1 : real = 1.0;
	var xxFSM_AutopilotSpec_58_rhs_1 : real = 3.0;
	var xxFSM_AutopilotSpec_59_rhs_1 : real = 0.0;
	assume "NB_STEP" (__nb_step = (0 -> ((pre (__nb_step)) + 1)));
	assume "TIME_STEP" (__time_step = (0.0 -> ((pre (__time_step)) + 0.20)));
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/Manager
*)
node  Manager_1687_005(
	standby_1 : bool; apfail_1 : bool; supported_1 : bool; good_1 : bool; state_1 : real;
	__time_step : real; __nb_step : int;)
returns(
	MODE_1 : bool; REQUEST_1 : bool; PULL_1 : bool; STATE_1 : real;);
(*@contract
	import FiniteStateMachine_FSM_AutopilotSpec1_403_116(apfail_1, good_1, standby_1, state_1, supported_1, __time_step, __nb_step) returns (STATE_1);
*)
var 
	Actions_1 : real; Output_1 : bool; Output_2 : bool; Output_3 : bool;
let
	Actions_1 = Actions_1694_005(standby_1, apfail_1, supported_1, good_1, state_1, __time_step, __nb_step);
	(Output_1, Output_2, Output_3) = Output_2237_005(Actions_1, __time_step, __nb_step);
	MODE_1 = Output_1;
	REQUEST_1 = Output_2;
	PULL_1 = Output_3;
	STATE_1 = Actions_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/Sen/Actions/Fault
*)
node  Fault_2368_005(
	state_1 : real; request_1 : bool; limits_1 : bool; __time_step : real; __nb_step : int;)
returns(
	NextState_1 : real;);
var 
	Switch1_1 : real;
let
	Switch1_1 = if ( ( (not (request_1)) ) or ( (not (limits_1)) ) ) then
		1.0
	    else state_1;
	NextState_1 = Switch1_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/Sen/Actions/Fault
*)
node  Fault_2368_005_condExecSS(
	state_1 : real; request_1 : bool; limits_1 : bool; _isEnabled : bool; __time_step : real;
	__nb_step : int;)
returns(
	NextState_1 : real;);
var 
	pre_NextState_1 : real;
let
	pre_NextState_1 = if (__nb_step > 0) then
		(pre (NextState_1))
	    else 0.0;
	NextState_1 = merge(_isEnabled;
		 (activate Fault_2368_005 every _isEnabled)(state_1, request_1, limits_1, __time_step, __nb_step); 
		pre_NextState_1 when not(_isEnabled));
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/Sen/Actions/Nominal
*)
node  Nominal_2429_005(
	state_1 : real; request_1 : bool; limits_1 : bool; __time_step : real; __nb_step : int;)
returns(
	NextState_1 : real;);
var 
	Switch1_1 : real; Switch2_1 : real;
let
	Switch1_1 = if ( (not (request_1)) ) then
		1.0
	    else state_1;
	Switch2_1 = if limits_1 then
		2.0
	    else Switch1_1;
	NextState_1 = Switch2_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/Sen/Actions/Nominal
*)
node  Nominal_2429_005_condExecSS(
	state_1 : real; request_1 : bool; limits_1 : bool; _isEnabled : bool; __time_step : real;
	__nb_step : int;)
returns(
	NextState_1 : real;);
var 
	pre_NextState_1 : real;
let
	pre_NextState_1 = if (__nb_step > 0) then
		(pre (NextState_1))
	    else 0.0;
	NextState_1 = merge(_isEnabled;
		 (activate Nominal_2429_005 every _isEnabled)(state_1, request_1, limits_1, __time_step, __nb_step); 
		pre_NextState_1 when not(_isEnabled));
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/Sen/Actions/Transition
*)
node  Transition_2462_005(
	state_1 : real; request_1 : bool; mode_1 : bool; __time_step : real; __nb_step : int;)
returns(
	NextState_1 : real;);
var 
	Switch1_1 : real;
let
	Switch1_1 = if ( request_1 and mode_1 ) then
		0.0
	    else state_1;
	NextState_1 = Switch1_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/Sen/Actions/Transition
*)
node  Transition_2462_005_condExecSS(
	state_1 : real; request_1 : bool; mode_1 : bool; _isEnabled : bool; __time_step : real;
	__nb_step : int;)
returns(
	NextState_1 : real;);
var 
	pre_NextState_1 : real;
let
	pre_NextState_1 = if (__nb_step > 0) then
		(pre (NextState_1))
	    else 0.0;
	NextState_1 = merge(_isEnabled;
		 (activate Transition_2462_005 every _isEnabled)(state_1, request_1, mode_1, __time_step, __nb_step); 
		pre_NextState_1 when not(_isEnabled));
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/Sen/Actions
*)
node  Actions_2363_005(
	mode_1 : bool; request_1 : bool; limits_1 : bool; senstate_1 : real; __time_step : real;
	__nb_step : int;)
returns(
	SENSTATE_1 : real;);
var 
	ExecutionCond_of_Fault_2368_005 : bool; Fault_1 : real; If_1 : bool; If_2 : bool; If_3 : bool;
	Merge_1 : real; ExecutionCond_of_Nominal_2429_005 : bool; Nominal_1 : real; ExecutionCond_of_Transition_2462_005 : bool; Transition_1 : real;
let
	ExecutionCond_of_Fault_2368_005 = If_3;
	Fault_1 = Fault_2368_005_condExecSS(senstate_1, request_1, limits_1, ExecutionCond_of_Fault_2368_005, __time_step, __nb_step);
	(If_1, If_2, If_3) = if senstate_1 = 0.0 then
		(true, false, false)
	    else if senstate_1 = 1.0 then
		(false, true, false)
	    else if senstate_1 = 2.0 then
		(false, false, true)
	    else (false, false, false);
	Merge_1 = if ExecutionCond_of_Nominal_2429_005 then
		Nominal_1
	    else if ExecutionCond_of_Transition_2462_005 then
		Transition_1
	    else if ExecutionCond_of_Fault_2368_005 then
		Fault_1
	    else (0.0 -> (pre (Merge_1)));
	ExecutionCond_of_Nominal_2429_005 = If_1;
	Nominal_1 = Nominal_2429_005_condExecSS(senstate_1, request_1, limits_1, ExecutionCond_of_Nominal_2429_005, __time_step, __nb_step);
	ExecutionCond_of_Transition_2462_005 = If_2;
	Transition_1 = Transition_2462_005_condExecSS(senstate_1, request_1, mode_1, ExecutionCond_of_Transition_2462_005, __time_step, __nb_step);
	SENSTATE_1 = Merge_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/Sen/Output
*)
node  Output_2531_005(
	Newstate_1 : real; __time_step : real; __nb_step : int;)
returns(
	Good_1 : bool;);
var 
	Switch2_1 : bool;
let
	Switch2_1 = if ( (Newstate_1 = 2.0) ) then
		false
	    else true;
	Good_1 = Switch2_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/FiniteStateMachine_FSM_SensorSpec
*)
contract FiniteStateMachine_FSM_SensorSpec_1446_014(
	FSM_SensorSpec_MODE_1 : bool; FSM_SensorSpec_limits_1 : bool; FSM_SensorSpec_request_1 : bool; FSM_SensorSpec_senstate_1 : real; __time_step : real;
	__nb_step : int;)
returns(
	FSM_SensorSpec_SENSTATE_1 : real;);
let
	var FSM010_1 : bool = FSM010_1456_014(spec165_operator_1, __time_step, __nb_step);
	guarantee "FSM010_1456_014" FSM010_1;
	var FSM011v1_1 : bool = FSM011v1_1460_014(spec130_operator_1, __time_step, __nb_step);
	guarantee "FSM011v1_1460_014" FSM011v1_1;
	var FSM011v2_1 : bool = FSM011v2_1477_014(spec203_operator_1, __time_step, __nb_step);
	guarantee "FSM011v2_1477_014" FSM011v2_1;
	var FSM012_1 : bool = FSM012_1481_014(spec151_operator_1, __time_step, __nb_step);
	guarantee "FSM012_1481_014" FSM012_1;
	var FSM013_1 : bool = FSM013_1489_014(spec182_operator_1, __time_step, __nb_step);
	guarantee "FSM013_1489_014" FSM013_1;
	var spec130_operator_1 : bool = spec130_operator_1493_014(( (FSM_SensorSpec_senstate_1 = xxFSM_SensorSpec_27_rhs_1) ) and ( (not (FSM_SensorSpec_request_1)) ), (FSM_SensorSpec_SENSTATE_1 = xxFSM_SensorSpec_28_rhs_1), __time_step, __nb_step);
	var spec151_operator_1 : bool = spec151_operator_1494_014(( ( (FSM_SensorSpec_senstate_1 = xxFSM_SensorSpec_26_rhs_1) ) and ( (not (FSM_SensorSpec_request_1)) ) ) and ( (not (FSM_SensorSpec_limits_1)) ), (FSM_SensorSpec_SENSTATE_1 = xxFSM_SensorSpec_28_rhs_1), __time_step, __nb_step);
	var spec165_operator_1 : bool = spec165_operator_1495_014(( (FSM_SensorSpec_senstate_1 = xxFSM_SensorSpec_27_rhs_1) ) and FSM_SensorSpec_limits_1, (FSM_SensorSpec_SENSTATE_1 = xxFSM_SensorSpec_26_rhs_1), __time_step, __nb_step);
	var spec182_operator_1 : bool = spec182_operator_1496_014(( ( (FSM_SensorSpec_senstate_1 = xxFSM_SensorSpec_28_rhs_1) ) and FSM_SensorSpec_request_1 ) and FSM_SensorSpec_MODE_1, (FSM_SensorSpec_SENSTATE_1 = xxFSM_SensorSpec_27_rhs_1), __time_step, __nb_step);
	var spec203_operator_1 : bool = spec203_operator_1498_014(( ( (FSM_SensorSpec_senstate_1 = xxFSM_SensorSpec_27_rhs_1) ) and ( (not (FSM_SensorSpec_request_1)) ) ) and ( (not (FSM_SensorSpec_limits_1)) ), (FSM_SensorSpec_SENSTATE_1 = xxFSM_SensorSpec_28_rhs_1), __time_step, __nb_step);
	var xxFSM_SensorSpec_26_rhs_1 : real = 2.0;
	var xxFSM_SensorSpec_27_rhs_1 : real = 0.0;
	var xxFSM_SensorSpec_28_rhs_1 : real = 1.0;
	assume "NB_STEP" (__nb_step = (0 -> ((pre (__nb_step)) + 1)));
	assume "TIME_STEP" (__time_step = (0.0 -> ((pre (__time_step)) + 0.20)));
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine/Sen
*)
node  Sen_2358_005(
	mode_1 : bool; request_1 : bool; limits_1 : bool; senstate_1 : real; __time_step : real;
	__nb_step : int;)
returns(
	good_1 : bool; SENSTATE_1 : real;);
(*@contract
	import FiniteStateMachine_FSM_SensorSpec_1446_014(mode_1, limits_1, request_1, senstate_1, __time_step, __nb_step) returns (SENSTATE_1);
*)
var 
	Actions_1 : real; Output_1 : bool;
let
	Actions_1 = Actions_2363_005(mode_1, request_1, limits_1, senstate_1, __time_step, __nb_step);
	Output_1 = Output_2531_005(Actions_1, __time_step, __nb_step);
	good_1 = Output_1;
	SENSTATE_1 = Actions_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/fsm_12B_FSMSpec/FSM001v1
*)
node  FSM001v1_2628_032(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/fsm_12B_FSMSpec/FSM001v2
*)
node  FSM001v2_2636_032(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/fsm_12B_FSMSpec/FSM001v3
*)
node  FSM001v3_2647_032(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/fsm_12B_FSMSpec/HT_call/OT_call/OTlore_call
*)
node  OTlore_call_2664_032(
	OTlore_N_1 : int; OTlore_X_1 : bool; __time_step : real; __nb_step : int;)
returns(
	OTlore_Y_1 : bool;);
var 
	PRE_xxOTlore_6_1 : int; branch_1_IF_1 : int; branch_2_IF_1 : int; branch_3_IF_1 : int; xxOTlore_10_operator_1 : int;
	xxOTlore_3_rhs_1 : int; xxOTlore_5_operator_1 : int;
let
	assert (((- (2147483648)) <= OTlore_N_1) and (OTlore_N_1 <= 2147483647));
	PRE_xxOTlore_6_1 = (0 -> (pre (branch_3_IF_1)));
	branch_1_IF_1 = if ( (PRE_xxOTlore_6_1 < 0) ) then
		xxOTlore_3_rhs_1
	    else 1;
	branch_2_IF_1 = if ( (true -> (pre (false))) ) then
		xxOTlore_5_operator_1
	    else xxOTlore_10_operator_1;
	branch_3_IF_1 = if OTlore_X_1 then
		xxOTlore_3_rhs_1
	    else branch_2_IF_1;
	xxOTlore_10_operator_1 = int_to_int32(PRE_xxOTlore_6_1 + branch_1_IF_1);
	xxOTlore_3_rhs_1 = 0;
	xxOTlore_5_operator_1 = int_to_int32(1 * (- (1)));
	OTlore_Y_1 = ( ( (0 <= branch_3_IF_1) ) and ( (branch_3_IF_1 <= OTlore_N_1) ) );
tel

(*
Original block name: fsm_12B_with_contracts_PP/fsm_12B_FSMSpec/HT_call/OT_call/delay_call
*)
node  delay_call_2730_032(
	delay_X_1 : bool; delay_R_1 : int; __time_step : real; __nb_step : int;)
returns(
	delay_Y_1 : bool;);
let
	assert (((- (2147483648)) <= delay_R_1) and (delay_R_1 <= 2147483647));
	delay_Y_1 = delay_X_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/fsm_12B_FSMSpec/HT_call/OT_call
*)
node  OT_call_2660_032(
	OT_L_1 : int; OT_R_1 : int; OT_X_1 : bool; __time_step : real; __nb_step : int;)
returns(
	OT_Y_1 : bool;);
var 
	OTlore_call_1 : bool; delay_call_1 : bool; xxOT_1_operator_1 : int;
let
	assert (((- (2147483648)) <= OT_L_1) and (OT_L_1 <= 2147483647));
	assert (((- (2147483648)) <= OT_R_1) and (OT_R_1 <= 2147483647));
	OTlore_call_1 = OTlore_call_2664_032(xxOT_1_operator_1, delay_call_1, __time_step, __nb_step);
	delay_call_1 = delay_call_2730_032(OT_X_1, OT_R_1, __time_step, __nb_step);
	xxOT_1_operator_1 = int_to_int32(OT_L_1 - OT_R_1);
	OT_Y_1 = OTlore_call_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/fsm_12B_FSMSpec/HT_call
*)
node  HT_call_2656_032(
	HT_L_1 : int; HT_R_1 : int; HT_X_1 : bool; __time_step : real; __nb_step : int;)
returns(
	HT_Y_1 : bool;);
var 
	OT_call_1 : bool;
let
	assert (((- (2147483648)) <= HT_L_1) and (HT_L_1 <= 2147483647));
	assert (((- (2147483648)) <= HT_R_1) and (HT_R_1 <= 2147483647));
	OT_call_1 = OT_call_2660_032(HT_L_1, HT_R_1, (not (HT_X_1)), __time_step, __nb_step);
	HT_Y_1 = ( (not (OT_call_1)) );
tel

(*
Original block name: fsm_12B_with_contracts_PP/fsm_12B_FSMSpec/HT_call1/OT_call/OTlore_call
*)
node  OTlore_call_2799_032(
	OTlore_N_1 : int; OTlore_X_1 : bool; __time_step : real; __nb_step : int;)
returns(
	OTlore_Y_1 : bool;);
var 
	PRE_xxOTlore_6_1 : int; branch_1_IF_1 : int; branch_2_IF_1 : int; branch_3_IF_1 : int; xxOTlore_10_operator_1 : int;
	xxOTlore_3_rhs_1 : int; xxOTlore_5_operator_1 : int;
let
	assert (((- (2147483648)) <= OTlore_N_1) and (OTlore_N_1 <= 2147483647));
	PRE_xxOTlore_6_1 = (0 -> (pre (branch_3_IF_1)));
	branch_1_IF_1 = if ( (PRE_xxOTlore_6_1 < 0) ) then
		xxOTlore_3_rhs_1
	    else 1;
	branch_2_IF_1 = if ( (true -> (pre (false))) ) then
		xxOTlore_5_operator_1
	    else xxOTlore_10_operator_1;
	branch_3_IF_1 = if OTlore_X_1 then
		xxOTlore_3_rhs_1
	    else branch_2_IF_1;
	xxOTlore_10_operator_1 = int_to_int32(PRE_xxOTlore_6_1 + branch_1_IF_1);
	xxOTlore_3_rhs_1 = 0;
	xxOTlore_5_operator_1 = int_to_int32(1 * (- (1)));
	OTlore_Y_1 = ( ( (0 <= branch_3_IF_1) ) and ( (branch_3_IF_1 <= OTlore_N_1) ) );
tel

(*
Original block name: fsm_12B_with_contracts_PP/fsm_12B_FSMSpec/HT_call1/OT_call/delay_call
*)
node  delay_call_2875_032(
	delay_X_1 : bool; delay_R_1 : int; __time_step : real; __nb_step : int;)
returns(
	delay_Y_1 : bool;);
let
	assert (((- (2147483648)) <= delay_R_1) and (delay_R_1 <= 2147483647));
	delay_Y_1 = delay_X_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/fsm_12B_FSMSpec/HT_call1/OT_call
*)
node  OT_call_2790_032(
	OT_L_1 : int; OT_R_1 : int; OT_X_1 : bool; __time_step : real; __nb_step : int;)
returns(
	OT_Y_1 : bool;);
var 
	OTlore_call_1 : bool; delay_call_1 : bool; xxOT_1_operator_1 : int;
let
	assert (((- (2147483648)) <= OT_L_1) and (OT_L_1 <= 2147483647));
	assert (((- (2147483648)) <= OT_R_1) and (OT_R_1 <= 2147483647));
	OTlore_call_1 = OTlore_call_2799_032(xxOT_1_operator_1, delay_call_1, __time_step, __nb_step);
	delay_call_1 = delay_call_2875_032(OT_X_1, OT_R_1, __time_step, __nb_step);
	xxOT_1_operator_1 = int_to_int32(OT_L_1 - OT_R_1);
	OT_Y_1 = OTlore_call_1;
tel

(*
Original block name: fsm_12B_with_contracts_PP/fsm_12B_FSMSpec/HT_call1
*)
node  HT_call1_2782_032(
	HT_L_1 : int; HT_R_1 : int; HT_X_1 : bool; __time_step : real; __nb_step : int;)
returns(
	HT_Y_1 : bool;);
var 
	OT_call_1 : bool;
let
	assert (((- (2147483648)) <= HT_L_1) and (HT_L_1 <= 2147483647));
	assert (((- (2147483648)) <= HT_R_1) and (HT_R_1 <= 2147483647));
	OT_call_1 = OT_call_2790_032(HT_L_1, HT_R_1, (not (HT_X_1)), __time_step, __nb_step);
	HT_Y_1 = ( (not (OT_call_1)) );
tel

(*
Original block name: fsm_12B_with_contracts_PP/fsm_12B_FSMSpec/spec166_operator
*)
node  spec166_operator_2919_032(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: fsm_12B_with_contracts_PP/fsm_12B_FSMSpec/spec194_operator
*)
node  spec194_operator_2920_032(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: fsm_12B_with_contracts_PP/fsm_12B_FSMSpec/spec222_operator
*)
node  spec222_operator_2921_032(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: fsm_12B_with_contracts_PP/fsm_12B_FSMSpec
*)
contract fsm_12B_FSMSpec_2614_032(
	FSMSpec_apfail_1 : bool; FSMSpec_limits_1 : bool; FSMSpec_standby_1 : bool; FSMSpec_supported_1 : bool; __time_step : real;
	__nb_step : int;)
returns(
	FSMSpec_pullup_1 : bool;);
let
	var Arrow_xxFSMSpec_33_ni_5_1 : bool = (true -> (pre (false)));
	var FSM001v1_1 : bool = FSM001v1_2628_032(spec166_operator_1, __time_step, __nb_step);
	guarantee "FSM001v1_2628_032" FSM001v1_1;
	var FSM001v2_1 : bool = FSM001v2_2636_032(spec194_operator_1, __time_step, __nb_step);
	guarantee "FSM001v2_2636_032" FSM001v2_1;
	var FSM001v3_1 : bool = FSM001v3_2647_032(spec222_operator_1, __time_step, __nb_step);
	guarantee "FSM001v3_2647_032" FSM001v3_1;
	var HT_call_1 : bool = HT_call_2656_032(3, 0, branch_9_IF_1, __time_step, __nb_step);
	var HT_call1_1 : bool = HT_call1_2782_032(3, 0, autopilot_operator_1, __time_step, __nb_step);
	var autopilot_operator_1 : bool = ( ( ( (not (FSMSpec_standby_1)) ) and FSMSpec_supported_1 ) and ( (not (FSMSpec_apfail_1)) ) );
	var branch_10_IF_1 : bool = if ( (true -> (pre (false))) ) then
		false
	    else ( (false -> (pre (( (not (( ( HT_call1_1 and HT_call_1 ) and branch_8_IF_1 ))) )))) );
	var branch_11_IF_1 : bool = if ( (true -> (pre (false))) ) then
		true
	    else false;
	var branch_12_IF_1 : bool = if Arrow_xxFSMSpec_33_ni_5_1 then
		false
	    else ( (false -> (pre (autopilot_operator_1))) );
	var branch_13_IF_1 : bool = if ( (true -> (pre (false))) ) then
		false
	    else ( (false -> (pre (( (not (( ( autopilot_operator_1 and branch_12_IF_1 ) and branch_8_IF_1 ))) )))) );
	var branch_14_IF_1 : bool = if Arrow_xxFSMSpec_33_ni_5_1 then
		false
	    else ( (not (branch_8_IF_1)) );
	var branch_8_IF_1 : bool = if Arrow_xxFSMSpec_33_ni_5_1 then
		false
	    else ( (false -> (pre (FSMSpec_limits_1))) );
	var branch_9_IF_1 : bool = if Arrow_xxFSMSpec_33_ni_5_1 then
		false
	    else ( (false -> (pre (branch_14_IF_1))) );
	var spec166_operator_1 : bool = spec166_operator_2919_032(( ( FSMSpec_limits_1 and ( (not (FSMSpec_standby_1)) ) ) and ( (not (FSMSpec_apfail_1)) ) ) and FSMSpec_supported_1, FSMSpec_pullup_1, __time_step, __nb_step);
	var spec194_operator_1 : bool = spec194_operator_2920_032(( ( autopilot_operator_1 and branch_12_IF_1 ) and branch_8_IF_1 ) and ( branch_13_IF_1 or branch_11_IF_1 ), FSMSpec_pullup_1, __time_step, __nb_step);
	var spec222_operator_1 : bool = spec222_operator_2921_032(( ( HT_call1_1 and HT_call_1 ) and branch_8_IF_1 ) and ( branch_10_IF_1 or branch_11_IF_1 ), FSMSpec_pullup_1, __time_step, __nb_step);
	assume "NB_STEP" (__nb_step = (0 -> ((pre (__nb_step)) + 1)));
	assume "TIME_STEP" (__time_step = (0.0 -> ((pre (__time_step)) + 0.20)));
tel

(*
Original block name: fsm_12B_with_contracts_PP/FiniteStateMachine
*)
node  FiniteStateMachine_940_113(
	standby_1 : bool; apfail_1 : bool; supported_1 : bool; limits_1 : bool; __time_step : real;
	__nb_step : int;)
returns(
	pullup_1 : bool;);
(*@contract
	import fsm_12B_FSMSpec_2614_032(apfail_1, limits_1, standby_1, supported_1, __time_step, __nb_step) returns (pullup_1);
*)
var 
	Manager_1 : bool; Manager_2 : bool; Manager_3 : bool; Manager_4 : real; Sen_1 : bool;
	Sen_2 : real;
let
	(Manager_1, Manager_2, Manager_3, Manager_4) = Manager_1687_005(standby_1, apfail_1, supported_1, (true -> (pre (Sen_1))), (0.0 -> (pre (Manager_4))), __time_step, __nb_step);
	(Sen_1, Sen_2) = Sen_2358_005(Manager_1, Manager_2, limits_1, (0.0 -> (pre (Sen_2))), __time_step, __nb_step);
	pullup_1 = Manager_3;
tel

(*
Original block name: fsm_12B_with_contracts_PP
*)
node  fsm_12B_with_contracts_PP(
	standby_1 : bool; apfail_1 : bool; supported_1 : bool; limits_1 : bool;)
returns(
	pullup_1 : bool;);
var 
	FiniteStateMachine_1 : bool; __time_step : real; __nb_step : int;
let
	FiniteStateMachine_1 = FiniteStateMachine_940_113(standby_1, apfail_1, supported_1, limits_1, __time_step, __nb_step);
	pullup_1 = FiniteStateMachine_1;
	__time_step = (0.0 -> ((pre (__time_step)) + 0.20));
	__nb_step = (0 -> ((pre (__nb_step)) + 1));
tel

