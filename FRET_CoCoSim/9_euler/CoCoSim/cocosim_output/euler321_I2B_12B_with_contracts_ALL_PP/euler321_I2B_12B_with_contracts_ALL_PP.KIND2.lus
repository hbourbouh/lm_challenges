-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 06-Nov-2019 16:24:47
include "lustrec_math.lus"
node kind2_times(x, y: real) returns (z: real) ;
var abs_x, abs_y, abs_z: real;
let
   abs_x = if x < 0.0 then -x else x ;
    abs_y = if y < 0.0 then -y else y ;
    abs_z = if z < 0.0 then -z else z ;
    -- Neutral.
    assert (z = y) = ((x = 1.0) or (y = 0.0)) ;
    assert (z = x) = ((y = 1.0) or (x = 0.0)) ;
    -- Absorbing.
    assert (z = 0.0) = ( (x = 0.0) or (y = 0.0) ) ;
    -- Sign.
    assert (z > 0.0) = (
      ( (x > 0.0) and (y > 0.0) ) or
      ( (x < 0.0) and (y < 0.0) )
    ) ;
    assert (z < 0.0) = (
      ( (x > 0.0) and (y < 0.0) ) or
      ( (x < 0.0) and (y > 0.0) )
    ) ;
    -- Loose proportionality.
    assert (abs_z >= abs_y) = ((abs_x >= 1.0) or (y = 0.0)) ;
    assert (abs_z >= abs_x) = ((abs_y >= 1.0) or (x = 0.0)) ;
    assert (abs_z <= abs_y) = ((abs_x <= 1.0) or (y = 0.0)) ;
    assert (abs_z <= abs_x) = ((abs_y <= 1.0) or (x = 0.0)) ;
    z = x * y ;
tel
node kind2_divide(num, den: real) returns (res: real) ;
var abs_num, abs_den, abs_res: real;
let
 abs_num = if num < 0.0 then -num else num ;
 abs_den = if den < 0.0 then -den else den ;
 abs_res = if res < 0.0 then -res else res ;
assert not (den = 0.0) ;
-- Neutral.
assert (res = num) = ((den = 1.0) or (num = 0.0)) ;
assert (res = - num) = ((den = - 1.0) or (num = 0.0)) ;
-- Absorbing.
assert (num = 0.0) = (res = 0.0) ;
-- Sign.
assert (res > 0.0) = (
  ( (num > 0.0) and (den > 0.0) ) or
  ( (num < 0.0) and (den < 0.0) )
) ;
assert (res < 0.0) = (
  ( (num > 0.0) and (den < 0.0) ) or
  ( (num < 0.0) and (den > 0.0) )
) ;
-- Loose proportionality.
assert (abs_res >= abs_num) = ((abs_den <= 1.0) or (num = 0.0)) ;
assert (abs_res <= abs_num) = ((abs_den >= 1.0) or (num = 0.0)) ;
-- Annulation.
assert (res = 1.0) = (num = den) ;
assert (res = - 1.0) = (num = - den) ;
  res = num / den ;
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar_/Euler1Rotation_newline__lpar_Yaw_rpar_/Create3x3Matrix
*)
node  Create3x3Matrix_5173_004(
	M11_1 : real; M12_1 : real; M13_1 : real; M21_1 : real; M22_1 : real;
	M23_1 : real; M31_1 : real; M32_1 : real; M33_1 : real; __time_step : real;
	__nb_step : int;)
returns(
	Matrix_1 : real; Matrix_2 : real; Matrix_3 : real; Matrix_4 : real; Matrix_5 : real;
	Matrix_6 : real; Matrix_7 : real; Matrix_8 : real; Matrix_9 : real;);
let
	Matrix_1 = M11_1;
	Matrix_2 = M21_1;
	Matrix_3 = M31_1;
	Matrix_4 = M12_1;
	Matrix_5 = M22_1;
	Matrix_6 = M32_1;
	Matrix_7 = M13_1;
	Matrix_8 = M23_1;
	Matrix_9 = M33_1;
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar_/Euler1Rotation_newline__lpar_Yaw_rpar_
*)
node  Euler1Rotation_newline__lpar_Yaw_rpar__5168_004(
	psi_1 : real; __time_step : real; __nb_step : int;)
returns(
	R1_1 : real; R1_2 : real; R1_3 : real; R1_4 : real; R1_5 : real;
	R1_6 : real; R1_7 : real; R1_8 : real; R1_9 : real;);
var 
	Create3x3Matrix_1 : real; Create3x3Matrix_2 : real; Create3x3Matrix_3 : real; Create3x3Matrix_4 : real; Create3x3Matrix_5 : real;
	Create3x3Matrix_6 : real; Create3x3Matrix_7 : real; Create3x3Matrix_8 : real; Create3x3Matrix_9 : real; Mux_1 : real;
	Mux_2 : real; sincos_1 : real; sincos_2 : real;
let
	(Create3x3Matrix_1, Create3x3Matrix_2, Create3x3Matrix_3, Create3x3Matrix_4, Create3x3Matrix_5, Create3x3Matrix_6, Create3x3Matrix_7, Create3x3Matrix_8, Create3x3Matrix_9) = Create3x3Matrix_5173_004(Mux_2, Mux_1, 0.0, - Mux_1, Mux_2, 0.0, 0.0, 0.0, 1.0, __time_step, __nb_step);
	Mux_1 = sincos_1;
	Mux_2 = sincos_2;
	sincos_1 = sin(psi_1);
	sincos_2 = cos(psi_1);
	R1_1 = Create3x3Matrix_1;
	R1_2 = Create3x3Matrix_2;
	R1_3 = Create3x3Matrix_3;
	R1_4 = Create3x3Matrix_4;
	R1_5 = Create3x3Matrix_5;
	R1_6 = Create3x3Matrix_6;
	R1_7 = Create3x3Matrix_7;
	R1_8 = Create3x3Matrix_8;
	R1_9 = Create3x3Matrix_9;
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar_/Euler2Rotation_newline__lpar_Pitch_rpar_/Create3x3Matrix
*)
node  Create3x3Matrix_9212_001(
	M11_1 : real; M12_1 : real; M13_1 : real; M21_1 : real; M22_1 : real;
	M23_1 : real; M31_1 : real; M32_1 : real; M33_1 : real; __time_step : real;
	__nb_step : int;)
returns(
	Matrix_1 : real; Matrix_2 : real; Matrix_3 : real; Matrix_4 : real; Matrix_5 : real;
	Matrix_6 : real; Matrix_7 : real; Matrix_8 : real; Matrix_9 : real;);
let
	Matrix_1 = M11_1;
	Matrix_2 = M21_1;
	Matrix_3 = M31_1;
	Matrix_4 = M12_1;
	Matrix_5 = M22_1;
	Matrix_6 = M32_1;
	Matrix_7 = M13_1;
	Matrix_8 = M23_1;
	Matrix_9 = M33_1;
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar_/Euler2Rotation_newline__lpar_Pitch_rpar_
*)
node  Euler2Rotation_newline__lpar_Pitch_rpar__9210_001(
	theta_1 : real; __time_step : real; __nb_step : int;)
returns(
	R2_1 : real; R2_2 : real; R2_3 : real; R2_4 : real; R2_5 : real;
	R2_6 : real; R2_7 : real; R2_8 : real; R2_9 : real;);
var 
	Create3x3Matrix_1 : real; Create3x3Matrix_2 : real; Create3x3Matrix_3 : real; Create3x3Matrix_4 : real; Create3x3Matrix_5 : real;
	Create3x3Matrix_6 : real; Create3x3Matrix_7 : real; Create3x3Matrix_8 : real; Create3x3Matrix_9 : real; Mux_1 : real;
	Mux_2 : real; sincos_1 : real; sincos_2 : real;
let
	(Create3x3Matrix_1, Create3x3Matrix_2, Create3x3Matrix_3, Create3x3Matrix_4, Create3x3Matrix_5, Create3x3Matrix_6, Create3x3Matrix_7, Create3x3Matrix_8, Create3x3Matrix_9) = Create3x3Matrix_9212_001(Mux_2, 0.0, - Mux_1, 0.0, 1.0, 0.0, Mux_1, 0.0, Mux_2, __time_step, __nb_step);
	Mux_1 = sincos_1;
	Mux_2 = sincos_2;
	sincos_1 = sin(theta_1);
	sincos_2 = cos(theta_1);
	R2_1 = Create3x3Matrix_1;
	R2_2 = Create3x3Matrix_2;
	R2_3 = Create3x3Matrix_3;
	R2_4 = Create3x3Matrix_4;
	R2_5 = Create3x3Matrix_5;
	R2_6 = Create3x3Matrix_6;
	R2_7 = Create3x3Matrix_7;
	R2_8 = Create3x3Matrix_8;
	R2_9 = Create3x3Matrix_9;
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar_/Euler3Rotation_newline__lpar_Roll_rpar_/Create3x3Matrix
*)
node  Create3x3Matrix_9281_001(
	M11_1 : real; M12_1 : real; M13_1 : real; M21_1 : real; M22_1 : real;
	M23_1 : real; M31_1 : real; M32_1 : real; M33_1 : real; __time_step : real;
	__nb_step : int;)
returns(
	Matrix_1 : real; Matrix_2 : real; Matrix_3 : real; Matrix_4 : real; Matrix_5 : real;
	Matrix_6 : real; Matrix_7 : real; Matrix_8 : real; Matrix_9 : real;);
let
	Matrix_1 = M11_1;
	Matrix_2 = M21_1;
	Matrix_3 = M31_1;
	Matrix_4 = M12_1;
	Matrix_5 = M22_1;
	Matrix_6 = M32_1;
	Matrix_7 = M13_1;
	Matrix_8 = M23_1;
	Matrix_9 = M33_1;
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar_/Euler3Rotation_newline__lpar_Roll_rpar_
*)
node  Euler3Rotation_newline__lpar_Roll_rpar__9279_001(
	phi_1 : real; __time_step : real; __nb_step : int;)
returns(
	R3_1 : real; R3_2 : real; R3_3 : real; R3_4 : real; R3_5 : real;
	R3_6 : real; R3_7 : real; R3_8 : real; R3_9 : real;);
var 
	Create3x3Matrix_1 : real; Create3x3Matrix_2 : real; Create3x3Matrix_3 : real; Create3x3Matrix_4 : real; Create3x3Matrix_5 : real;
	Create3x3Matrix_6 : real; Create3x3Matrix_7 : real; Create3x3Matrix_8 : real; Create3x3Matrix_9 : real; Mux_1 : real;
	Mux_2 : real; sincos_1 : real; sincos_2 : real;
let
	(Create3x3Matrix_1, Create3x3Matrix_2, Create3x3Matrix_3, Create3x3Matrix_4, Create3x3Matrix_5, Create3x3Matrix_6, Create3x3Matrix_7, Create3x3Matrix_8, Create3x3Matrix_9) = Create3x3Matrix_9281_001(1.0, 0.0, 0.0, 0.0, Mux_2, Mux_1, 0.0, - Mux_1, Mux_2, __time_step, __nb_step);
	Mux_1 = sincos_1;
	Mux_2 = sincos_2;
	sincos_1 = sin(phi_1);
	sincos_2 = cos(phi_1);
	R3_1 = Create3x3Matrix_1;
	R3_2 = Create3x3Matrix_2;
	R3_3 = Create3x3Matrix_3;
	R3_4 = Create3x3Matrix_4;
	R3_5 = Create3x3Matrix_5;
	R3_6 = Create3x3Matrix_6;
	R3_7 = Create3x3Matrix_7;
	R3_8 = Create3x3Matrix_8;
	R3_9 = Create3x3Matrix_9;
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/euler321_I2B_12B_euler321_Spec/EUL_001_1
*)
node  EUL_001_1_9376_001(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/euler321_I2B_12B_euler321_Spec/EUL_001_2
*)
node  EUL_001_2_9380_001(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/euler321_I2B_12B_euler321_Spec/EUL_001_3
*)
node  EUL_001_3_9384_001(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/euler321_I2B_12B_euler321_Spec/EUL_001_4
*)
node  EUL_001_4_9388_001(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/euler321_I2B_12B_euler321_Spec/EUL_001_5
*)
node  EUL_001_5_9392_001(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/euler321_I2B_12B_euler321_Spec/EUL_001_6
*)
node  EUL_001_6_9396_001(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/euler321_I2B_12B_euler321_Spec/EUL_001_7
*)
node  EUL_001_7_9400_001(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/euler321_I2B_12B_euler321_Spec/EUL_001_8
*)
node  EUL_001_8_9404_001(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/euler321_I2B_12B_euler321_Spec/EUL_001_9
*)
node  EUL_001_9_9408_001(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/euler321_I2B_12B_euler321_Spec/EUL_002_1
*)
node  EUL_002_1_9412_001(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/euler321_I2B_12B_euler321_Spec/EUL_002_2
*)
node  EUL_002_2_9416_001(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/euler321_I2B_12B_euler321_Spec/EUL_002_3
*)
node  EUL_002_3_9420_001(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/euler321_I2B_12B_euler321_Spec/EUL_003
*)
node  EUL_003_9424_001(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/euler321_I2B_12B_euler321_Spec/EUL_004
*)
node  EUL_004_9428_001(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/euler321_I2B_12B_euler321_Spec/EUL_006_1
*)
node  EUL_006_1_9432_001(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/euler321_I2B_12B_euler321_Spec/EUL_006_2
*)
node  EUL_006_2_9436_001(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/euler321_I2B_12B_euler321_Spec/EUL_006_3
*)
node  EUL_006_3_9440_001(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/euler321_I2B_12B_euler321_Spec/EUL_006_4
*)
node  EUL_006_4_9444_001(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/euler321_I2B_12B_euler321_Spec/EUL_007
*)
node  EUL_007_9448_001(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/euler321_I2B_12B_euler321_Spec/EUL_008
*)
node  EUL_008_9452_001(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/euler321_I2B_12B_euler321_Spec/abs_call
*)
node  abs_call_9457_001(
	abs_x_1 : real; __time_step : real; __nb_step : int;)
returns(
	abs_y_1 : real;);
var 
	branch_1_IF_1 : real;
let
	branch_1_IF_1 = if ( (abs_x_1 >= 0.0) ) then
		abs_x_1
	    else ( (kind2_times(abs_x_1, -1.0)) );
	abs_y_1 = branch_1_IF_1;
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/euler321_I2B_12B_euler321_Spec/det_3x3_call
*)
node  det_3x3_call_9478_001(
	det_3x3_a11_1 : real; det_3x3_a21_1 : real; det_3x3_a31_1 : real; det_3x3_a12_1 : real; det_3x3_a22_1 : real;
	det_3x3_a32_1 : real; det_3x3_a13_1 : real; det_3x3_a23_1 : real; det_3x3_a33_1 : real; __time_step : real;
	__nb_step : int;)
returns(
	det_3x3_det_1 : real;);
let
	det_3x3_det_1 = ( ( ( kind2_times(kind2_times(1.0, det_3x3_a11_1), ( ( kind2_times(kind2_times(1.0, det_3x3_a22_1), det_3x3_a33_1) ) - ( kind2_times(kind2_times(1.0, det_3x3_a23_1), det_3x3_a32_1) ) )) ) + ( kind2_times(kind2_times(1.0, det_3x3_a12_1), ( ( kind2_times(kind2_times(1.0, det_3x3_a23_1), det_3x3_a31_1) ) - ( kind2_times(kind2_times(1.0, det_3x3_a21_1), det_3x3_a33_1) ) )) ) ) + ( kind2_times(kind2_times(1.0, det_3x3_a13_1), ( ( kind2_times(kind2_times(1.0, det_3x3_a21_1), det_3x3_a32_1) ) - ( kind2_times(kind2_times(1.0, det_3x3_a31_1), det_3x3_a22_1) ) )) ) );
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/euler321_I2B_12B_euler321_Spec/spec319_operator
*)
node  spec319_operator_9558_001(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/euler321_I2B_12B_euler321_Spec
*)
contract euler321_I2B_12B_euler321_Spec_9366_001(
	euler321_Spec_phi_1 : real; euler321_Spec_theta_1 : real; euler321_Spec_psi_1 : real; Vi_1 : real; Vi_2 : real;
	Vi_3 : real; __time_step : real; __nb_step : int;)
returns(
	DCM321_1 : real; DCM321_2 : real; DCM321_3 : real; DCM321_4 : real; DCM321_5 : real;
	DCM321_6 : real; DCM321_7 : real; DCM321_8 : real; DCM321_9 : real; Vb_1 : real;
	Vb_2 : real; Vb_3 : real;);
let
	var Demux_1 : real = Vi_1;
	var Demux_2 : real = Vi_2;
	var Demux_3 : real = Vi_3;
	var Demux1_1 : real = Vb_1;
	var Demux1_2 : real = Vb_2;
	var Demux1_3 : real = Vb_3;
	var Demux3_1 : real = DCM321_1;
	var Demux3_2 : real = DCM321_2;
	var Demux3_3 : real = DCM321_3;
	var Demux3_4 : real = DCM321_4;
	var Demux3_5 : real = DCM321_5;
	var Demux3_6 : real = DCM321_6;
	var Demux3_7 : real = DCM321_7;
	var Demux3_8 : real = DCM321_8;
	var Demux3_9 : real = DCM321_9;
	var EUL_001_1_1 : bool = EUL_001_1_9376_001((Demux3_1 = ( kind2_times(kind2_times(1.0, xxeuler321_Spec_112_cos_call_1), xxeuler321_Spec_111_cos_call_1) )), __time_step, __nb_step);
	guarantee "EUL_001_1_9376_001" EUL_001_1_1;
	var EUL_001_2_1 : bool = EUL_001_2_9380_001((Demux3_2 = ( ( kind2_times(kind2_times(1.0, ( (kind2_times(xxeuler321_Spec_107_cos_call_1, -1.0)) )), xxeuler321_Spec_106_sin_call_1) ) + ( kind2_times(kind2_times(1.0, ( kind2_times(kind2_times(1.0, xxeuler321_Spec_103_sin_call_1), xxeuler321_Spec_102_sin_call_1) )), xxeuler321_Spec_101_cos_call_1) ) )), __time_step, __nb_step);
	guarantee "EUL_001_2_9380_001" EUL_001_2_1;
	var EUL_001_3_1 : bool = EUL_001_3_9384_001((Demux3_3 = ( ( kind2_times(kind2_times(1.0, xxeuler321_Spec_98_sin_call_1), xxeuler321_Spec_97_sin_call_1) ) + ( kind2_times(kind2_times(1.0, ( kind2_times(kind2_times(1.0, xxeuler321_Spec_94_cos_call_1), xxeuler321_Spec_93_sin_call_1) )), xxeuler321_Spec_92_cos_call_1) ) )), __time_step, __nb_step);
	guarantee "EUL_001_3_9384_001" EUL_001_3_1;
	var EUL_001_4_1 : bool = EUL_001_4_9388_001((Demux3_4 = ( kind2_times(kind2_times(1.0, xxeuler321_Spec_90_cos_call_1), xxeuler321_Spec_89_sin_call_1) )), __time_step, __nb_step);
	guarantee "EUL_001_4_9388_001" EUL_001_4_1;
	var EUL_001_5_1 : bool = EUL_001_5_9392_001((Demux3_5 = ( ( kind2_times(kind2_times(1.0, xxeuler321_Spec_86_cos_call_1), xxeuler321_Spec_85_cos_call_1) ) + ( kind2_times(kind2_times(1.0, ( kind2_times(kind2_times(1.0, xxeuler321_Spec_82_sin_call_1), xxeuler321_Spec_81_sin_call_1) )), xxeuler321_Spec_80_sin_call_1) ) )), __time_step, __nb_step);
	guarantee "EUL_001_5_9392_001" EUL_001_5_1;
	var EUL_001_6_1 : bool = EUL_001_6_9396_001((Demux3_6 = ( ( kind2_times(kind2_times(1.0, ( (kind2_times(xxeuler321_Spec_76_sin_call_1, -1.0)) )), xxeuler321_Spec_75_cos_call_1) ) + ( kind2_times(kind2_times(1.0, ( kind2_times(kind2_times(1.0, xxeuler321_Spec_72_cos_call_1), xxeuler321_Spec_71_sin_call_1) )), xxeuler321_Spec_70_sin_call_1) ) )), __time_step, __nb_step);
	guarantee "EUL_001_6_9396_001" EUL_001_6_1;
	var EUL_001_7_1 : bool = EUL_001_7_9400_001((Demux3_7 = ( (kind2_times(xxeuler321_Spec_68_sin_call_1, -1.0)) )), __time_step, __nb_step);
	guarantee "EUL_001_7_9400_001" EUL_001_7_1;
	var EUL_001_8_1 : bool = EUL_001_8_9404_001((Demux3_8 = ( kind2_times(kind2_times(1.0, xxeuler321_Spec_66_sin_call_1), xxeuler321_Spec_65_cos_call_1) )), __time_step, __nb_step);
	guarantee "EUL_001_8_9404_001" EUL_001_8_1;
	var EUL_001_9_1 : bool = EUL_001_9_9408_001((Demux3_9 = ( kind2_times(kind2_times(1.0, xxeuler321_Spec_63_cos_call_1), xxeuler321_Spec_62_cos_call_1) )), __time_step, __nb_step);
	guarantee "EUL_001_9_9408_001" EUL_001_9_1;
	var EUL_002_1_1 : bool = EUL_002_1_9412_001((Demux1_1 = ( ( ( kind2_times(kind2_times(1.0, Demux3_1), Demux_1) ) + ( kind2_times(kind2_times(1.0, Demux3_4), Demux_2) ) ) + ( kind2_times(kind2_times(1.0, Demux3_7), Demux_3) ) )), __time_step, __nb_step);
	guarantee "EUL_002_1_9412_001" EUL_002_1_1;
	var EUL_002_2_1 : bool = EUL_002_2_9416_001((Demux1_2 = ( ( ( kind2_times(kind2_times(1.0, Demux3_2), Demux_1) ) + ( kind2_times(kind2_times(1.0, Demux3_5), Demux_2) ) ) + ( kind2_times(kind2_times(1.0, Demux3_8), Demux_3) ) )), __time_step, __nb_step);
	guarantee "EUL_002_2_9416_001" EUL_002_2_1;
	var EUL_002_3_1 : bool = EUL_002_3_9420_001((Demux1_3 = ( ( ( kind2_times(kind2_times(1.0, Demux3_3), Demux_1) ) + ( kind2_times(kind2_times(1.0, Demux3_6), Demux_2) ) ) + ( kind2_times(kind2_times(1.0, Demux3_9), Demux_3) ) )), __time_step, __nb_step);
	guarantee "EUL_002_3_9420_001" EUL_002_3_1;
	var EUL_003_1 : bool = EUL_003_9424_001((( ( ( kind2_times(kind2_times(1.0, Demux1_1), Demux1_1) ) + ( kind2_times(kind2_times(1.0, Demux1_2), Demux1_2) ) ) + ( kind2_times(kind2_times(1.0, Demux1_3), Demux1_3) ) ) = ( ( ( kind2_times(kind2_times(1.0, Demux_1), Demux_1) ) + ( kind2_times(kind2_times(1.0, Demux_2), Demux_2) ) ) + ( kind2_times(kind2_times(1.0, Demux_3), Demux_3) ) )), __time_step, __nb_step);
	guarantee "EUL_003_9424_001" EUL_003_1;
	var EUL_004_1 : bool = EUL_004_9428_001(spec319_operator_1, __time_step, __nb_step);
	guarantee "EUL_004_9428_001" EUL_004_1;
	var EUL_006_1_1 : bool = EUL_006_1_9432_001(( ( (r1xr1Transpose_operator_1 = 1.0) ) and ( (r2xr2Transpose_operator_1 = 1.0) ) ) and ( (r3xr3Transpose_operator_1 = 1.0) ), __time_step, __nb_step);
	guarantee "EUL_006_1_9432_001" EUL_006_1_1;
	var EUL_006_2_1 : bool = EUL_006_2_9436_001(( ( (r1xr2Transpose_operator_1 = 0.0) ) and ( (r1xr3Transpose_operator_1 = 0.0) ) ) and ( (r2xr3Transpose_operator_1 = 0.0) ), __time_step, __nb_step);
	guarantee "EUL_006_2_9436_001" EUL_006_2_1;
	var EUL_006_3_1 : bool = EUL_006_3_9440_001(( ( (( ( xxeuler321_Spec_117_operator_1 + xxeuler321_Spec_116_operator_1 ) + xxeuler321_Spec_115_operator_1 ) = 1.0) ) and ( (( ( xxeuler321_Spec_121_operator_1 + xxeuler321_Spec_120_operator_1 ) + xxeuler321_Spec_119_operator_1 ) = 1.0) ) ) and ( (( ( xxeuler321_Spec_125_operator_1 + xxeuler321_Spec_124_operator_1 ) + xxeuler321_Spec_123_operator_1 ) = 1.0) ), __time_step, __nb_step);
	guarantee "EUL_006_3_9440_001" EUL_006_3_1;
	var EUL_006_4_1 : bool = EUL_006_4_9444_001(( ( (( ( ( kind2_times(kind2_times(1.0, Demux3_1), Demux3_4) ) + ( kind2_times(kind2_times(1.0, Demux3_2), Demux3_5) ) ) + ( kind2_times(kind2_times(1.0, Demux3_3), Demux3_6) ) ) = 0.0) ) and ( (( ( ( kind2_times(kind2_times(1.0, Demux3_1), Demux3_7) ) + ( kind2_times(kind2_times(1.0, Demux3_2), Demux3_8) ) ) + ( kind2_times(kind2_times(1.0, Demux3_3), Demux3_9) ) ) = 0.0) ) ) and ( (( ( ( kind2_times(kind2_times(1.0, Demux3_4), Demux3_7) ) + ( kind2_times(kind2_times(1.0, Demux3_5), Demux3_8) ) ) + ( kind2_times(kind2_times(1.0, Demux3_6), Demux3_9) ) ) = 0.0) ), __time_step, __nb_step);
	guarantee "EUL_006_4_9444_001" EUL_006_4_1;
	var EUL_007_1 : bool = EUL_007_9448_001(( ( ( ( ( ( ( ( (r1xr1Transpose_operator_1 = 1.0) ) and ( (r1xr2Transpose_operator_1 = 0.0) ) ) and ( (r1xr3Transpose_operator_1 = 0.0) ) ) and ( (( ( ( kind2_times(kind2_times(1.0, Demux3_2), Demux3_1) ) + ( kind2_times(kind2_times(1.0, Demux3_5), Demux3_4) ) ) + ( kind2_times(kind2_times(1.0, Demux3_8), Demux3_7) ) ) = 0.0) ) ) and ( (r2xr2Transpose_operator_1 = 1.0) ) ) and ( (r2xr3Transpose_operator_1 = 0.0) ) ) and ( (( ( ( kind2_times(kind2_times(1.0, Demux3_3), Demux3_1) ) + ( kind2_times(kind2_times(1.0, Demux3_6), Demux3_4) ) ) + ( kind2_times(kind2_times(1.0, Demux3_9), Demux3_7) ) ) = 0.0) ) ) and ( (( ( ( kind2_times(kind2_times(1.0, Demux3_3), Demux3_2) ) + ( kind2_times(kind2_times(1.0, Demux3_6), Demux3_5) ) ) + ( kind2_times(kind2_times(1.0, Demux3_9), Demux3_8) ) ) = 0.0) ) ) and ( (r3xr3Transpose_operator_1 = 1.0) ), __time_step, __nb_step);
	guarantee "EUL_007_9448_001" EUL_007_1;
	var EUL_008_1 : bool = EUL_008_9452_001((det_3x3_call_1 = 1.0), __time_step, __nb_step);
	guarantee "EUL_008_9452_001" EUL_008_1;
	var abs_call_1 : real = abs_call_9457_001(euler321_Spec_theta_1, __time_step, __nb_step);
	var det_3x3_call_1 : real = det_3x3_call_9478_001(Demux3_1, Demux3_2, Demux3_3, Demux3_4, Demux3_5, Demux3_6, Demux3_7, Demux3_8, Demux3_9, __time_step, __nb_step);
	var r1xr1Transpose_operator_1 : real = ( xxeuler321_Spec_117_operator_1 + xxeuler321_Spec_121_operator_1 ) + xxeuler321_Spec_125_operator_1;
	var r1xr2Transpose_operator_1 : real = ( ( kind2_times(kind2_times(1.0, Demux3_1), Demux3_2) ) + ( kind2_times(kind2_times(1.0, Demux3_4), Demux3_5) ) ) + ( kind2_times(kind2_times(1.0, Demux3_7), Demux3_8) );
	var r1xr3Transpose_operator_1 : real = ( ( kind2_times(kind2_times(1.0, Demux3_1), Demux3_3) ) + ( kind2_times(kind2_times(1.0, Demux3_4), Demux3_6) ) ) + ( kind2_times(kind2_times(1.0, Demux3_7), Demux3_9) );
	var r2xr2Transpose_operator_1 : real = ( xxeuler321_Spec_116_operator_1 + xxeuler321_Spec_120_operator_1 ) + xxeuler321_Spec_124_operator_1;
	var r2xr3Transpose_operator_1 : real = ( ( kind2_times(kind2_times(1.0, Demux3_2), Demux3_3) ) + ( kind2_times(kind2_times(1.0, Demux3_5), Demux3_6) ) ) + ( kind2_times(kind2_times(1.0, Demux3_8), Demux3_9) );
	var r3xr3Transpose_operator_1 : real = ( xxeuler321_Spec_115_operator_1 + xxeuler321_Spec_119_operator_1 ) + xxeuler321_Spec_123_operator_1;
	var spec319_operator_1 : bool = spec319_operator_9558_001((abs_call_1 <> ( kind2_divide(kind2_times(1.0, 3.14159265360), 2.0) )), (det_3x3_call_1 <> 0.0), __time_step, __nb_step);
	var xxeuler321_Spec_101_cos_call_1 : real = cos(euler321_Spec_psi_1);
	var xxeuler321_Spec_102_sin_call_1 : real = sin(euler321_Spec_theta_1);
	var xxeuler321_Spec_103_sin_call_1 : real = sin(euler321_Spec_phi_1);
	var xxeuler321_Spec_106_sin_call_1 : real = sin(euler321_Spec_psi_1);
	var xxeuler321_Spec_107_cos_call_1 : real = cos(euler321_Spec_phi_1);
	var xxeuler321_Spec_111_cos_call_1 : real = cos(euler321_Spec_psi_1);
	var xxeuler321_Spec_112_cos_call_1 : real = cos(euler321_Spec_theta_1);
	var xxeuler321_Spec_115_operator_1 : real = kind2_times(kind2_times(1.0, Demux3_3), Demux3_3);
	var xxeuler321_Spec_116_operator_1 : real = kind2_times(kind2_times(1.0, Demux3_2), Demux3_2);
	var xxeuler321_Spec_117_operator_1 : real = kind2_times(kind2_times(1.0, Demux3_1), Demux3_1);
	var xxeuler321_Spec_119_operator_1 : real = kind2_times(kind2_times(1.0, Demux3_6), Demux3_6);
	var xxeuler321_Spec_120_operator_1 : real = kind2_times(kind2_times(1.0, Demux3_5), Demux3_5);
	var xxeuler321_Spec_121_operator_1 : real = kind2_times(kind2_times(1.0, Demux3_4), Demux3_4);
	var xxeuler321_Spec_123_operator_1 : real = kind2_times(kind2_times(1.0, Demux3_9), Demux3_9);
	var xxeuler321_Spec_124_operator_1 : real = kind2_times(kind2_times(1.0, Demux3_8), Demux3_8);
	var xxeuler321_Spec_125_operator_1 : real = kind2_times(kind2_times(1.0, Demux3_7), Demux3_7);
	var xxeuler321_Spec_62_cos_call_1 : real = cos(euler321_Spec_theta_1);
	var xxeuler321_Spec_63_cos_call_1 : real = cos(euler321_Spec_phi_1);
	var xxeuler321_Spec_65_cos_call_1 : real = cos(euler321_Spec_theta_1);
	var xxeuler321_Spec_66_sin_call_1 : real = sin(euler321_Spec_phi_1);
	var xxeuler321_Spec_68_sin_call_1 : real = sin(euler321_Spec_theta_1);
	var xxeuler321_Spec_70_sin_call_1 : real = sin(euler321_Spec_psi_1);
	var xxeuler321_Spec_71_sin_call_1 : real = sin(euler321_Spec_theta_1);
	var xxeuler321_Spec_72_cos_call_1 : real = cos(euler321_Spec_phi_1);
	var xxeuler321_Spec_75_cos_call_1 : real = cos(euler321_Spec_psi_1);
	var xxeuler321_Spec_76_sin_call_1 : real = sin(euler321_Spec_phi_1);
	var xxeuler321_Spec_80_sin_call_1 : real = sin(euler321_Spec_psi_1);
	var xxeuler321_Spec_81_sin_call_1 : real = sin(euler321_Spec_theta_1);
	var xxeuler321_Spec_82_sin_call_1 : real = sin(euler321_Spec_phi_1);
	var xxeuler321_Spec_85_cos_call_1 : real = cos(euler321_Spec_psi_1);
	var xxeuler321_Spec_86_cos_call_1 : real = cos(euler321_Spec_phi_1);
	var xxeuler321_Spec_89_sin_call_1 : real = sin(euler321_Spec_psi_1);
	var xxeuler321_Spec_90_cos_call_1 : real = cos(euler321_Spec_theta_1);
	var xxeuler321_Spec_92_cos_call_1 : real = cos(euler321_Spec_psi_1);
	var xxeuler321_Spec_93_sin_call_1 : real = sin(euler321_Spec_theta_1);
	var xxeuler321_Spec_94_cos_call_1 : real = cos(euler321_Spec_phi_1);
	var xxeuler321_Spec_97_sin_call_1 : real = sin(euler321_Spec_psi_1);
	var xxeuler321_Spec_98_sin_call_1 : real = sin(euler321_Spec_phi_1);
	assume "NB_STEP" (__nb_step = (0 -> ((pre (__nb_step)) + 1)));
	assume "TIME_STEP" (__time_step = (0.0 -> ((pre (__time_step)) + 0.010)));
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP/COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar_
*)
node  COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__5149_004(
	phi_1 : real; theta_1 : real; psi_1 : real; Vi_1 : real; Vi_2 : real;
	Vi_3 : real; __time_step : real; __nb_step : int;)
returns(
	DCM321_1 : real; DCM321_2 : real; DCM321_3 : real; DCM321_4 : real; DCM321_5 : real;
	DCM321_6 : real; DCM321_7 : real; DCM321_8 : real; DCM321_9 : real; Vb_1 : real;
	Vb_2 : real; Vb_3 : real;);
(*@contract
	import euler321_I2B_12B_euler321_Spec_9366_001(phi_1, theta_1, psi_1, Vi_1, Vi_2, Vi_3, __time_step, __nb_step) returns (DCM321_1, DCM321_2, DCM321_3, DCM321_4, DCM321_5, DCM321_6, DCM321_7, DCM321_8, DCM321_9, Vb_1, Vb_2, Vb_3);
*)
var 
	Euler1Rotation_newline__lpar_Yaw_rpar__1 : real; Euler1Rotation_newline__lpar_Yaw_rpar__2 : real; Euler1Rotation_newline__lpar_Yaw_rpar__3 : real; Euler1Rotation_newline__lpar_Yaw_rpar__4 : real; Euler1Rotation_newline__lpar_Yaw_rpar__5 : real;
	Euler1Rotation_newline__lpar_Yaw_rpar__6 : real; Euler1Rotation_newline__lpar_Yaw_rpar__7 : real; Euler1Rotation_newline__lpar_Yaw_rpar__8 : real; Euler1Rotation_newline__lpar_Yaw_rpar__9 : real; Euler2Rotation_newline__lpar_Pitch_rpar__1 : real;
	Euler2Rotation_newline__lpar_Pitch_rpar__2 : real; Euler2Rotation_newline__lpar_Pitch_rpar__3 : real; Euler2Rotation_newline__lpar_Pitch_rpar__4 : real; Euler2Rotation_newline__lpar_Pitch_rpar__5 : real; Euler2Rotation_newline__lpar_Pitch_rpar__6 : real;
	Euler2Rotation_newline__lpar_Pitch_rpar__7 : real; Euler2Rotation_newline__lpar_Pitch_rpar__8 : real; Euler2Rotation_newline__lpar_Pitch_rpar__9 : real; Euler3Rotation_newline__lpar_Roll_rpar__1 : real; Euler3Rotation_newline__lpar_Roll_rpar__2 : real;
	Euler3Rotation_newline__lpar_Roll_rpar__3 : real; Euler3Rotation_newline__lpar_Roll_rpar__4 : real; Euler3Rotation_newline__lpar_Roll_rpar__5 : real; Euler3Rotation_newline__lpar_Roll_rpar__6 : real; Euler3Rotation_newline__lpar_Roll_rpar__7 : real;
	Euler3Rotation_newline__lpar_Roll_rpar__8 : real; Euler3Rotation_newline__lpar_Roll_rpar__9 : real; Product_1 : real; Product_2 : real; Product_3 : real;
	Product_4 : real; Product_5 : real; Product_6 : real; Product_7 : real; Product_8 : real;
	Product_9 : real; Product1_1 : real; Product1_2 : real; Product1_3 : real; Product1_4 : real;
	Product1_5 : real; Product1_6 : real; Product1_7 : real; Product1_8 : real; Product1_9 : real;
let
	(Euler1Rotation_newline__lpar_Yaw_rpar__1, Euler1Rotation_newline__lpar_Yaw_rpar__2, Euler1Rotation_newline__lpar_Yaw_rpar__3, Euler1Rotation_newline__lpar_Yaw_rpar__4, Euler1Rotation_newline__lpar_Yaw_rpar__5, Euler1Rotation_newline__lpar_Yaw_rpar__6, Euler1Rotation_newline__lpar_Yaw_rpar__7, Euler1Rotation_newline__lpar_Yaw_rpar__8, Euler1Rotation_newline__lpar_Yaw_rpar__9) = Euler1Rotation_newline__lpar_Yaw_rpar__5168_004(psi_1, __time_step, __nb_step);
	(Euler2Rotation_newline__lpar_Pitch_rpar__1, Euler2Rotation_newline__lpar_Pitch_rpar__2, Euler2Rotation_newline__lpar_Pitch_rpar__3, Euler2Rotation_newline__lpar_Pitch_rpar__4, Euler2Rotation_newline__lpar_Pitch_rpar__5, Euler2Rotation_newline__lpar_Pitch_rpar__6, Euler2Rotation_newline__lpar_Pitch_rpar__7, Euler2Rotation_newline__lpar_Pitch_rpar__8, Euler2Rotation_newline__lpar_Pitch_rpar__9) = Euler2Rotation_newline__lpar_Pitch_rpar__9210_001(theta_1, __time_step, __nb_step);
	(Euler3Rotation_newline__lpar_Roll_rpar__1, Euler3Rotation_newline__lpar_Roll_rpar__2, Euler3Rotation_newline__lpar_Roll_rpar__3, Euler3Rotation_newline__lpar_Roll_rpar__4, Euler3Rotation_newline__lpar_Roll_rpar__5, Euler3Rotation_newline__lpar_Roll_rpar__6, Euler3Rotation_newline__lpar_Roll_rpar__7, Euler3Rotation_newline__lpar_Roll_rpar__8, Euler3Rotation_newline__lpar_Roll_rpar__9) = Euler3Rotation_newline__lpar_Roll_rpar__9279_001(phi_1, __time_step, __nb_step);
	Product_1 = (kind2_times(Euler2Rotation_newline__lpar_Pitch_rpar__1, Euler1Rotation_newline__lpar_Yaw_rpar__1)) + (kind2_times(Euler2Rotation_newline__lpar_Pitch_rpar__4, Euler1Rotation_newline__lpar_Yaw_rpar__2)) + (kind2_times(Euler2Rotation_newline__lpar_Pitch_rpar__7, Euler1Rotation_newline__lpar_Yaw_rpar__3));
	Product_4 = (kind2_times(Euler2Rotation_newline__lpar_Pitch_rpar__1, Euler1Rotation_newline__lpar_Yaw_rpar__4)) + (kind2_times(Euler2Rotation_newline__lpar_Pitch_rpar__4, Euler1Rotation_newline__lpar_Yaw_rpar__5)) + (kind2_times(Euler2Rotation_newline__lpar_Pitch_rpar__7, Euler1Rotation_newline__lpar_Yaw_rpar__6));
	Product_7 = (kind2_times(Euler2Rotation_newline__lpar_Pitch_rpar__1, Euler1Rotation_newline__lpar_Yaw_rpar__7)) + (kind2_times(Euler2Rotation_newline__lpar_Pitch_rpar__4, Euler1Rotation_newline__lpar_Yaw_rpar__8)) + (kind2_times(Euler2Rotation_newline__lpar_Pitch_rpar__7, Euler1Rotation_newline__lpar_Yaw_rpar__9));
	Product_2 = (kind2_times(Euler2Rotation_newline__lpar_Pitch_rpar__2, Euler1Rotation_newline__lpar_Yaw_rpar__1)) + (kind2_times(Euler2Rotation_newline__lpar_Pitch_rpar__5, Euler1Rotation_newline__lpar_Yaw_rpar__2)) + (kind2_times(Euler2Rotation_newline__lpar_Pitch_rpar__8, Euler1Rotation_newline__lpar_Yaw_rpar__3));
	Product_5 = (kind2_times(Euler2Rotation_newline__lpar_Pitch_rpar__2, Euler1Rotation_newline__lpar_Yaw_rpar__4)) + (kind2_times(Euler2Rotation_newline__lpar_Pitch_rpar__5, Euler1Rotation_newline__lpar_Yaw_rpar__5)) + (kind2_times(Euler2Rotation_newline__lpar_Pitch_rpar__8, Euler1Rotation_newline__lpar_Yaw_rpar__6));
	Product_8 = (kind2_times(Euler2Rotation_newline__lpar_Pitch_rpar__2, Euler1Rotation_newline__lpar_Yaw_rpar__7)) + (kind2_times(Euler2Rotation_newline__lpar_Pitch_rpar__5, Euler1Rotation_newline__lpar_Yaw_rpar__8)) + (kind2_times(Euler2Rotation_newline__lpar_Pitch_rpar__8, Euler1Rotation_newline__lpar_Yaw_rpar__9));
	Product_3 = (kind2_times(Euler2Rotation_newline__lpar_Pitch_rpar__3, Euler1Rotation_newline__lpar_Yaw_rpar__1)) + (kind2_times(Euler2Rotation_newline__lpar_Pitch_rpar__6, Euler1Rotation_newline__lpar_Yaw_rpar__2)) + (kind2_times(Euler2Rotation_newline__lpar_Pitch_rpar__9, Euler1Rotation_newline__lpar_Yaw_rpar__3));
	Product_6 = (kind2_times(Euler2Rotation_newline__lpar_Pitch_rpar__3, Euler1Rotation_newline__lpar_Yaw_rpar__4)) + (kind2_times(Euler2Rotation_newline__lpar_Pitch_rpar__6, Euler1Rotation_newline__lpar_Yaw_rpar__5)) + (kind2_times(Euler2Rotation_newline__lpar_Pitch_rpar__9, Euler1Rotation_newline__lpar_Yaw_rpar__6));
	Product_9 = (kind2_times(Euler2Rotation_newline__lpar_Pitch_rpar__3, Euler1Rotation_newline__lpar_Yaw_rpar__7)) + (kind2_times(Euler2Rotation_newline__lpar_Pitch_rpar__6, Euler1Rotation_newline__lpar_Yaw_rpar__8)) + (kind2_times(Euler2Rotation_newline__lpar_Pitch_rpar__9, Euler1Rotation_newline__lpar_Yaw_rpar__9));
	Product1_1 = (kind2_times(Euler3Rotation_newline__lpar_Roll_rpar__1, Product_1)) + (kind2_times(Euler3Rotation_newline__lpar_Roll_rpar__4, Product_2)) + (kind2_times(Euler3Rotation_newline__lpar_Roll_rpar__7, Product_3));
	Product1_4 = (kind2_times(Euler3Rotation_newline__lpar_Roll_rpar__1, Product_4)) + (kind2_times(Euler3Rotation_newline__lpar_Roll_rpar__4, Product_5)) + (kind2_times(Euler3Rotation_newline__lpar_Roll_rpar__7, Product_6));
	Product1_7 = (kind2_times(Euler3Rotation_newline__lpar_Roll_rpar__1, Product_7)) + (kind2_times(Euler3Rotation_newline__lpar_Roll_rpar__4, Product_8)) + (kind2_times(Euler3Rotation_newline__lpar_Roll_rpar__7, Product_9));
	Product1_2 = (kind2_times(Euler3Rotation_newline__lpar_Roll_rpar__2, Product_1)) + (kind2_times(Euler3Rotation_newline__lpar_Roll_rpar__5, Product_2)) + (kind2_times(Euler3Rotation_newline__lpar_Roll_rpar__8, Product_3));
	Product1_5 = (kind2_times(Euler3Rotation_newline__lpar_Roll_rpar__2, Product_4)) + (kind2_times(Euler3Rotation_newline__lpar_Roll_rpar__5, Product_5)) + (kind2_times(Euler3Rotation_newline__lpar_Roll_rpar__8, Product_6));
	Product1_8 = (kind2_times(Euler3Rotation_newline__lpar_Roll_rpar__2, Product_7)) + (kind2_times(Euler3Rotation_newline__lpar_Roll_rpar__5, Product_8)) + (kind2_times(Euler3Rotation_newline__lpar_Roll_rpar__8, Product_9));
	Product1_3 = (kind2_times(Euler3Rotation_newline__lpar_Roll_rpar__3, Product_1)) + (kind2_times(Euler3Rotation_newline__lpar_Roll_rpar__6, Product_2)) + (kind2_times(Euler3Rotation_newline__lpar_Roll_rpar__9, Product_3));
	Product1_6 = (kind2_times(Euler3Rotation_newline__lpar_Roll_rpar__3, Product_4)) + (kind2_times(Euler3Rotation_newline__lpar_Roll_rpar__6, Product_5)) + (kind2_times(Euler3Rotation_newline__lpar_Roll_rpar__9, Product_6));
	Product1_9 = (kind2_times(Euler3Rotation_newline__lpar_Roll_rpar__3, Product_7)) + (kind2_times(Euler3Rotation_newline__lpar_Roll_rpar__6, Product_8)) + (kind2_times(Euler3Rotation_newline__lpar_Roll_rpar__9, Product_9));
	DCM321_1 = Product1_1;
	DCM321_2 = Product1_2;
	DCM321_3 = Product1_3;
	DCM321_4 = Product1_4;
	DCM321_5 = Product1_5;
	DCM321_6 = Product1_6;
	DCM321_7 = Product1_7;
	DCM321_8 = Product1_8;
	DCM321_9 = Product1_9;
	Vb_1 = ( (kind2_times(Product1_1, Vi_1)) + (kind2_times(Product1_4, Vi_2)) + (kind2_times(Product1_7, Vi_3)) );
	Vb_2 = ( (kind2_times(Product1_2, Vi_1)) + (kind2_times(Product1_5, Vi_2)) + (kind2_times(Product1_8, Vi_3)) );
	Vb_3 = ( (kind2_times(Product1_3, Vi_1)) + (kind2_times(Product1_6, Vi_2)) + (kind2_times(Product1_9, Vi_3)) );
tel

(*
Original block name: euler321_I2B_12B_with_contracts_ALL_PP
*)
node  euler321_I2B_12B_with_contracts_ALL_PP(
	phi_1 : real; theta_1 : real; psi_1 : real; Vi_1 : real; Vi_2 : real;
	Vi_3 : real;)
returns(
	DCM321_1 : real; DCM321_2 : real; DCM321_3 : real; DCM321_4 : real; DCM321_5 : real;
	DCM321_6 : real; DCM321_7 : real; DCM321_8 : real; DCM321_9 : real; Vb_1 : real;
	Vb_2 : real; Vb_3 : real;);
var 
	COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__1 : real; COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__2 : real; COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__3 : real; COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__4 : real; COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__5 : real;
	COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__6 : real; COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__7 : real; COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__8 : real; COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__9 : real; COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__10 : real;
	COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__11 : real; COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__12 : real; __time_step : real; __nb_step : int;
let
	(COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__1, COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__2, COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__3, COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__4, COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__5, COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__6, COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__7, COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__8, COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__9, COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__10, COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__11, COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__12) = COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__5149_004(phi_1, theta_1, psi_1, Vi_1, Vi_2, Vi_3, __time_step, __nb_step);
	DCM321_1 = COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__1;
	DCM321_2 = COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__2;
	DCM321_3 = COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__3;
	DCM321_4 = COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__4;
	DCM321_5 = COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__5;
	DCM321_6 = COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__6;
	DCM321_7 = COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__7;
	DCM321_8 = COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__8;
	DCM321_9 = COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__9;
	Vb_1 = COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__10;
	Vb_2 = COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__11;
	Vb_3 = COORDINATETRANSFORM_newline_EULER321_newline__lpar_INERTIALTOBODY_rpar__12;
	__time_step = (0.0 -> ((pre (__time_step)) + 0.010));
	__nb_step = (0 -> ((pre (__nb_step)) + 1));
tel

