-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 04-Nov-2019 15:14:50
include "lustrec_math.lus"
node kind2_times(x, y: real) returns (z: real) ;
var abs_x, abs_y, abs_z: real;
let
   abs_x = if x < 0.0 then -x else x ;
    abs_y = if y < 0.0 then -y else y ;
    abs_z = if z < 0.0 then -z else z ;
    -- Neutral.
    assert (z = y) = ((x = 1.0) or (y = 0.0)) ;
    assert (z = x) = ((y = 1.0) or (x = 0.0)) ;
    -- Absorbing.
    assert (z = 0.0) = ( (x = 0.0) or (y = 0.0) ) ;
    -- Sign.
    assert (z > 0.0) = (
      ( (x > 0.0) and (y > 0.0) ) or
      ( (x < 0.0) and (y < 0.0) )
    ) ;
    assert (z < 0.0) = (
      ( (x > 0.0) and (y < 0.0) ) or
      ( (x < 0.0) and (y > 0.0) )
    ) ;
    -- Loose proportionality.
    assert (abs_z >= abs_y) = ((abs_x >= 1.0) or (y = 0.0)) ;
    assert (abs_z >= abs_x) = ((abs_y >= 1.0) or (x = 0.0)) ;
    assert (abs_z <= abs_y) = ((abs_x <= 1.0) or (y = 0.0)) ;
    assert (abs_z <= abs_x) = ((abs_y <= 1.0) or (x = 0.0)) ;
    z = x * y ;
tel
node kind2_divide(num, den: real) returns (res: real) ;
var abs_num, abs_den, abs_res: real;
let
 abs_num = if num < 0.0 then -num else num ;
 abs_den = if den < 0.0 then -den else den ;
 abs_res = if res < 0.0 then -res else res ;
assert not (den = 0.0) ;
-- Neutral.
assert (res = num) = ((den = 1.0) or (num = 0.0)) ;
assert (res = - num) = ((den = - 1.0) or (num = 0.0)) ;
-- Absorbing.
assert (num = 0.0) = (res = 0.0) ;
-- Sign.
assert (res > 0.0) = (
  ( (num > 0.0) and (den > 0.0) ) or
  ( (num < 0.0) and (den < 0.0) )
) ;
assert (res < 0.0) = (
  ( (num > 0.0) and (den < 0.0) ) or
  ( (num < 0.0) and (den > 0.0) )
) ;
-- Loose proportionality.
assert (abs_res >= abs_num) = ((abs_den <= 1.0) or (num = 0.0)) ;
assert (abs_res <= abs_num) = ((abs_den >= 1.0) or (num = 0.0)) ;
-- Annulation.
assert (res = 1.0) = (num = den) ;
assert (res = - 1.0) = (num = - den) ;
  res = num / den ;
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/NLGuidance/DotProduct
*)
node  DotProduct_1148_002(
	In1_1 : real; In1_2 : real; In1_3 : real; In2_1 : real; In2_2 : real;
	In2_3 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
let
	Out1_1 = ( ( kind2_times(kind2_times(1.0, In1_1), In2_1) ) + ( kind2_times(kind2_times(1.0, In1_2), In2_2) ) + ( kind2_times(kind2_times(1.0, In1_3), In2_3) ) );
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/NLGuidance/Inner/Act1
*)
node  Act1_60_001(
	cmd1_1 : real; cmd1_2 : real; cmd1_3 : real; __time_step : real; __nb_step : int;)
returns(
	yout_1 : real; yout_2 : real; yout_3 : real;);
let
	yout_1 = cmd1_1;
	yout_2 = cmd1_2;
	yout_3 = cmd1_3;
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/NLGuidance/Inner/Act1
*)
node  Act1_60_001_condExecSS(
	cmd1_1 : real; cmd1_2 : real; cmd1_3 : real; _isEnabled : bool; __time_step : real;
	__nb_step : int;)
returns(
	yout_1 : real; yout_2 : real; yout_3 : real;);
var 
	pre_yout_1 : real; pre_yout_2 : real; pre_yout_3 : real;
let
	pre_yout_1 = if (__nb_step > 0) then
		(pre (yout_1))
	    else 0.0;
	pre_yout_2 = if (__nb_step > 0) then
		(pre (yout_2))
	    else 0.0;
	pre_yout_3 = if (__nb_step > 0) then
		(pre (yout_3))
	    else 0.0;
	(yout_1, yout_2, yout_3) = merge(_isEnabled;
		 (activate Act1_60_001 every _isEnabled)(cmd1_1, cmd1_2, cmd1_3, __time_step, __nb_step); 
		(pre_yout_1, pre_yout_2, pre_yout_3) when not(_isEnabled));
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/NLGuidance/Inner/Act2
*)
node  Act2_65_001(
	cmd2_1 : real; cmd2_2 : real; cmd2_3 : real; __time_step : real; __nb_step : int;)
returns(
	yout_1 : real; yout_2 : real; yout_3 : real;);
let
	yout_1 = cmd2_1;
	yout_2 = cmd2_2;
	yout_3 = cmd2_3;
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/NLGuidance/Inner/Act2
*)
node  Act2_65_001_condExecSS(
	cmd2_1 : real; cmd2_2 : real; cmd2_3 : real; _isEnabled : bool; __time_step : real;
	__nb_step : int;)
returns(
	yout_1 : real; yout_2 : real; yout_3 : real;);
var 
	pre_yout_1 : real; pre_yout_2 : real; pre_yout_3 : real;
let
	pre_yout_1 = if (__nb_step > 0) then
		(pre (yout_1))
	    else 0.0;
	pre_yout_2 = if (__nb_step > 0) then
		(pre (yout_2))
	    else 0.0;
	pre_yout_3 = if (__nb_step > 0) then
		(pre (yout_3))
	    else 0.0;
	(yout_1, yout_2, yout_3) = merge(_isEnabled;
		 (activate Act2_65_001 every _isEnabled)(cmd2_1, cmd2_2, cmd2_3, __time_step, __nb_step); 
		(pre_yout_1, pre_yout_2, pre_yout_3) when not(_isEnabled));
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/NLGuidance/Inner/Arg1
*)
node  Arg1_70_001(
	k_1 : real; Xr_1 : real; Xr_2 : real; Xr_3 : real; Xtarg_1 : real;
	Xtarg_2 : real; Xtarg_3 : real; Xv_1 : real; Xv_2 : real; Xv_3 : real;
	__time_step : real; __nb_step : int;)
returns(
	Out_1 : real; Out_2 : real; Out_3 : real; cmd1_1 : real; cmd1_2 : real;
	cmd1_3 : real;);
var 
	Demux_2 : real; Demux_3 : real; Demux1_2 : real; Demux1_3 : real; Demux2_1 : real;
	Demux2_3 : real; Demux3_1 : real; Demux3_3 : real; Mux_1 : real; Mux_2 : real;
	Mux_3 : real;
let
	Demux_2 = Xr_2;
	Demux_3 = Xr_3;
	Demux1_2 = Xtarg_2;
	Demux1_3 = Xtarg_3;
	Demux2_1 = Xr_1;
	Demux2_3 = Xr_3;
	Demux3_1 = Xtarg_1;
	Demux3_3 = Xtarg_3;
	Mux_1 = ( Xtarg_1 + ( kind2_times(kind2_times(1.0, k_1), Xr_1) ) );
	Mux_2 = ( Xtarg_2 + ( kind2_times(kind2_times(1.0, Xr_2), k_1) ) );
	Mux_3 = 0.0;
	Out_1 = ( Mux_1 - Xv_1 );
	Out_2 = ( Mux_2 - Xv_2 );
	Out_3 = ( Mux_3 - Xv_3 );
	cmd1_1 = Mux_1;
	cmd1_2 = Mux_2;
	cmd1_3 = Mux_3;
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/NLGuidance/Inner/Arg2
*)
node  Arg2_139_001(
	nk_1 : real; Xr_1 : real; Xr_2 : real; Xr_3 : real; Xtarg_1 : real;
	Xtarg_2 : real; Xtarg_3 : real; Xv_1 : real; Xv_2 : real; Xv_3 : real;
	__time_step : real; __nb_step : int;)
returns(
	Out_1 : real; Out_2 : real; Out_3 : real; cmd2_1 : real; cmd2_2 : real;
	cmd2_3 : real;);
var 
	Demux_2 : real; Demux_3 : real; Demux1_2 : real; Demux1_3 : real; Demux2_1 : real;
	Demux2_3 : real; Demux3_1 : real; Demux3_3 : real; Mux_1 : real; Mux_2 : real;
	Mux_3 : real;
let
	Demux_2 = Xr_2;
	Demux_3 = Xr_3;
	Demux1_2 = Xtarg_2;
	Demux1_3 = Xtarg_3;
	Demux2_1 = Xr_1;
	Demux2_3 = Xr_3;
	Demux3_1 = Xtarg_1;
	Demux3_3 = Xtarg_3;
	Mux_1 = ( Xtarg_1 + ( kind2_times(kind2_times(1.0, nk_1), Xr_1) ) );
	Mux_2 = ( Xtarg_2 + ( kind2_times(kind2_times(1.0, Xr_2), nk_1) ) );
	Mux_3 = 0.0;
	Out_1 = ( Mux_1 - Xv_1 );
	Out_2 = ( Mux_2 - Xv_2 );
	Out_3 = ( Mux_3 - Xv_3 );
	cmd2_1 = Mux_1;
	cmd2_2 = Mux_2;
	cmd2_3 = Mux_3;
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/NLGuidance/Inner/norm
*)
node  norm_237_001(
	In_1 : real; In_2 : real; In_3 : real; __time_step : real; __nb_step : int;)
returns(
	Out_1 : real;);
var 
	Math_newline_Function1_1 : real;
let
	Math_newline_Function1_1 = sqrt(( (kind2_times(In_1, In_1)) ) + ( (kind2_times(In_2, In_2)) ) + ( (kind2_times(In_3, In_3)) ));
	Out_1 = Math_newline_Function1_1;
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/NLGuidance/Inner/norm1
*)
node  norm1_247_001(
	In_1 : real; In_2 : real; In_3 : real; __time_step : real; __nb_step : int;)
returns(
	Out_1 : real;);
var 
	Math_newline_Function1_1 : real;
let
	Math_newline_Function1_1 = sqrt(( (kind2_times(In_1, In_1)) ) + ( (kind2_times(In_2, In_2)) ) + ( (kind2_times(In_3, In_3)) ));
	Out_1 = Math_newline_Function1_1;
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/NLGuidance/Inner
*)
node  Inner_53_001(
	r_1 : real; XrMag_1 : real; Xr_1 : real; Xr_2 : real; Xr_3 : real;
	Xtarg_1 : real; Xtarg_2 : real; Xtarg_3 : real; Xv_1 : real; Xv_2 : real;
	Xv_3 : real; __time_step : real; __nb_step : int;)
returns(
	yout_1 : real; yout_2 : real; yout_3 : real; r1_1 : real; r1_2 : real;
	r1_3 : real; r2_1 : real; r2_2 : real; r2_3 : real; Xap1_1 : real;
	Xap1_2 : real; Xap1_3 : real; Xap2_1 : real; Xap2_2 : real; Xap2_3 : real;);
var 
	ExecutionCond_of_Act1_60_001 : bool; Act1_1 : real; Act1_2 : real; Act1_3 : real; ExecutionCond_of_Act2_65_001 : bool;
	Act2_1 : real; Act2_2 : real; Act2_3 : real; Arg1_1 : real; Arg1_2 : real;
	Arg1_3 : real; Arg1_4 : real; Arg1_5 : real; Arg1_6 : real; Arg2_1 : real;
	Arg2_2 : real; Arg2_3 : real; Arg2_4 : real; Arg2_5 : real; Arg2_6 : real;
	Divide_1 : real; If_1 : bool; If_2 : bool; Merge_1 : real; Merge_2 : real;
	Merge_3 : real; norm_1 : real; norm1_1 : real;
let
	ExecutionCond_of_Act1_60_001 = If_1;
	(Act1_1, Act1_2, Act1_3) = Act1_60_001_condExecSS(Arg1_4, Arg1_5, Arg1_6, ExecutionCond_of_Act1_60_001, __time_step, __nb_step);
	ExecutionCond_of_Act2_65_001 = If_2;
	(Act2_1, Act2_2, Act2_3) = Act2_65_001_condExecSS(Arg2_4, Arg2_5, Arg2_6, ExecutionCond_of_Act2_65_001, __time_step, __nb_step);
	(Arg1_1, Arg1_2, Arg1_3, Arg1_4, Arg1_5, Arg1_6) = Arg1_70_001(Divide_1, Xr_1, Xr_2, Xr_3, Xtarg_1, Xtarg_2, Xtarg_3, Xv_1, Xv_2, Xv_3, __time_step, __nb_step);
	(Arg2_1, Arg2_2, Arg2_3, Arg2_4, Arg2_5, Arg2_6) = Arg2_139_001((kind2_times(Divide_1, -1.0)), Xr_1, Xr_2, Xr_3, Xtarg_1, Xtarg_2, Xtarg_3, Xv_1, Xv_2, Xv_3, __time_step, __nb_step);
	Divide_1 = kind2_divide(kind2_times(1.0, r_1), XrMag_1);
	(If_1, If_2) = if ( (norm_1 < norm1_1) ) then
		(true, false)
	    else (false, true);
	Merge_1 = if ExecutionCond_of_Act1_60_001 then
		Act1_1
	    else if ExecutionCond_of_Act2_65_001 then
		Act2_1
	    else (0.0 -> (pre (Merge_1)));
	Merge_2 = if ExecutionCond_of_Act1_60_001 then
		Act1_2
	    else if ExecutionCond_of_Act2_65_001 then
		Act2_2
	    else (0.0 -> (pre (Merge_2)));
	Merge_3 = if ExecutionCond_of_Act1_60_001 then
		Act1_3
	    else if ExecutionCond_of_Act2_65_001 then
		Act2_3
	    else (0.0 -> (pre (Merge_3)));
	norm_1 = norm_237_001(Arg1_1, Arg1_2, Arg1_3, __time_step, __nb_step);
	norm1_1 = norm1_247_001(Arg2_1, Arg2_2, Arg2_3, __time_step, __nb_step);
	yout_1 = Merge_1;
	yout_2 = Merge_2;
	yout_3 = Merge_3;
	r1_1 = Arg1_1;
	r1_2 = Arg1_2;
	r1_3 = Arg1_3;
	r2_1 = Arg2_1;
	r2_2 = Arg2_2;
	r2_3 = Arg2_3;
	Xap1_1 = Arg1_4;
	Xap1_2 = Arg1_5;
	Xap1_3 = Arg1_6;
	Xap2_1 = Arg2_4;
	Xap2_2 = Arg2_5;
	Xap2_3 = Arg2_6;
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/NLGuidance/Inner
*)
node  Inner_53_001_condExecSS(
	r_1 : real; XrMag_1 : real; Xr_1 : real; Xr_2 : real; Xr_3 : real;
	Xtarg_1 : real; Xtarg_2 : real; Xtarg_3 : real; Xv_1 : real; Xv_2 : real;
	Xv_3 : real; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	yout_1 : real; yout_2 : real; yout_3 : real; r1_1 : real; r1_2 : real;
	r1_3 : real; r2_1 : real; r2_2 : real; r2_3 : real; Xap1_1 : real;
	Xap1_2 : real; Xap1_3 : real; Xap2_1 : real; Xap2_2 : real; Xap2_3 : real;);
var 
	pre_yout_1 : real; pre_yout_2 : real; pre_yout_3 : real; pre_r1_1 : real; pre_r1_2 : real;
	pre_r1_3 : real; pre_r2_1 : real; pre_r2_2 : real; pre_r2_3 : real; pre_Xap1_1 : real;
	pre_Xap1_2 : real; pre_Xap1_3 : real; pre_Xap2_1 : real; pre_Xap2_2 : real; pre_Xap2_3 : real;
let
	pre_yout_1 = if (__nb_step > 0) then
		(pre (yout_1))
	    else 0.0;
	pre_yout_2 = if (__nb_step > 0) then
		(pre (yout_2))
	    else 0.0;
	pre_yout_3 = if (__nb_step > 0) then
		(pre (yout_3))
	    else 0.0;
	pre_r1_1 = if (__nb_step > 0) then
		(pre (r1_1))
	    else 0.0;
	pre_r1_2 = if (__nb_step > 0) then
		(pre (r1_2))
	    else 0.0;
	pre_r1_3 = if (__nb_step > 0) then
		(pre (r1_3))
	    else 0.0;
	pre_r2_1 = if (__nb_step > 0) then
		(pre (r2_1))
	    else 0.0;
	pre_r2_2 = if (__nb_step > 0) then
		(pre (r2_2))
	    else 0.0;
	pre_r2_3 = if (__nb_step > 0) then
		(pre (r2_3))
	    else 0.0;
	pre_Xap1_1 = if (__nb_step > 0) then
		(pre (Xap1_1))
	    else 0.0;
	pre_Xap1_2 = if (__nb_step > 0) then
		(pre (Xap1_2))
	    else 0.0;
	pre_Xap1_3 = if (__nb_step > 0) then
		(pre (Xap1_3))
	    else 0.0;
	pre_Xap2_1 = if (__nb_step > 0) then
		(pre (Xap2_1))
	    else 0.0;
	pre_Xap2_2 = if (__nb_step > 0) then
		(pre (Xap2_2))
	    else 0.0;
	pre_Xap2_3 = if (__nb_step > 0) then
		(pre (Xap2_3))
	    else 0.0;
	(yout_1, yout_2, yout_3, r1_1, r1_2, r1_3, r2_1, r2_2, r2_3, Xap1_1, Xap1_2, Xap1_3, Xap2_1, Xap2_2, Xap2_3) = merge(_isEnabled;
		 (activate Inner_53_001 every _isEnabled)(r_1, XrMag_1, Xr_1, Xr_2, Xr_3, Xtarg_1, Xtarg_2, Xtarg_3, Xv_1, Xv_2, Xv_3, __time_step, __nb_step); 
		(pre_yout_1, pre_yout_2, pre_yout_3, pre_r1_1, pre_r1_2, pre_r1_3, pre_r2_1, pre_r2_2, pre_r2_3, pre_Xap1_1, pre_Xap1_2, pre_Xap1_3, pre_Xap2_1, pre_Xap2_2, pre_Xap2_3) when not(_isEnabled));
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/NLGuidance/Outer/CCW
*)
node  CCW_328_001(
	Xap1_1 : real; Xap1_2 : real; Xap1_3 : real; __time_step : real; __nb_step : int;)
returns(
	yout_1 : real; yout_2 : real; yout_3 : real;);
let
	yout_1 = Xap1_1;
	yout_2 = Xap1_2;
	yout_3 = Xap1_3;
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/NLGuidance/Outer/CCW
*)
node  CCW_328_001_condExecSS(
	Xap1_1 : real; Xap1_2 : real; Xap1_3 : real; _isEnabled : bool; __time_step : real;
	__nb_step : int;)
returns(
	yout_1 : real; yout_2 : real; yout_3 : real;);
var 
	pre_yout_1 : real; pre_yout_2 : real; pre_yout_3 : real;
let
	pre_yout_1 = if (__nb_step > 0) then
		(pre (yout_1))
	    else 0.0;
	pre_yout_2 = if (__nb_step > 0) then
		(pre (yout_2))
	    else 0.0;
	pre_yout_3 = if (__nb_step > 0) then
		(pre (yout_3))
	    else 0.0;
	(yout_1, yout_2, yout_3) = merge(_isEnabled;
		 (activate CCW_328_001 every _isEnabled)(Xap1_1, Xap1_2, Xap1_3, __time_step, __nb_step); 
		(pre_yout_1, pre_yout_2, pre_yout_3) when not(_isEnabled));
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/NLGuidance/Outer/CW
*)
node  CW_333_001(
	Xap1_1 : real; Xap1_2 : real; Xap1_3 : real; __time_step : real; __nb_step : int;)
returns(
	yout_1 : real; yout_2 : real; yout_3 : real;);
let
	yout_1 = Xap1_1;
	yout_2 = Xap1_2;
	yout_3 = Xap1_3;
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/NLGuidance/Outer/CW
*)
node  CW_333_001_condExecSS(
	Xap1_1 : real; Xap1_2 : real; Xap1_3 : real; _isEnabled : bool; __time_step : real;
	__nb_step : int;)
returns(
	yout_1 : real; yout_2 : real; yout_3 : real;);
var 
	pre_yout_1 : real; pre_yout_2 : real; pre_yout_3 : real;
let
	pre_yout_1 = if (__nb_step > 0) then
		(pre (yout_1))
	    else 0.0;
	pre_yout_2 = if (__nb_step > 0) then
		(pre (yout_2))
	    else 0.0;
	pre_yout_3 = if (__nb_step > 0) then
		(pre (yout_3))
	    else 0.0;
	(yout_1, yout_2, yout_3) = merge(_isEnabled;
		 (activate CW_333_001 every _isEnabled)(Xap1_1, Xap1_2, Xap1_3, __time_step, __nb_step); 
		(pre_yout_1, pre_yout_2, pre_yout_3) when not(_isEnabled));
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/NLGuidance/Outer/cross/Subsystem1
*)
node  Subsystem1_405_001(
	A1_1 : real; A1_2 : real; A1_3 : real; B1_1 : real; B1_2 : real;
	B1_3 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real;);
let
	Out1_1 = ( kind2_times(kind2_times(1.0, A1_2), B1_3) );
	Out1_2 = ( kind2_times(kind2_times(1.0, A1_3), B1_1) );
	Out1_3 = ( kind2_times(kind2_times(1.0, A1_1), B1_2) );
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/NLGuidance/Outer/cross/Subsystem2
*)
node  Subsystem2_427_001(
	A1_1 : real; A1_2 : real; A1_3 : real; B1_1 : real; B1_2 : real;
	B1_3 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real; Out1_2 : real; Out1_3 : real;);
let
	Out1_1 = ( kind2_times(kind2_times(1.0, A1_2), B1_3) );
	Out1_2 = ( kind2_times(kind2_times(1.0, A1_3), B1_1) );
	Out1_3 = ( kind2_times(kind2_times(1.0, A1_1), B1_2) );
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/NLGuidance/Outer/cross
*)
node  cross_400_001(
	A_1 : real; A_2 : real; A_3 : real; B_1 : real; B_2 : real;
	B_3 : real; __time_step : real; __nb_step : int;)
returns(
	C_1 : real; C_2 : real; C_3 : real;);
var 
	Subsystem1_1 : real; Subsystem1_2 : real; Subsystem1_3 : real; Subsystem2_1 : real; Subsystem2_2 : real;
	Subsystem2_3 : real;
let
	(Subsystem1_1, Subsystem1_2, Subsystem1_3) = Subsystem1_405_001(A_1, A_2, A_3, B_1, B_2, B_3, __time_step, __nb_step);
	(Subsystem2_1, Subsystem2_2, Subsystem2_3) = Subsystem2_427_001(A_1, A_2, A_3, B_1, B_2, B_3, __time_step, __nb_step);
	C_1 = ( Subsystem2_1 - Subsystem1_1 );
	C_2 = ( Subsystem2_2 - Subsystem1_2 );
	C_3 = ( Subsystem2_3 - Subsystem1_3 );
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/NLGuidance/Outer/r_computation
*)
node  r_computation_458_001(
	r_1 : real; c_1 : real; XrDotVv_1 : real; Xr_1 : real; Xr_2 : real;
	Xr_3 : real; XrMag_1 : real; Vv_1 : real; Vv_2 : real; Vv_3 : real;
	__time_step : real; __nb_step : int;)
returns(
	r1_1 : real; r1_2 : real; r1_3 : real; r2_1 : real; r2_2 : real;
	r2_3 : real;);
var 
	Divide4_1 : real; Gain2_1 : real; Product2_1 : real; Product7_1 : real; Product7_2 : real;
	Product7_3 : real; Sum4_1 : real; Sum5_1 : real;
let
	Divide4_1 = kind2_divide(1.0, ( (kind2_times(XrMag_1, XrMag_1)) ));
	Gain2_1 = (kind2_times(Divide4_1, -1.0));
	Product2_1 = kind2_times(kind2_times(1.0, c_1), XrDotVv_1);
	Product7_1 = kind2_times(kind2_times(1.0, c_1), Vv_1);
	Product7_2 = kind2_times(kind2_times(1.0, c_1), Vv_2);
	Product7_3 = kind2_times(kind2_times(1.0, c_1), Vv_3);
	Sum4_1 = r_1 + Product2_1;
	Sum5_1 = Product2_1 - r_1;
	r1_1 = ( Xr_1 + ( kind2_times(kind2_times(1.0, ( ( kind2_times(kind2_times(1.0, ( kind2_times(kind2_times(1.0, Sum4_1), Xr_1) )), Gain2_1) ) + Product7_1 )), r_1) ) );
	r1_2 = ( Xr_2 + ( kind2_times(kind2_times(1.0, ( ( kind2_times(kind2_times(1.0, ( kind2_times(kind2_times(1.0, Sum4_1), Xr_2) )), Gain2_1) ) + Product7_2 )), r_1) ) );
	r1_3 = ( Xr_3 + ( kind2_times(kind2_times(1.0, ( ( kind2_times(kind2_times(1.0, ( kind2_times(kind2_times(1.0, Sum4_1), Xr_3) )), Gain2_1) ) + Product7_3 )), r_1) ) );
	r2_1 = ( ( kind2_times(kind2_times(1.0, r_1), ( 0.0 - Product7_1 + ( kind2_times(kind2_times(1.0, Divide4_1), ( kind2_times(kind2_times(1.0, Sum5_1), Xr_1) )) ) )) ) + Xr_1 );
	r2_2 = ( ( kind2_times(kind2_times(1.0, r_1), ( 0.0 - Product7_2 + ( kind2_times(kind2_times(1.0, Divide4_1), ( kind2_times(kind2_times(1.0, Sum5_1), Xr_2) )) ) )) ) + Xr_2 );
	r2_3 = ( ( kind2_times(kind2_times(1.0, r_1), ( 0.0 - Product7_3 + ( kind2_times(kind2_times(1.0, Divide4_1), ( kind2_times(kind2_times(1.0, Sum5_1), Xr_3) )) ) )) ) + Xr_3 );
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/NLGuidance/Outer
*)
node  Outer_316_001(
	r_1 : real; XrMag_1 : real; Xr_1 : real; Xr_2 : real; Xr_3 : real;
	Xtarg_1 : real; Xtarg_2 : real; Xtarg_3 : real; Xv_1 : real; Xv_2 : real;
	Xv_3 : real; VvMag_1 : real; cnum_1 : real; cden_1 : real; XrDotVv_1 : real;
	Vv_1 : real; Vv_2 : real; Vv_3 : real; __time_step : real; __nb_step : int;)
returns(
	yout_1 : real; yout_2 : real; yout_3 : real; r1_1 : real; r1_2 : real;
	r1_3 : real; r2_1 : real; r2_2 : real; r2_3 : real; Xap1_1 : real;
	Xap1_2 : real; Xap1_3 : real; Xap2_1 : real; Xap2_2 : real; Xap2_3 : real;);
var 
	ExecutionCond_of_CCW_328_001 : bool; CCW_1 : real; CCW_2 : real; CCW_3 : real; ExecutionCond_of_CW_333_001 : bool;
	CW_1 : real; CW_2 : real; CW_3 : real; Divide2_1 : real; Divide3_1 : real;
	Gain_1 : real; Gain1_1 : real; If_1 : bool; If_2 : bool; Merge_1 : real;
	Merge_2 : real; Merge_3 : real; Sqrt_1 : real; Sum4_1 : real; Sum4_2 : real;
	Sum4_3 : real; Sum8_1 : real; Sum8_2 : real; Sum8_3 : real; cross_1 : real;
	cross_2 : real; cross_3 : real; r_computation_1 : real; r_computation_2 : real; r_computation_3 : real;
	r_computation_4 : real; r_computation_5 : real; r_computation_6 : real;
let
	ExecutionCond_of_CCW_328_001 = If_2;
	(CCW_1, CCW_2, CCW_3) = CCW_328_001_condExecSS(Sum4_1, Sum4_2, Sum4_3, ExecutionCond_of_CCW_328_001, __time_step, __nb_step);
	ExecutionCond_of_CW_333_001 = If_1;
	(CW_1, CW_2, CW_3) = CW_333_001_condExecSS(Sum8_1, Sum8_2, Sum8_3, ExecutionCond_of_CW_333_001, __time_step, __nb_step);
	Divide2_1 = kind2_divide(kind2_times(1.0, XrDotVv_1), ( ( (kind2_times(XrMag_1, XrMag_1)) ) - ( (kind2_times(r_1, r_1)) ) ));
	Divide3_1 = kind2_divide(1.0, ( kind2_times(kind2_times(1.0, Sqrt_1), r_1) ));
	Gain_1 = (kind2_times(( Divide2_1 + Divide3_1 ), 0.50));
	Gain1_1 = (kind2_times(( Divide2_1 - Divide3_1 ), 0.50));
	(If_1, If_2) = if ( (cross_3 < 0.0) ) then
		(true, false)
	    else (false, true);
	Merge_1 = if ExecutionCond_of_CW_333_001 then
		CW_1
	    else if ExecutionCond_of_CCW_328_001 then
		CCW_1
	    else (0.0 -> (pre (Merge_1)));
	Merge_2 = if ExecutionCond_of_CW_333_001 then
		CW_2
	    else if ExecutionCond_of_CCW_328_001 then
		CCW_2
	    else (0.0 -> (pre (Merge_2)));
	Merge_3 = if ExecutionCond_of_CW_333_001 then
		CW_3
	    else if ExecutionCond_of_CCW_328_001 then
		CCW_3
	    else (0.0 -> (pre (Merge_3)));
	Sqrt_1 = sqrt(kind2_divide(kind2_times(1.0, cnum_1), cden_1));
	Sum4_1 = r_computation_4 + Xv_1;
	Sum4_2 = r_computation_5 + Xv_2;
	Sum4_3 = r_computation_6 + Xv_3;
	Sum8_1 = Xv_1 + r_computation_1;
	Sum8_2 = Xv_2 + r_computation_2;
	Sum8_3 = Xv_3 + r_computation_3;
	(cross_1, cross_2, cross_3) = cross_400_001(Xr_1, Xr_2, Xr_3, r_computation_1, r_computation_2, r_computation_3, __time_step, __nb_step);
	(r_computation_1, r_computation_2, r_computation_3, r_computation_4, r_computation_5, r_computation_6) = r_computation_458_001(r_1, Sqrt_1, XrDotVv_1, Xr_1, Xr_2, Xr_3, XrMag_1, Vv_1, Vv_2, Vv_3, __time_step, __nb_step);
	yout_1 = Merge_1;
	yout_2 = Merge_2;
	yout_3 = Merge_3;
	r1_1 = r_computation_1;
	r1_2 = r_computation_2;
	r1_3 = r_computation_3;
	r2_1 = r_computation_4;
	r2_2 = r_computation_5;
	r2_3 = r_computation_6;
	Xap1_1 = Sum8_1;
	Xap1_2 = Sum8_2;
	Xap1_3 = Sum8_3;
	Xap2_1 = Sum4_1;
	Xap2_2 = Sum4_2;
	Xap2_3 = Sum4_3;
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/NLGuidance/Outer
*)
node  Outer_316_001_condExecSS(
	r_1 : real; XrMag_1 : real; Xr_1 : real; Xr_2 : real; Xr_3 : real;
	Xtarg_1 : real; Xtarg_2 : real; Xtarg_3 : real; Xv_1 : real; Xv_2 : real;
	Xv_3 : real; VvMag_1 : real; cnum_1 : real; cden_1 : real; XrDotVv_1 : real;
	Vv_1 : real; Vv_2 : real; Vv_3 : real; _isEnabled : bool; __time_step : real;
	__nb_step : int;)
returns(
	yout_1 : real; yout_2 : real; yout_3 : real; r1_1 : real; r1_2 : real;
	r1_3 : real; r2_1 : real; r2_2 : real; r2_3 : real; Xap1_1 : real;
	Xap1_2 : real; Xap1_3 : real; Xap2_1 : real; Xap2_2 : real; Xap2_3 : real;);
var 
	pre_yout_1 : real; pre_yout_2 : real; pre_yout_3 : real; pre_r1_1 : real; pre_r1_2 : real;
	pre_r1_3 : real; pre_r2_1 : real; pre_r2_2 : real; pre_r2_3 : real; pre_Xap1_1 : real;
	pre_Xap1_2 : real; pre_Xap1_3 : real; pre_Xap2_1 : real; pre_Xap2_2 : real; pre_Xap2_3 : real;
let
	pre_yout_1 = if (__nb_step > 0) then
		(pre (yout_1))
	    else 0.0;
	pre_yout_2 = if (__nb_step > 0) then
		(pre (yout_2))
	    else 0.0;
	pre_yout_3 = if (__nb_step > 0) then
		(pre (yout_3))
	    else 0.0;
	pre_r1_1 = if (__nb_step > 0) then
		(pre (r1_1))
	    else 0.0;
	pre_r1_2 = if (__nb_step > 0) then
		(pre (r1_2))
	    else 0.0;
	pre_r1_3 = if (__nb_step > 0) then
		(pre (r1_3))
	    else 0.0;
	pre_r2_1 = if (__nb_step > 0) then
		(pre (r2_1))
	    else 0.0;
	pre_r2_2 = if (__nb_step > 0) then
		(pre (r2_2))
	    else 0.0;
	pre_r2_3 = if (__nb_step > 0) then
		(pre (r2_3))
	    else 0.0;
	pre_Xap1_1 = if (__nb_step > 0) then
		(pre (Xap1_1))
	    else 0.0;
	pre_Xap1_2 = if (__nb_step > 0) then
		(pre (Xap1_2))
	    else 0.0;
	pre_Xap1_3 = if (__nb_step > 0) then
		(pre (Xap1_3))
	    else 0.0;
	pre_Xap2_1 = if (__nb_step > 0) then
		(pre (Xap2_1))
	    else 0.0;
	pre_Xap2_2 = if (__nb_step > 0) then
		(pre (Xap2_2))
	    else 0.0;
	pre_Xap2_3 = if (__nb_step > 0) then
		(pre (Xap2_3))
	    else 0.0;
	(yout_1, yout_2, yout_3, r1_1, r1_2, r1_3, r2_1, r2_2, r2_3, Xap1_1, Xap1_2, Xap1_3, Xap2_1, Xap2_2, Xap2_3) = merge(_isEnabled;
		 (activate Outer_316_001 every _isEnabled)(r_1, XrMag_1, Xr_1, Xr_2, Xr_3, Xtarg_1, Xtarg_2, Xtarg_3, Xv_1, Xv_2, Xv_3, VvMag_1, cnum_1, cden_1, XrDotVv_1, Vv_1, Vv_2, Vv_3, __time_step, __nb_step); 
		(pre_yout_1, pre_yout_2, pre_yout_3, pre_r1_1, pre_r1_2, pre_r1_3, pre_r2_1, pre_r2_2, pre_r2_3, pre_Xap1_1, pre_Xap1_2, pre_Xap1_3, pre_Xap2_1, pre_Xap2_2, pre_Xap2_3) when not(_isEnabled));
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/NLGuidance/norm1
*)
node  norm1_629_002(
	In_1 : real; In_2 : real; In_3 : real; __time_step : real; __nb_step : int;)
returns(
	Out_1 : real;);
var 
	Math_newline_Function1_1 : real;
let
	Math_newline_Function1_1 = sqrt(( (kind2_times(In_1, In_1)) ) + ( (kind2_times(In_2, In_2)) ) + ( (kind2_times(In_3, In_3)) ));
	Out_1 = Math_newline_Function1_1;
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/NLGuidance/norm2
*)
node  norm2_639_002(
	In_1 : real; In_2 : real; In_3 : real; __time_step : real; __nb_step : int;)
returns(
	Out_1 : real;);
var 
	Math_newline_Function1_1 : real;
let
	Math_newline_Function1_1 = sqrt(( (kind2_times(In_1, In_1)) ) + ( (kind2_times(In_2, In_2)) ) + ( (kind2_times(In_3, In_3)) ));
	Out_1 = Math_newline_Function1_1;
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/contract/NLG002_NLG003/Compare
To Zero
*)
node  Compare_newline_ToZero_771_002(
	u_1 : real; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool;);
let
	y_1 = ( (u_1 = 0.0) );
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/contract/NLG002_NLG003/DotProduct
*)
node  DotProduct_772_002(
	In1_1 : real; In1_2 : real; In1_3 : real; In2_1 : real; In2_2 : real;
	In2_3 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
let
	Out1_1 = ( ( kind2_times(kind2_times(1.0, In1_1), In2_1) ) + ( kind2_times(kind2_times(1.0, In1_2), In2_2) ) + ( kind2_times(kind2_times(1.0, In1_3), In2_3) ) );
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/contract/NLG002_NLG003/norm1
*)
node  norm1_777_002(
	In_1 : real; In_2 : real; In_3 : real; __time_step : real; __nb_step : int;)
returns(
	Out_1 : real;);
var 
	Math_newline_Function1_1 : real;
let
	Math_newline_Function1_1 = sqrt(( (kind2_times(In_1, In_1)) ) + ( (kind2_times(In_2, In_2)) ) + ( (kind2_times(In_3, In_3)) ));
	Out_1 = Math_newline_Function1_1;
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/contract/NLG002_NLG003
*)
node  NLG002_NLG003_766_002(
	yout_1 : real; yout_2 : real; yout_3 : real; Xtarg_1 : real; Xtarg_2 : real;
	Xtarg_3 : real; r_1 : real; Xv_1 : real; Xv_2 : real; Xv_3 : real;
	__time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
var 
	Compare_newline_ToZero_1 : bool; DotProduct_1 : real; Sum_1 : real; Sum_2 : real; Sum_3 : real;
	norm1_1 : real;
let
	Compare_newline_ToZero_1 = Compare_newline_ToZero_771_002(DotProduct_1, __time_step, __nb_step);
	DotProduct_1 = DotProduct_772_002(Sum_1, Sum_2, Sum_3, yout_1 - Xv_1, yout_2 - Xv_2, yout_3 - Xv_3, __time_step, __nb_step);
	Sum_1 = yout_1 - Xtarg_1;
	Sum_2 = yout_2 - Xtarg_2;
	Sum_3 = yout_3 - Xtarg_3;
	norm1_1 = norm1_777_002(Sum_1, Sum_2, Sum_3, __time_step, __nb_step);
	guarantee_1 = ( ( (norm1_1 >= r_1) ) and Compare_newline_ToZero_1 );
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/contract/NLG004/Compare
To Zero
*)
node  Compare_newline_ToZero_806_002(
	u_1 : real; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool;);
let
	y_1 = ( (u_1 > 0.0) );
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/contract/NLG004/DotProduct
*)
node  DotProduct_807_002(
	In1_1 : real; In1_2 : real; In1_3 : real; In2_1 : real; In2_2 : real;
	In2_3 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
let
	Out1_1 = ( ( kind2_times(kind2_times(1.0, In1_1), In2_1) ) + ( kind2_times(kind2_times(1.0, In1_2), In2_2) ) + ( kind2_times(kind2_times(1.0, In1_3), In2_3) ) );
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/contract/NLG004
*)
node  NLG004_803_002(
	yout_1 : real; yout_2 : real; yout_3 : real; Xr_1 : real; Xr_2 : real;
	Xr_3 : real; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
var 
	Compare_newline_ToZero_1 : bool; DotProduct_1 : real;
let
	Compare_newline_ToZero_1 = Compare_newline_ToZero_806_002(DotProduct_1, __time_step, __nb_step);
	DotProduct_1 = DotProduct_807_002(yout_1, yout_2, yout_3, Xr_1, Xr_2, Xr_3, __time_step, __nb_step);
	guarantee_1 = Compare_newline_ToZero_1;
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/contract/NLG005/Implies
*)
node  Implies_821_002(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
let
	A_equal__equal__gt_B_1 = ( ( (not (A_1)) ) or B_1 );
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/contract/NLG005/norm
*)
node  norm_827_002(
	In_1 : real; In_2 : real; In_3 : real; __time_step : real; __nb_step : int;)
returns(
	Out_1 : real;);
var 
	Math_newline_Function1_1 : real;
let
	Math_newline_Function1_1 = sqrt(( (kind2_times(In_1, In_1)) ) + ( (kind2_times(In_2, In_2)) ) + ( (kind2_times(In_3, In_3)) ));
	Out_1 = Math_newline_Function1_1;
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/contract/NLG005/norm1
*)
node  norm1_837_002(
	In_1 : real; In_2 : real; In_3 : real; __time_step : real; __nb_step : int;)
returns(
	Out_1 : real;);
var 
	Math_newline_Function1_1 : real;
let
	Math_newline_Function1_1 = sqrt(( (kind2_times(In_1, In_1)) ) + ( (kind2_times(In_2, In_2)) ) + ( (kind2_times(In_3, In_3)) ));
	Out_1 = Math_newline_Function1_1;
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/contract/NLG005/norm2
*)
node  norm2_847_002(
	In_1 : real; In_2 : real; In_3 : real; __time_step : real; __nb_step : int;)
returns(
	Out_1 : real;);
var 
	Math_newline_Function1_1 : real;
let
	Math_newline_Function1_1 = sqrt(( (kind2_times(In_1, In_1)) ) + ( (kind2_times(In_2, In_2)) ) + ( (kind2_times(In_3, In_3)) ));
	Out_1 = Math_newline_Function1_1;
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/contract/NLG005
*)
node  NLG005_813_002(
	r1_1 : real; r1_2 : real; r1_3 : real; r2_1 : real; r2_2 : real;
	r2_3 : real; Xap1_1 : real; Xap1_2 : real; Xap1_3 : real; Xap2_1 : real;
	Xap2_2 : real; Xap2_3 : real; yout_1 : real; yout_2 : real; yout_3 : real;
	Xr_1 : real; Xr_2 : real; Xr_3 : real; r_1 : real; __time_step : real;
	__nb_step : int;)
returns(
	guarantee_1 : bool;);
var 
	Implies_1 : bool; RelationalOperator1_1 : bool; Switch_1 : real; Switch_2 : real; Switch_3 : real;
	norm_1 : real; norm1_1 : real; norm2_1 : real;
let
	Implies_1 = Implies_821_002((norm2_1 < r_1), ( (Switch_1 = yout_1) ) and ( (Switch_2 = yout_2) ) and ( (Switch_3 = yout_3) ), __time_step, __nb_step);
	RelationalOperator1_1 = (norm_1 < norm1_1);
	Switch_1 = if RelationalOperator1_1 then
		Xap1_1
	    else Xap2_1;
	Switch_2 = if RelationalOperator1_1 then
		Xap1_2
	    else Xap2_2;
	Switch_3 = if RelationalOperator1_1 then
		Xap1_3
	    else Xap2_3;
	norm_1 = norm_827_002(r1_1, r1_2, r1_3, __time_step, __nb_step);
	norm1_1 = norm1_837_002(r2_1, r2_2, r2_3, __time_step, __nb_step);
	norm2_1 = norm2_847_002(Xr_1, Xr_2, Xr_3, __time_step, __nb_step);
	guarantee_1 = Implies_1;
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/contract/NLG006/norm
*)
node  norm_885_002(
	In_1 : real; In_2 : real; In_3 : real; __time_step : real; __nb_step : int;)
returns(
	Out_1 : real;);
var 
	Math_newline_Function1_1 : real;
let
	Math_newline_Function1_1 = sqrt(( (kind2_times(In_1, In_1)) ) + ( (kind2_times(In_2, In_2)) ) + ( (kind2_times(In_3, In_3)) ));
	Out_1 = Math_newline_Function1_1;
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/contract/NLG006/norm1
*)
node  norm1_895_002(
	In_1 : real; In_2 : real; In_3 : real; __time_step : real; __nb_step : int;)
returns(
	Out_1 : real;);
var 
	Math_newline_Function1_1 : real;
let
	Math_newline_Function1_1 = sqrt(( (kind2_times(In_1, In_1)) ) + ( (kind2_times(In_2, In_2)) ) + ( (kind2_times(In_3, In_3)) ));
	Out_1 = Math_newline_Function1_1;
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/contract/NLG006
*)
node  NLG006_874_002(
	yout_1 : real; yout_2 : real; yout_3 : real; Vt_1 : real; Vt_2 : real;
	Vt_3 : real; Vv_1 : real; Vv_2 : real; Vv_3 : real; __time_step : real;
	__nb_step : int;)
returns(
	guarantee_1 : bool;);
var 
	IC_1 : real; norm_1 : real; norm1_1 : real;
let
	IC_1 = if (__nb_step = 0) then
		0.0
	    else norm_1;
	norm_1 = norm_885_002(yout_1 - ( (0.0 -> (pre (yout_1))) ), yout_2 - ( (0.0 -> (pre (yout_2))) ), yout_3 - ( (0.0 -> (pre (yout_3))) ), __time_step, __nb_step);
	norm1_1 = norm1_895_002(Vt_1 + Vv_1, Vt_2 + Vv_2, Vt_3 + Vv_3, __time_step, __nb_step);
	guarantee_1 = ( (IC_1 <= ( kind2_times(kind2_times(1.0, 0.020), norm1_1) )) );
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/contract/NLG007/Compare
To Zero
*)
node  Compare_newline_ToZero_923_002(
	u_1 : real; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool;);
let
	y_1 = ( (u_1 = 0.0) );
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/contract/NLG007
*)
node  NLG007_920_002(
	yout_1 : real; yout_2 : real; yout_3 : real; Xtarget_1 : real; Xtarget_2 : real;
	Xtarget_3 : real; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
var 
	Compare_newline_ToZero_1 : bool; Sum_1 : real; Sum_2 : real;
let
	Compare_newline_ToZero_1 = Compare_newline_ToZero_923_002(yout_3 - Xtarget_3, __time_step, __nb_step);
	Sum_1 = yout_1 - Xtarget_1;
	Sum_2 = yout_2 - Xtarget_2;
	guarantee_1 = Compare_newline_ToZero_1;
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/contract/NLG_001/Compare
To Zero
*)
node  Compare_newline_ToZero_935_002(
	u_1 : real; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool;);
let
	y_1 = ( (u_1 > 0.0) );
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/contract/NLG_001
*)
node  NLG_001_932_002(
	Vv_1 : real; Vv_2 : real; Vv_3 : real; yout_1 : real; yout_2 : real;
	yout_3 : real; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
var 
	Compare_newline_ToZero_1 : bool;
let
	Compare_newline_ToZero_1 = Compare_newline_ToZero_935_002(( kind2_times(kind2_times(1.0, Vv_1), yout_1) ) + ( kind2_times(kind2_times(1.0, Vv_2), yout_2) ) + ( kind2_times(kind2_times(1.0, Vv_3), yout_3) ), __time_step, __nb_step);
	guarantee_1 = Compare_newline_ToZero_1;
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/contract/assumeVvnotnull/Compare
To Zero
*)
node  Compare_newline_ToZero_947_002(
	u_1 : real; u_2 : real; u_3 : real; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool; y_2 : bool; y_3 : bool;);
var 
	Constant_1 : real;
let
	Constant_1 = 0.0;
	y_1 = ( (u_1 <> Constant_1) );
	y_2 = ( (u_2 <> Constant_1) );
	y_3 = ( (u_3 <> Constant_1) );
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/contract/assumeVvnotnull
*)
node  assumeVvnotnull_945_002(
	Vv_1 : real; Vv_2 : real; Vv_3 : real; __time_step : real; __nb_step : int;)
returns(
	assume_1 : bool;);
var 
	Compare_newline_ToZero_1 : bool; Compare_newline_ToZero_2 : bool; Compare_newline_ToZero_3 : bool;
let
	(Compare_newline_ToZero_1, Compare_newline_ToZero_2, Compare_newline_ToZero_3) = Compare_newline_ToZero_947_002(Vv_1, Vv_2, Vv_3, __time_step, __nb_step);
	assume_1 = ( Compare_newline_ToZero_1 and Compare_newline_ToZero_2 and Compare_newline_ToZero_3 );
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/contract/assumeXrnotnull/Compare
To Zero
*)
node  Compare_newline_ToZero_955_002(
	u_1 : real; u_2 : real; u_3 : real; __time_step : real; __nb_step : int;)
returns(
	y_1 : bool; y_2 : bool; y_3 : bool;);
var 
	Constant_1 : real;
let
	Constant_1 = 0.0;
	y_1 = ( (u_1 <> Constant_1) );
	y_2 = ( (u_2 <> Constant_1) );
	y_3 = ( (u_3 <> Constant_1) );
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/contract/assumeXrnotnull
*)
node  assumeXrnotnull_953_002(
	Xr_1 : real; Xr_2 : real; Xr_3 : real; __time_step : real; __nb_step : int;)
returns(
	assume_1 : bool;);
var 
	Compare_newline_ToZero_1 : bool; Compare_newline_ToZero_2 : bool; Compare_newline_ToZero_3 : bool;
let
	(Compare_newline_ToZero_1, Compare_newline_ToZero_2, Compare_newline_ToZero_3) = Compare_newline_ToZero_955_002(Xr_1, Xr_2, Xr_3, __time_step, __nb_step);
	assume_1 = ( Compare_newline_ToZero_1 and Compare_newline_ToZero_2 and Compare_newline_ToZero_3 );
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/contract
*)
contract contract_733_002(
	Xtarg_1 : real; Xtarg_2 : real; Xtarg_3 : real; Xv_1 : real; Xv_2 : real;
	Xv_3 : real; Vv_1 : real; Vv_2 : real; Vv_3 : real; r_1 : real;
	Vt_1 : real; Vt_2 : real; Vt_3 : real; __time_step : real; __nb_step : int;)
returns(
	r1_1 : real; r1_2 : real; r1_3 : real; r2_1 : real; r2_2 : real;
	r2_3 : real; Xap1_1 : real; Xap1_2 : real; Xap1_3 : real; Xap2_1 : real;
	Xap2_2 : real; Xap2_3 : real; yout_1 : real; yout_2 : real; yout_3 : real;);
let
	var NLG002_NLG003_1 : bool = NLG002_NLG003_766_002(yout_1, yout_2, yout_3, Xtarg_1, Xtarg_2, Xtarg_3, r_1, Xv_1, Xv_2, Xv_3, __time_step, __nb_step);
	--guarantee "NLG002_NLG003_766_002" NLG002_NLG003_1;
	var NLG004_1 : bool = NLG004_803_002(yout_1, yout_2, yout_3, Sum_1, Sum_2, Sum_3, __time_step, __nb_step);
	guarantee "NLG004_803_002" NLG004_1;
	var NLG005_1 : bool = NLG005_813_002(r1_1, r1_2, r1_3, r2_1, r2_2, r2_3, Xap1_1, Xap1_2, Xap1_3, Xap2_1, Xap2_2, Xap2_3, yout_1, yout_2, yout_3, Sum_1, Sum_2, Sum_3, r_1, __time_step, __nb_step);
	--guarantee "NLG005_813_002" NLG005_1;
	var NLG006_1 : bool = NLG006_874_002(yout_1, yout_2, yout_3, Vt_1, Vt_2, Vt_3, Vv_1, Vv_2, Vv_3, __time_step, __nb_step);
	--guarantee "NLG006_874_002" NLG006_1;
	var NLG007_1 : bool = NLG007_920_002(yout_1, yout_2, yout_3, Xtarg_1, Xtarg_2, Xtarg_3, __time_step, __nb_step);
	--guarantee "NLG007_920_002" NLG007_1;
	var NLG_001_1 : bool = NLG_001_932_002(Vv_1, Vv_2, Vv_3, yout_1, yout_2, yout_3, __time_step, __nb_step);
	--guarantee "NLG_001_932_002" NLG_001_1;
	var Sum_1 : real = Xtarg_1 - Xv_1;
	var Sum_2 : real = Xtarg_2 - Xv_2;
	var Sum_3 : real = Xtarg_3 - Xv_3;
	var assumeVvnotnull_1 : bool = assumeVvnotnull_945_002(Vv_1, Vv_2, Vv_3, __time_step, __nb_step);
	assume "assumeVvnotnull_945_002" assumeVvnotnull_1;
	var assumeXrnotnull_1 : bool = assumeXrnotnull_953_002(Sum_1, Sum_2, Sum_3, __time_step, __nb_step);
	assume "assumeXrnotnull_953_002" assumeXrnotnull_1;
	assume "NB_STEP" (__nb_step = (0 -> ((pre (__nb_step)) + 1)));
	assume "TIME_STEP" (__time_step = (0.0 -> ((pre (__time_step)) + 0.020)));
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP/NLGuidance
*)
node  NLGuidance_7_001(
	Xtarg_1 : real; Xtarg_2 : real; Xtarg_3 : real; Xv_1 : real; Xv_2 : real;
	Xv_3 : real; Vv_1 : real; Vv_2 : real; Vv_3 : real; r_1 : real;
	Vt_1 : real; Vt_2 : real; Vt_3 : real; __time_step : real; __nb_step : int;)
returns(
	yout_1 : real; yout_2 : real; yout_3 : real; r1_1 : real; r1_2 : real;
	r1_3 : real; r2_1 : real; r2_2 : real; r2_3 : real; Xap1_1 : real;
	Xap1_2 : real; Xap1_3 : real; Xap2_1 : real; Xap2_2 : real; Xap2_3 : real;);
(*@contract
	import contract_733_002(Xtarg_1, Xtarg_2, Xtarg_3, Xv_1, Xv_2, Xv_3, Vv_1, Vv_2, Vv_3, r_1, Vt_1, Vt_2, Vt_3, __time_step, __nb_step) returns (r1_1, r1_2, r1_3, r2_1, r2_2, r2_3, Xap1_1, Xap1_2, Xap1_3, Xap2_1, Xap2_2, Xap2_3, yout_1, yout_2, yout_3);
*)
var 
	DotProduct_1 : real; If_1 : bool; If_2 : bool; ExecutionCond_of_Inner_53_001 : bool; Inner_1 : real;
	Inner_2 : real; Inner_3 : real; Inner_4 : real; Inner_5 : real; Inner_6 : real;
	Inner_7 : real; Inner_8 : real; Inner_9 : real; Inner_10 : real; Inner_11 : real;
	Inner_12 : real; Inner_13 : real; Inner_14 : real; Inner_15 : real; Merge_1 : real;
	Merge_2 : real; Merge_3 : real; Merge1_1 : real; Merge1_2 : real; Merge1_3 : real;
	Merge2_1 : real; Merge2_2 : real; Merge2_3 : real; Merge3_1 : real; Merge3_2 : real;
	Merge3_3 : real; Merge4_1 : real; Merge4_2 : real; Merge4_3 : real; ExecutionCond_of_Outer_316_001 : bool;
	Outer_1 : real; Outer_2 : real; Outer_3 : real; Outer_4 : real; Outer_5 : real;
	Outer_6 : real; Outer_7 : real; Outer_8 : real; Outer_9 : real; Outer_10 : real;
	Outer_11 : real; Outer_12 : real; Outer_13 : real; Outer_14 : real; Outer_15 : real;
	Sum_1 : real; Sum_2 : real; Sum_3 : real; Sum1_1 : real; Sum2_1 : real;
	norm1_1 : real; norm2_1 : real;
let
	DotProduct_1 = DotProduct_1148_002(Sum_1, Sum_2, Sum_3, Vv_1, Vv_2, Vv_3, __time_step, __nb_step);
	(If_1, If_2) = if ( ( (Sum2_1 <= 0.0) ) or ( (Sum1_1 <= 0.0) ) ) then
		(true, false)
	    else (false, true);
	ExecutionCond_of_Inner_53_001 = If_1;
	(Inner_1, Inner_2, Inner_3, Inner_4, Inner_5, Inner_6, Inner_7, Inner_8, Inner_9, Inner_10, Inner_11, Inner_12, Inner_13, Inner_14, Inner_15) = Inner_53_001_condExecSS(r_1, norm1_1, Sum_1, Sum_2, Sum_3, Xtarg_1, Xtarg_2, Xtarg_3, Xv_1, Xv_2, Xv_3, ExecutionCond_of_Inner_53_001, __time_step, __nb_step);
	Merge_1 = if ExecutionCond_of_Inner_53_001 then
		Inner_1
	    else if ExecutionCond_of_Outer_316_001 then
		Outer_1
	    else (0.0 -> (pre (Merge_1)));
	Merge_2 = if ExecutionCond_of_Inner_53_001 then
		Inner_2
	    else if ExecutionCond_of_Outer_316_001 then
		Outer_2
	    else (0.0 -> (pre (Merge_2)));
	Merge_3 = if ExecutionCond_of_Inner_53_001 then
		Inner_3
	    else if ExecutionCond_of_Outer_316_001 then
		Outer_3
	    else (0.0 -> (pre (Merge_3)));
	Merge1_1 = if ExecutionCond_of_Inner_53_001 then
		Inner_4
	    else if ExecutionCond_of_Outer_316_001 then
		Outer_4
	    else (0.0 -> (pre (Merge1_1)));
	Merge1_2 = if ExecutionCond_of_Inner_53_001 then
		Inner_5
	    else if ExecutionCond_of_Outer_316_001 then
		Outer_5
	    else (0.0 -> (pre (Merge1_2)));
	Merge1_3 = if ExecutionCond_of_Inner_53_001 then
		Inner_6
	    else if ExecutionCond_of_Outer_316_001 then
		Outer_6
	    else (0.0 -> (pre (Merge1_3)));
	Merge2_1 = if ExecutionCond_of_Inner_53_001 then
		Inner_7
	    else if ExecutionCond_of_Outer_316_001 then
		Outer_7
	    else (0.0 -> (pre (Merge2_1)));
	Merge2_2 = if ExecutionCond_of_Inner_53_001 then
		Inner_8
	    else if ExecutionCond_of_Outer_316_001 then
		Outer_8
	    else (0.0 -> (pre (Merge2_2)));
	Merge2_3 = if ExecutionCond_of_Inner_53_001 then
		Inner_9
	    else if ExecutionCond_of_Outer_316_001 then
		Outer_9
	    else (0.0 -> (pre (Merge2_3)));
	Merge3_1 = if ExecutionCond_of_Inner_53_001 then
		Inner_10
	    else if ExecutionCond_of_Outer_316_001 then
		Outer_10
	    else (0.0 -> (pre (Merge3_1)));
	Merge3_2 = if ExecutionCond_of_Inner_53_001 then
		Inner_11
	    else if ExecutionCond_of_Outer_316_001 then
		Outer_11
	    else (0.0 -> (pre (Merge3_2)));
	Merge3_3 = if ExecutionCond_of_Inner_53_001 then
		Inner_12
	    else if ExecutionCond_of_Outer_316_001 then
		Outer_12
	    else (0.0 -> (pre (Merge3_3)));
	Merge4_1 = if ExecutionCond_of_Inner_53_001 then
		Inner_13
	    else if ExecutionCond_of_Outer_316_001 then
		Outer_13
	    else (0.0 -> (pre (Merge4_1)));
	Merge4_2 = if ExecutionCond_of_Inner_53_001 then
		Inner_14
	    else if ExecutionCond_of_Outer_316_001 then
		Outer_14
	    else (0.0 -> (pre (Merge4_2)));
	Merge4_3 = if ExecutionCond_of_Inner_53_001 then
		Inner_15
	    else if ExecutionCond_of_Outer_316_001 then
		Outer_15
	    else (0.0 -> (pre (Merge4_3)));
	ExecutionCond_of_Outer_316_001 = If_2;
	(Outer_1, Outer_2, Outer_3, Outer_4, Outer_5, Outer_6, Outer_7, Outer_8, Outer_9, Outer_10, Outer_11, Outer_12, Outer_13, Outer_14, Outer_15) = Outer_316_001_condExecSS(r_1, norm1_1, Sum_1, Sum_2, Sum_3, Xtarg_1, Xtarg_2, Xtarg_3, Xv_1, Xv_2, Xv_3, norm2_1, Sum2_1, Sum1_1, DotProduct_1, Vv_1, Vv_2, Vv_3, ExecutionCond_of_Outer_316_001, __time_step, __nb_step);
	Sum_1 = Xtarg_1 - Xv_1;
	Sum_2 = Xtarg_2 - Xv_2;
	Sum_3 = Xtarg_3 - Xv_3;
	Sum1_1 = ( kind2_times(kind2_times(1.0, ( (kind2_times(norm1_1, norm1_1)) )), ( (kind2_times(norm2_1, norm2_1)) )) ) - ( (kind2_times(DotProduct_1, DotProduct_1)) );
	Sum2_1 = ( (kind2_times(norm1_1, norm1_1)) ) - ( (kind2_times(r_1, r_1)) );
	norm1_1 = norm1_629_002(Sum_1, Sum_2, Sum_3, __time_step, __nb_step);
	norm2_1 = norm2_639_002(Vv_1, Vv_2, Vv_3, __time_step, __nb_step);
	yout_1 = Merge_1;
	yout_2 = Merge_2;
	yout_3 = Merge_3;
	r1_1 = Merge1_1;
	r1_2 = Merge1_2;
	r1_3 = Merge1_3;
	r2_1 = Merge2_1;
	r2_2 = Merge2_2;
	r2_3 = Merge2_3;
	Xap1_1 = Merge3_1;
	Xap1_2 = Merge3_2;
	Xap1_3 = Merge3_3;
	Xap2_1 = Merge4_1;
	Xap2_2 = Merge4_2;
	Xap2_3 = Merge4_3;
tel

(*
Original block name: NLGuidance_12B_with_contracts_PP
*)
node  NLGuidance_12B_with_contracts_PP(
	Xtarg_1 : real; Xtarg_2 : real; Xtarg_3 : real; Xv_1 : real; Xv_2 : real;
	Xv_3 : real; Vv_1 : real; Vv_2 : real; Vv_3 : real; r_1 : real;
	Vt_1 : real; Vt_2 : real; Vt_3 : real;)
returns(
	yout_1 : real; yout_2 : real; yout_3 : real; r1_1 : real; r1_2 : real;
	r1_3 : real; r2_1 : real; r2_2 : real; r2_3 : real; Xap1_1 : real;
	Xap1_2 : real; Xap1_3 : real; Xap2_1 : real; Xap2_2 : real; Xap2_3 : real;);
var 
	NLGuidance_1 : real; NLGuidance_2 : real; NLGuidance_3 : real; NLGuidance_4 : real; NLGuidance_5 : real;
	NLGuidance_6 : real; NLGuidance_7 : real; NLGuidance_8 : real; NLGuidance_9 : real; NLGuidance_10 : real;
	NLGuidance_11 : real; NLGuidance_12 : real; NLGuidance_13 : real; NLGuidance_14 : real; NLGuidance_15 : real;
	__time_step : real; __nb_step : int;
let
	(NLGuidance_1, NLGuidance_2, NLGuidance_3, NLGuidance_4, NLGuidance_5, NLGuidance_6, NLGuidance_7, NLGuidance_8, NLGuidance_9, NLGuidance_10, NLGuidance_11, NLGuidance_12, NLGuidance_13, NLGuidance_14, NLGuidance_15) = NLGuidance_7_001(Xtarg_1, Xtarg_2, Xtarg_3, Xv_1, Xv_2, Xv_3, Vv_1, Vv_2, Vv_3, r_1, Vt_1, Vt_2, Vt_3, __time_step, __nb_step);
	yout_1 = NLGuidance_1;
	yout_2 = NLGuidance_2;
	yout_3 = NLGuidance_3;
	r1_1 = NLGuidance_4;
	r1_2 = NLGuidance_5;
	r1_3 = NLGuidance_6;
	r2_1 = NLGuidance_7;
	r2_2 = NLGuidance_8;
	r2_3 = NLGuidance_9;
	Xap1_1 = NLGuidance_10;
	Xap1_2 = NLGuidance_11;
	Xap1_3 = NLGuidance_12;
	Xap2_1 = NLGuidance_13;
	Xap2_2 = NLGuidance_14;
	Xap2_3 = NLGuidance_15;
	__time_step = (0.0 -> ((pre (__time_step)) + 0.020));
	__nb_step = (0 -> ((pre (__nb_step)) + 1));
tel

