-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 03-Nov-2019 19:29:53
node kind2_times(x, y: real) returns (z: real) ;
var abs_x, abs_y, abs_z: real;
let
   abs_x = if x < 0.0 then -x else x ;
    abs_y = if y < 0.0 then -y else y ;
    abs_z = if z < 0.0 then -z else z ;
    -- Neutral.
    assert (z = y) = ((x = 1.0) or (y = 0.0)) ;
    assert (z = x) = ((y = 1.0) or (x = 0.0)) ;
    -- Absorbing.
    assert (z = 0.0) = ( (x = 0.0) or (y = 0.0) ) ;
    -- Sign.
    assert (z > 0.0) = (
      ( (x > 0.0) and (y > 0.0) ) or
      ( (x < 0.0) and (y < 0.0) )
    ) ;
    assert (z < 0.0) = (
      ( (x > 0.0) and (y < 0.0) ) or
      ( (x < 0.0) and (y > 0.0) )
    ) ;
    -- Loose proportionality.
    assert (abs_z >= abs_y) = ((abs_x >= 1.0) or (y = 0.0)) ;
    assert (abs_z >= abs_x) = ((abs_y >= 1.0) or (x = 0.0)) ;
    assert (abs_z <= abs_y) = ((abs_x <= 1.0) or (y = 0.0)) ;
    assert (abs_z <= abs_x) = ((abs_y <= 1.0) or (x = 0.0)) ;
    z = x * y ;
tel
node kind2_divide(num, den: real) returns (res: real) ;
var abs_num, abs_den, abs_res: real;
let
 abs_num = if num < 0.0 then -num else num ;
 abs_den = if den < 0.0 then -den else den ;
 abs_res = if res < 0.0 then -res else res ;
assert not (den = 0.0) ;
-- Neutral.
assert (res = num) = ((den = 1.0) or (num = 0.0)) ;
assert (res = - num) = ((den = - 1.0) or (num = 0.0)) ;
-- Absorbing.
assert (num = 0.0) = (res = 0.0) ;
-- Sign.
assert (res > 0.0) = (
  ( (num > 0.0) and (den > 0.0) ) or
  ( (num < 0.0) and (den < 0.0) )
) ;
assert (res < 0.0) = (
  ( (num > 0.0) and (den < 0.0) ) or
  ( (num < 0.0) and (den > 0.0) )
) ;
-- Loose proportionality.
assert (abs_res >= abs_num) = ((abs_den <= 1.0) or (num = 0.0)) ;
assert (abs_res <= abs_num) = ((abs_den >= 1.0) or (num = 0.0)) ;
-- Annulation.
assert (res = 1.0) = (num = den) ;
assert (res = - 1.0) = (num = - den) ;
  res = num / den ;
tel
node  int_to_int32(
	x : int;)
returns(
	y : int;);
let
	--Type-casting was disabled. See Tools -> CoCoSim -> Preferences -> NASA compiler preferences.
	y = x;
tel

node  _max_real(
	x : real; y : real;)
returns(
	z : real;);
let
	z = if (x > y) then
		x
	    else y;
tel

node  _min_real(
	x : real; y : real;)
returns(
	z : real;);
let
	z = if (x < y) then
		x
	    else y;
tel

node  abs_real(
	x : real;)
returns(
	y : real;);
let
	y = if (x >= 0.0) then
		x
	    else (- (x));
tel

(*
Original block name: regs_12B_with_contracts_All_PP/Subsystem/Inputs/CVcmd
*)
node  CVcmd_7457_002(
	lcv_cmd_fcs_dps__1 : real; hdg_des_deg_1 : real; mcv_cmd_fcs_dps_1 : real; alt_des_ft_1 : real; ncv_cmd_fcs_dps_1 : real;
	xcv_cmd_fcs_fps_1 : real; airspeed_des_fps_1 : real; hcv_cmd_fcs_fps_1 : real; __time_step : real; __nb_step : int;)
returns(
	OL_Cmds_1 : real; OL_Cmds_2 : real; OL_Cmds_3 : real; OL_Cmds_4 : real; OL_Cmds_5 : real;
	OL_Cmds_6 : real; OL_Cmds_7 : real; OL_Cmds_8 : real;);
let
	OL_Cmds_1 = lcv_cmd_fcs_dps__1;
	OL_Cmds_2 = hdg_des_deg_1;
	OL_Cmds_3 = mcv_cmd_fcs_dps_1;
	OL_Cmds_4 = alt_des_ft_1;
	OL_Cmds_5 = ncv_cmd_fcs_dps_1;
	OL_Cmds_6 = xcv_cmd_fcs_fps_1;
	OL_Cmds_7 = airspeed_des_fps_1;
	OL_Cmds_8 = hcv_cmd_fcs_fps_1;
tel

(*
Original block name: regs_12B_with_contracts_All_PP/Subsystem/Inputs/Input/egi_fcs_in
*)
node  egi_fcs_in_7640_002(
	beta_adc_deg_1 : real; vtas_adc_kts_1 : real; __time_step : real; __nb_step : int;)
returns(
	beta_deg_1 : real; vtas_kts_1 : real;);
let
	beta_deg_1 = beta_adc_deg_1;
	vtas_kts_1 = vtas_adc_kts_1;
tel

(*
Original block name: regs_12B_with_contracts_All_PP/Subsystem/Inputs/Input
*)
node  Input_7584_002(
	beta_adc_deg_1 : real; vtas_adc_kts_1 : real; __time_step : real; __nb_step : int;)
returns(
	beta_1 : real; vtas_1 : real;);
var 
	egi_fcs_in_1 : real; egi_fcs_in_2 : real;
let
	(egi_fcs_in_1, egi_fcs_in_2) = egi_fcs_in_7640_002(beta_adc_deg_1, vtas_adc_kts_1, __time_step, __nb_step);
	beta_1 = egi_fcs_in_1;
	vtas_1 = egi_fcs_in_2;
tel

(*
Original block name: regs_12B_with_contracts_All_PP/Subsystem/Inputs/Subsystem
*)
node  Subsystem_7740_002(
	lcv_fps_dps_1 : real; mcv_fcs_dps_1 : real; ncv_fcs_dps_1 : real; dcv_fcs_fps_1 : real; zcv_fcs_fps_1 : real;
	__time_step : real; __nb_step : int;)
returns(
	CV_1 : real; CV_2 : real; CV_3 : real; CV_4 : real; CV_5 : real;);
let
	CV_1 = lcv_fps_dps_1;
	CV_2 = mcv_fcs_dps_1;
	CV_3 = ncv_fcs_dps_1;
	CV_4 = ( (kind2_times(dcv_fcs_fps_1, -1.0)) );
	CV_5 = ( (kind2_times(zcv_fcs_fps_1, -1.0)) );
tel

(*
Original block name: regs_12B_with_contracts_All_PP/Subsystem/Inputs/betad
*)
node  betad_8116_000(
	betadot_1 : real; __time_step : real; __nb_step : int;)
returns(
	beta_dot_est_1 : real;);
let
	beta_dot_est_1 = betadot_1;
tel

(*
Original block name: regs_12B_with_contracts_All_PP/Subsystem/Inputs
*)
node  Inputs_6747_002(
	beta_adc_deg_1 : real; vtas_adc_kts_1 : real; lcv_cmd_fcs_dps__1 : real; hdg_des_deg_1 : real; mcv_cmd_fcs_dps_1 : real;
	alt_des_ft_1 : real; ncv_cmd_fcs_dps_1 : real; xcv_cmd_fcs_fps_1 : real; airspeed_des_fps_1 : real; hcv_cmd_fcs_fps_1 : real;
	lcv_fps_dps_1 : real; mcv_fcs_dps_1 : real; ncv_fcs_dps_1 : real; dcv_fcs_fps_1 : real; zcv_fcs_fps_1 : real;
	betadot_1 : real; __time_step : real; __nb_step : int;)
returns(
	beta_1 : real; vtas_1 : real; OL_Cmds_1 : real; OL_Cmds_2 : real; OL_Cmds_3 : real;
	OL_Cmds_4 : real; OL_Cmds_5 : real; OL_Cmds_6 : real; OL_Cmds_7 : real; OL_Cmds_8 : real;
	CV_1 : real; CV_2 : real; CV_3 : real; CV_4 : real; CV_5 : real;
	beta_dot_est_1 : real;);
var 
	CVcmd_1 : real; CVcmd_2 : real; CVcmd_3 : real; CVcmd_4 : real; CVcmd_5 : real;
	CVcmd_6 : real; CVcmd_7 : real; CVcmd_8 : real; Input_1 : real; Input_2 : real;
	Subsystem_1 : real; Subsystem_2 : real; Subsystem_3 : real; Subsystem_4 : real; Subsystem_5 : real;
	betad_1 : real;
let
	(CVcmd_1, CVcmd_2, CVcmd_3, CVcmd_4, CVcmd_5, CVcmd_6, CVcmd_7, CVcmd_8) = CVcmd_7457_002(lcv_cmd_fcs_dps__1, hdg_des_deg_1, mcv_cmd_fcs_dps_1, alt_des_ft_1, ncv_cmd_fcs_dps_1, xcv_cmd_fcs_fps_1, airspeed_des_fps_1, hcv_cmd_fcs_fps_1, __time_step, __nb_step);
	(Input_1, Input_2) = Input_7584_002(beta_adc_deg_1, vtas_adc_kts_1, __time_step, __nb_step);
	(Subsystem_1, Subsystem_2, Subsystem_3, Subsystem_4, Subsystem_5) = Subsystem_7740_002(lcv_fps_dps_1, mcv_fcs_dps_1, ncv_fcs_dps_1, dcv_fcs_fps_1, zcv_fcs_fps_1, __time_step, __nb_step);
	betad_1 = betad_8116_000(betadot_1, __time_step, __nb_step);
	beta_1 = Input_1;
	vtas_1 = Input_2;
	OL_Cmds_1 = CVcmd_1;
	OL_Cmds_2 = CVcmd_2;
	OL_Cmds_3 = CVcmd_3;
	OL_Cmds_4 = CVcmd_4;
	OL_Cmds_5 = CVcmd_5;
	OL_Cmds_6 = CVcmd_6;
	OL_Cmds_7 = CVcmd_7;
	OL_Cmds_8 = CVcmd_8;
	CV_1 = Subsystem_1;
	CV_2 = Subsystem_2;
	CV_3 = Subsystem_3;
	CV_4 = Subsystem_4;
	CV_5 = Subsystem_5;
	beta_dot_est_1 = betad_1;
tel

(*
Original block name: regs_12B_with_contracts_All_PP/Subsystem/Regulators/AirspeedRegulator
*)
node  AirspeedRegulator_8152_000(
	CVcmd_1 : real; CVcmd_2 : real; CVcmd_3 : real; CVcmd_4 : real; CVcmd_5 : real;
	CVcmd_6 : real; CVcmd_7 : real; CVcmd_8 : real; CV_1 : real; CV_2 : real;
	CV_3 : real; CV_4 : real; CV_5 : real; __time_step : real; __nb_step : int;)
returns(
	CVdt_cmd_1 : real;);
let
	CVdt_cmd_1 = ( (kind2_times(( CVcmd_6 - CV_4 ), 0.50)) );
tel

(*
Original block name: regs_12B_with_contracts_All_PP/Subsystem/Regulators/HeightRegulator/Saturation
*)
node  Saturation_6195_001(
	In_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out_1 : real;);
var 
	lower_1 : real; upper_1 : real;
let
	lower_1 = _max_real(upper_1, -1.0);
	upper_1 = _min_real(1.0, In_1);
	Out_1 = lower_1;
tel

(*
Original block name: regs_12B_with_contracts_All_PP/Subsystem/Regulators/HeightRegulator/Tustin_newline_Integrator_newline__lpar_Limited_comma_Resettable_comma_States_rpar_/Saturation
Dynamic
*)
node  Saturation_newline_Dynamic_8231_000(
	up_1 : real; u_1 : real; lo_1 : real; __time_step : real; __nb_step : int;)
returns(
	y_1 : real;);
var 
	Switch_1 : real; Switch2_1 : real;
let
	Switch_1 = if ( (u_1 < lo_1) ) then
		lo_1
	    else u_1;
	Switch2_1 = if ( (u_1 > up_1) ) then
		up_1
	    else Switch_1;
	y_1 = Switch2_1;
tel

(*
Original block name: regs_12B_with_contracts_All_PP/Subsystem/Regulators/HeightRegulator/Tustin_newline_Integrator_newline__lpar_Limited_comma_Resettable_comma_States_rpar_/bounds
*)
node  bounds_8237_000(
	TL_1 : real; BL_1 : real; __time_step : real; __nb_step : int;)
returns(
	TLc_1 : real; BLc_1 : real;);
var 
	RelationalOperator_1 : bool; Switch1_1 : real; Switch2_1 : real;
let
	RelationalOperator_1 = (TL_1 < BL_1);
	Switch1_1 = if RelationalOperator_1 then
		BL_1
	    else TL_1;
	Switch2_1 = if RelationalOperator_1 then
		TL_1
	    else BL_1;
	TLc_1 = Switch1_1;
	BLc_1 = Switch2_1;
tel

(*
Original block name: regs_12B_with_contracts_All_PP/Subsystem/Regulators/HeightRegulator/Tustin_newline_Integrator_newline__lpar_Limited_comma_Resettable_comma_States_rpar_
*)
node  Tustin_newline_Integrator_newline__lpar_Limited_comma_Resettable_comma_States_rpar__8218_000(
	xin_1 : real; T_1 : real; TL_1 : real; BL_1 : real; reset_1 : bool;
	ic_1 : real; __time_step : real; __nb_step : int;)
returns(
	yout_1 : real;);
var 
	Saturation_newline_Dynamic_1 : real; Switch_1 : real; bounds_1 : real; bounds_2 : real;
let
	Saturation_newline_Dynamic_1 = Saturation_newline_Dynamic_8231_000(bounds_1, Switch_1, bounds_2, __time_step, __nb_step);
	Switch_1 = if reset_1 then
		ic_1
	    else ( ( (0.0 -> (pre (Saturation_newline_Dynamic_1))) ) + ( kind2_times(kind2_times(1.0, ( (kind2_times(( xin_1 + ( (0.0 -> (pre (xin_1))) ) ), 0.50)) )), T_1) ) );
	(bounds_1, bounds_2) = bounds_8237_000(TL_1, BL_1, __time_step, __nb_step);
	yout_1 = Saturation_newline_Dynamic_1;
tel

(*
Original block name: regs_12B_with_contracts_All_PP/Subsystem/Regulators/HeightRegulator
*)
node  HeightRegulator_8190_000(
	vtas_1 : real; CVcmd_1 : real; CVcmd_2 : real; CVcmd_3 : real; CVcmd_4 : real;
	CVcmd_5 : real; CVcmd_6 : real; CVcmd_7 : real; CVcmd_8 : real; CV_1 : real;
	CV_2 : real; CV_3 : real; CV_4 : real; CV_5 : real; __time_step : real;
	__nb_step : int;)
returns(
	CVdt_cmd_1 : real;);
var 
	Constant3_1 : real; Saturation_1 : real; Sum8_1 : real; Tustin_newline_Integrator_newline__lpar_Limited_comma_Resettable_comma_States_rpar__1 : real;
let
	Constant3_1 = 0.0;
	Saturation_1 = Saturation_6195_001(CVcmd_8 - CV_5, __time_step, __nb_step);
	Sum8_1 = ( (kind2_times(( kind2_times(kind2_times(1.0, Saturation_1), ( 1.0 - Constant3_1 )) ), 1.0)) ) + ( (kind2_times(( kind2_times(kind2_times(1.0, Constant3_1), ( (0.0 -> (pre (Tustin_newline_Integrator_newline__lpar_Limited_comma_Resettable_comma_States_rpar__1))) )) ), -0.20)) );
	Tustin_newline_Integrator_newline__lpar_Limited_comma_Resettable_comma_States_rpar__1 = Tustin_newline_Integrator_newline__lpar_Limited_comma_Resettable_comma_States_rpar__8218_000(Sum8_1, 0.010, 9999.0, -9999.0, false, 0.0, __time_step, __nb_step);
	CVdt_cmd_1 = ( ( (kind2_times(Sum8_1, 1.0)) ) + ( (kind2_times(Tustin_newline_Integrator_newline__lpar_Limited_comma_Resettable_comma_States_rpar__1, 0.250)) ) );
tel

(*
Original block name: regs_12B_with_contracts_All_PP/Subsystem/Regulators/PitchRegulator/Tustin_newline_Integrator_newline__lpar_Limited_comma_Resettable_comma_States_rpar_/Saturation
Dynamic
*)
node  Saturation_newline_Dynamic_8348_000(
	up_1 : real; u_1 : real; lo_1 : real; __time_step : real; __nb_step : int;)
returns(
	y_1 : real;);
var 
	Switch_1 : real; Switch2_1 : real;
let
	Switch_1 = if ( (u_1 < lo_1) ) then
		lo_1
	    else u_1;
	Switch2_1 = if ( (u_1 > up_1) ) then
		up_1
	    else Switch_1;
	y_1 = Switch2_1;
tel

(*
Original block name: regs_12B_with_contracts_All_PP/Subsystem/Regulators/PitchRegulator/Tustin_newline_Integrator_newline__lpar_Limited_comma_Resettable_comma_States_rpar_/bounds
*)
node  bounds_8354_000(
	TL_1 : real; BL_1 : real; __time_step : real; __nb_step : int;)
returns(
	TLc_1 : real; BLc_1 : real;);
var 
	RelationalOperator_1 : bool; Switch1_1 : real; Switch2_1 : real;
let
	RelationalOperator_1 = (TL_1 < BL_1);
	Switch1_1 = if RelationalOperator_1 then
		BL_1
	    else TL_1;
	Switch2_1 = if RelationalOperator_1 then
		TL_1
	    else BL_1;
	TLc_1 = Switch1_1;
	BLc_1 = Switch2_1;
tel

(*
Original block name: regs_12B_with_contracts_All_PP/Subsystem/Regulators/PitchRegulator/Tustin_newline_Integrator_newline__lpar_Limited_comma_Resettable_comma_States_rpar_
*)
node  Tustin_newline_Integrator_newline__lpar_Limited_comma_Resettable_comma_States_rpar__8335_000(
	xin_1 : real; T_1 : real; TL_1 : real; BL_1 : real; reset_1 : bool;
	ic_1 : real; __time_step : real; __nb_step : int;)
returns(
	yout_1 : real;);
var 
	Saturation_newline_Dynamic_1 : real; Switch_1 : real; bounds_1 : real; bounds_2 : real;
let
	Saturation_newline_Dynamic_1 = Saturation_newline_Dynamic_8348_000(bounds_1, Switch_1, bounds_2, __time_step, __nb_step);
	Switch_1 = if reset_1 then
		ic_1
	    else ( ( (0.0 -> (pre (Saturation_newline_Dynamic_1))) ) + ( kind2_times(kind2_times(1.0, ( (kind2_times(( xin_1 + ( (0.0 -> (pre (xin_1))) ) ), 0.50)) )), T_1) ) );
	(bounds_1, bounds_2) = bounds_8354_000(TL_1, BL_1, __time_step, __nb_step);
	yout_1 = Saturation_newline_Dynamic_1;
tel

(*
get a table element
*)
node  transition_bvr_8401_000_getTableElement(
	x : int;)
returns(
	y : real;);
let
	y = if (x = 1) then
		15.0
	    else 20.0;
tel

(*
external node code for doing Interpolation Using PreLookup
*)
node  transition_bvr_8401_000_Interp_Using_Pre_ext_node(
	inline_index_bound_node_1 : int; weight_bound_node_1 : real; inline_index_bound_node_2 : int; weight_bound_node_2 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	u_node_1 : real; u_node_2 : real;
let
	u_node_1 = transition_bvr_8401_000_getTableElement(inline_index_bound_node_1);
	u_node_2 = transition_bvr_8401_000_getTableElement(inline_index_bound_node_2);
	Interp_Using_Pre_Out = ( (kind2_times(weight_bound_node_1, u_node_1)) + (kind2_times(weight_bound_node_2, u_node_2)) );
tel

(*
external node code for doing PreLookup
*)
node  transition_bvr_8401_000_PreLookup_node(
	dim1_coord_in : real;)
returns(
	inline_index_bound_node_1 : int; weight_bound_node_1 : real; inline_index_bound_node_2 : int; weight_bound_node_2 : real;);
var 
	dimJump_1 : int; Breakpoints_dim1_1 : real; Breakpoints_dim1_2 : real; index_dim_1_1 : int; index_dim_1_2 : int;
	coords_dim_1_1 : real; coords_dim_1_2 : real; clip_input_1 : real;
let
	dimJump_1 = 1;
	Breakpoints_dim1_1 = 120.0;
	Breakpoints_dim1_2 = 185.0;
	(index_dim_1_1, coords_dim_1_1, index_dim_1_2, coords_dim_1_2) = if (dim1_coord_in >= Breakpoints_dim1_2) then
		(1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2)
	    else if (dim1_coord_in >= Breakpoints_dim1_1) then
		(1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2)
	    else (1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2);
	clip_input_1 = dim1_coord_in;
	inline_index_bound_node_1 = ( (index_dim_1_1 * dimJump_1) );
	weight_bound_node_1 = ( (kind2_divide((coords_dim_1_2 - clip_input_1), (coords_dim_1_2 - coords_dim_1_1))) );
	inline_index_bound_node_2 = ( (index_dim_1_2 * dimJump_1) );
	weight_bound_node_2 = ( (kind2_divide((clip_input_1 - coords_dim_1_1), (coords_dim_1_2 - coords_dim_1_1))) );
tel

(*
external node code for doing Lookup_nD
*)
node  transition_bvr_8401_000_Lookup_wrapper_node(
	dim1_coord_in : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	inline_index_bound_node_1 : int; weight_bound_node_1 : real; inline_index_bound_node_2 : int; weight_bound_node_2 : real;
let
	(inline_index_bound_node_1, weight_bound_node_1, inline_index_bound_node_2, weight_bound_node_2) = transition_bvr_8401_000_PreLookup_node(dim1_coord_in);
	Interp_Using_Pre_Out = transition_bvr_8401_000_Interp_Using_Pre_ext_node(inline_index_bound_node_1, weight_bound_node_1, inline_index_bound_node_2, weight_bound_node_2);
tel

(*
Original block name: regs_12B_with_contracts_All_PP/Subsystem/Regulators/PitchRegulator
*)
node  PitchRegulator_8319_000(
	CV_cmd_1 : real; CV_cmd_2 : real; CV_cmd_3 : real; CV_cmd_4 : real; CV_cmd_5 : real;
	CV_cmd_6 : real; CV_cmd_7 : real; CV_cmd_8 : real; CV_1 : real; CV_2 : real;
	CV_3 : real; CV_4 : real; CV_5 : real; vtas_1 : real; __time_step : real;
	__nb_step : int;)
returns(
	CVdt_cmd_1 : real;);
var 
	Sum3_1 : real; Tustin_newline_Integrator_newline__lpar_Limited_comma_Resettable_comma_States_rpar__1 : real; transition_bvr_1 : real;
let
	Sum3_1 = CV_cmd_3 - CV_2;
	Tustin_newline_Integrator_newline__lpar_Limited_comma_Resettable_comma_States_rpar__1 = Tustin_newline_Integrator_newline__lpar_Limited_comma_Resettable_comma_States_rpar__8335_000(Sum3_1, 0.010, 9999.0, -9999.0, false, 0.0, __time_step, __nb_step);
	transition_bvr_1 = transition_bvr_8401_000_Lookup_wrapper_node(vtas_1);
	CVdt_cmd_1 = ( ( kind2_times(kind2_times(1.0, transition_bvr_1), Sum3_1) ) + ( (kind2_times(Tustin_newline_Integrator_newline__lpar_Limited_comma_Resettable_comma_States_rpar__1, 5.0)) ) );
tel

(*
Original block name: regs_12B_with_contracts_All_PP/Subsystem/Regulators/RollRegulator
*)
node  RollRegulator_8425_000(
	CVcmd_1 : real; CVcmd_2 : real; CVcmd_3 : real; CVcmd_4 : real; CVcmd_5 : real;
	CVcmd_6 : real; CVcmd_7 : real; CVcmd_8 : real; CV_1 : real; CV_2 : real;
	CV_3 : real; CV_4 : real; CV_5 : real; __time_step : real; __nb_step : int;)
returns(
	Reg_1 : real; one_over_Tau_roll_1 : real;);
var 
	one_o_Tau_1 : real;
let
	one_o_Tau_1 = 2.50;
	Reg_1 = ( kind2_times(kind2_times(1.0, ( CVcmd_1 - CV_1 )), one_o_Tau_1) );
	one_over_Tau_roll_1 = one_o_Tau_1;
tel

(*
get a table element
*)
node  transition1_8485_000_getTableElement(
	x : int;)
returns(
	y : real;);
let
	y = if (x = 1) then
		0.0
	    else if (x = 2) then
		0.0
	    else if (x = 3) then
		1.0
	    else 1.0;
tel

(*
external node code for doing Interpolation Using PreLookup
*)
node  transition1_8485_000_Interp_Using_Pre_ext_node(
	inline_index_bound_node_1 : int; weight_bound_node_1 : real; inline_index_bound_node_2 : int; weight_bound_node_2 : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	u_node_1 : real; u_node_2 : real;
let
	u_node_1 = transition1_8485_000_getTableElement(inline_index_bound_node_1);
	u_node_2 = transition1_8485_000_getTableElement(inline_index_bound_node_2);
	Interp_Using_Pre_Out = ( (kind2_times(weight_bound_node_1, u_node_1)) + (kind2_times(weight_bound_node_2, u_node_2)) );
tel

(*
external node code for doing PreLookup
*)
node  transition1_8485_000_PreLookup_node(
	dim1_coord_in : real;)
returns(
	inline_index_bound_node_1 : int; weight_bound_node_1 : real; inline_index_bound_node_2 : int; weight_bound_node_2 : real;);
var 
	dimJump_1 : int; Breakpoints_dim1_1 : real; Breakpoints_dim1_2 : real; Breakpoints_dim1_3 : real; Breakpoints_dim1_4 : real;
	index_dim_1_1 : int; index_dim_1_2 : int; coords_dim_1_1 : real; coords_dim_1_2 : real; clip_input_1 : real;
let
	dimJump_1 = 1;
	Breakpoints_dim1_1 = 0.0;
	Breakpoints_dim1_2 = 50.0;
	Breakpoints_dim1_3 = 90.0;
	Breakpoints_dim1_4 = 1000.0;
	(index_dim_1_1, coords_dim_1_1, index_dim_1_2, coords_dim_1_2) = if (dim1_coord_in >= Breakpoints_dim1_4) then
		(3, Breakpoints_dim1_3, 4, Breakpoints_dim1_4)
	    else if (dim1_coord_in >= Breakpoints_dim1_3) then
		(3, Breakpoints_dim1_3, 4, Breakpoints_dim1_4)
	    else if (dim1_coord_in >= Breakpoints_dim1_2) then
		(2, Breakpoints_dim1_2, 3, Breakpoints_dim1_3)
	    else if (dim1_coord_in >= Breakpoints_dim1_1) then
		(1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2)
	    else (1, Breakpoints_dim1_1, 2, Breakpoints_dim1_2);
	clip_input_1 = dim1_coord_in;
	inline_index_bound_node_1 = ( (index_dim_1_1 * dimJump_1) );
	weight_bound_node_1 = ( (kind2_divide((coords_dim_1_2 - clip_input_1), (coords_dim_1_2 - coords_dim_1_1))) );
	inline_index_bound_node_2 = ( (index_dim_1_2 * dimJump_1) );
	weight_bound_node_2 = ( (kind2_divide((clip_input_1 - coords_dim_1_1), (coords_dim_1_2 - coords_dim_1_1))) );
tel

(*
external node code for doing Lookup_nD
*)
node  transition1_8485_000_Lookup_wrapper_node(
	dim1_coord_in : real;)
returns(
	Interp_Using_Pre_Out : real;);
var 
	inline_index_bound_node_1 : int; weight_bound_node_1 : real; inline_index_bound_node_2 : int; weight_bound_node_2 : real;
let
	(inline_index_bound_node_1, weight_bound_node_1, inline_index_bound_node_2, weight_bound_node_2) = transition1_8485_000_PreLookup_node(dim1_coord_in);
	Interp_Using_Pre_Out = transition1_8485_000_Interp_Using_Pre_ext_node(inline_index_bound_node_1, weight_bound_node_1, inline_index_bound_node_2, weight_bound_node_2);
tel

(*
Original block name: regs_12B_with_contracts_All_PP/Subsystem/Regulators/YawRegulator
*)
node  YawRegulator_8455_000(
	beta_1 : real; CVcmd_1 : real; CVcmd_2 : real; CVcmd_3 : real; CVcmd_4 : real;
	CVcmd_5 : real; CVcmd_6 : real; CVcmd_7 : real; CVcmd_8 : real; CV_1 : real;
	CV_2 : real; CV_3 : real; CV_4 : real; CV_5 : real; one_over_Tau_roll_1 : real;
	beta_dot_est_1 : real; vtas_1 : real; __time_step : real; __nb_step : int;)
returns(
	CVdt_cmd_1 : real;);
var 
	Bus_newline_Selector12_1 : real; Math_newline_Function_1 : real; omega_DR_1 : real; transition1_1 : real;
let
	Bus_newline_Selector12_1 = CVcmd_5;
	Math_newline_Function_1 = (kind2_times(omega_DR_1, omega_DR_1));
	omega_DR_1 = 2.0;
	transition1_1 = transition1_8485_000_Lookup_wrapper_node(vtas_1);
	CVdt_cmd_1 = ( ( kind2_times(kind2_times(1.0, ( ( kind2_times(kind2_times(1.0, Bus_newline_Selector12_1), Math_newline_Function_1) ) + ( kind2_times(kind2_times(1.0, Math_newline_Function_1), beta_1) ) + ( kind2_times(kind2_times(1.0, ( ( kind2_times(kind2_times(1.0, omega_DR_1), ( (kind2_times(1.0, 2.0)) )) ) - one_over_Tau_roll_1 )), beta_dot_est_1) ) )), transition1_1) ) + ( kind2_times(kind2_times(1.0, ( 0.0 - transition1_1 + 1.0 )), ( (kind2_times(( Bus_newline_Selector12_1 - CV_3 ), 1.0)) )) ) );
tel

(*
Original block name: regs_12B_with_contracts_All_PP/Subsystem/Regulators
*)
node  Regulators_8146_000(
	beta_adc_deg_1 : real; vtas_adc_kts_1 : real; CVcmd_1 : real; CVcmd_2 : real; CVcmd_3 : real;
	CVcmd_4 : real; CVcmd_5 : real; CVcmd_6 : real; CVcmd_7 : real; CVcmd_8 : real;
	CV_1 : real; CV_2 : real; CV_3 : real; CV_4 : real; CV_5 : real;
	beta_dot_est_1 : real; __time_step : real; __nb_step : int;)
returns(
	lcvdt_cmd_fcs_dps2_1 : real; mcvdt_cmd_fcs_dps2_1 : real; ncvdt_cmd_fcs_dps2_1 : real; xcvdt_cmd_fcs_fps2_1 : real; hcvdt_cmd_fcs_fps2_1 : real;);
var 
	AirspeedRegulator_1 : real; HeightRegulator_1 : real; PitchRegulator_1 : real; RollRegulator_1 : real; RollRegulator_2 : real;
	YawRegulator_1 : real;
let
	AirspeedRegulator_1 = AirspeedRegulator_8152_000(CVcmd_1, CVcmd_2, CVcmd_3, CVcmd_4, CVcmd_5, CVcmd_6, CVcmd_7, CVcmd_8, CV_1, CV_2, CV_3, CV_4, CV_5, __time_step, __nb_step);
	HeightRegulator_1 = HeightRegulator_8190_000(vtas_adc_kts_1, CVcmd_1, CVcmd_2, CVcmd_3, CVcmd_4, CVcmd_5, CVcmd_6, CVcmd_7, CVcmd_8, CV_1, CV_2, CV_3, CV_4, CV_5, __time_step, __nb_step);
	PitchRegulator_1 = PitchRegulator_8319_000(CVcmd_1, CVcmd_2, CVcmd_3, CVcmd_4, CVcmd_5, CVcmd_6, CVcmd_7, CVcmd_8, CV_1, CV_2, CV_3, CV_4, CV_5, vtas_adc_kts_1, __time_step, __nb_step);
	(RollRegulator_1, RollRegulator_2) = RollRegulator_8425_000(CVcmd_1, CVcmd_2, CVcmd_3, CVcmd_4, CVcmd_5, CVcmd_6, CVcmd_7, CVcmd_8, CV_1, CV_2, CV_3, CV_4, CV_5, __time_step, __nb_step);
	YawRegulator_1 = YawRegulator_8455_000(beta_adc_deg_1, CVcmd_1, CVcmd_2, CVcmd_3, CVcmd_4, CVcmd_5, CVcmd_6, CVcmd_7, CVcmd_8, CV_1, CV_2, CV_3, CV_4, CV_5, RollRegulator_2, beta_dot_est_1, vtas_adc_kts_1, __time_step, __nb_step);
	lcvdt_cmd_fcs_dps2_1 = RollRegulator_1;
	mcvdt_cmd_fcs_dps2_1 = PitchRegulator_1;
	ncvdt_cmd_fcs_dps2_1 = YawRegulator_1;
	xcvdt_cmd_fcs_fps2_1 = AirspeedRegulator_1;
	hcvdt_cmd_fcs_fps2_1 = HeightRegulator_1;
tel

(*
Original block name: regs_12B_with_contracts_All_PP/regs_12B_RegulatorSpec/REG001
*)
node  REG001_8609_000(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: regs_12B_with_contracts_All_PP/regs_12B_RegulatorSpec/REG0010
*)
node  REG0010_8613_000(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: regs_12B_with_contracts_All_PP/regs_12B_RegulatorSpec/REG002
*)
node  REG002_8617_000(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: regs_12B_with_contracts_All_PP/regs_12B_RegulatorSpec/REG003
*)
node  REG003_8621_000(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: regs_12B_with_contracts_All_PP/regs_12B_RegulatorSpec/REG004
*)
node  REG004_8625_000(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: regs_12B_with_contracts_All_PP/regs_12B_RegulatorSpec/REG005
*)
node  REG005_8629_000(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: regs_12B_with_contracts_All_PP/regs_12B_RegulatorSpec/REG006
*)
node  REG006_8633_000(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: regs_12B_with_contracts_All_PP/regs_12B_RegulatorSpec/REG007
*)
node  REG007_8637_000(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: regs_12B_with_contracts_All_PP/regs_12B_RegulatorSpec/REG008
*)
node  REG008_8641_000(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: regs_12B_with_contracts_All_PP/regs_12B_RegulatorSpec/REG009
*)
node  REG009_8645_000(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: regs_12B_with_contracts_All_PP/regs_12B_RegulatorSpec
*)
contract regs_12B_RegulatorSpec_8592_000(
	__time_step : real; __nb_step : int;)
returns(
	RegulatorSpec_hcvdt_cmd_fcs_fps2_1 : real; RegulatorSpec_lcvdt_cmd_fcs_dps2_1 : real; RegulatorSpec_mcvdt_cmd_fcs_dps2_1 : real; RegulatorSpec_ncvdt_cmd_fcs_dps2_1 : real; RegulatorSpec_xcvdt_cmd_fcs_fps2_1 : real;);
let
	var Arrow_xxRegulatorSpec_1_ni_7_1 : bool = (true -> (pre (false)));
	var REG001_1 : bool = REG001_8609_000((branch_18_IF_1 <= 100), __time_step, __nb_step);
	guarantee "REG001_8609_000" REG001_1;
	var REG0010_1 : bool = REG0010_8613_000((branch_7_IF_1 <= 32.0), __time_step, __nb_step);
	guarantee "REG0010_8613_000" REG0010_1;
	var REG002_1 : bool = REG002_8617_000((branch_16_IF_1 <= 100), __time_step, __nb_step);
	guarantee "REG002_8617_000" REG002_1;
	var REG003_1 : bool = REG003_8621_000((branch_15_IF_1 <= 100), __time_step, __nb_step);
	guarantee "REG003_8621_000" REG003_1;
	var REG004_1 : bool = REG004_8625_000((branch_13_IF_1 <= 100), __time_step, __nb_step);
	guarantee "REG004_8625_000" REG004_1;
	var REG005_1 : bool = REG005_8629_000((branch_11_IF_1 <= 100), __time_step, __nb_step);
	guarantee "REG005_8629_000" REG005_1;
	var REG006_1 : bool = REG006_8633_000((branch_10_IF_1 <= 50.0), __time_step, __nb_step);
	guarantee "REG006_8633_000" REG006_1;
	var REG007_1 : bool = REG007_8637_000((branch_9_IF_1 <= 50.0), __time_step, __nb_step);
	guarantee "REG007_8637_000" REG007_1;
	var REG008_1 : bool = REG008_8641_000((branch_6_IF_1 <= 50.0), __time_step, __nb_step);
	guarantee "REG008_8641_000" REG008_1;
	var REG009_1 : bool = REG009_8645_000((branch_8_IF_1 <= 32.0), __time_step, __nb_step);
	guarantee "REG009_8645_000" REG009_1;
	var UnconnectedPort_1 : real = 0.0;
	var branch_10_IF_1 : real = if Arrow_xxRegulatorSpec_1_ni_7_1 then
		xxRegulatorSpec_22_rhs_1
	    else ( kind2_times(kind2_times(1.0, ( RegulatorSpec_lcvdt_cmd_fcs_dps2_1 - ( (0.0 -> (pre (RegulatorSpec_lcvdt_cmd_fcs_dps2_1))) ) )), 100.0) );
	var branch_11_IF_1 : int = if Arrow_xxRegulatorSpec_1_ni_7_1 then
		xxRegulatorSpec_2_rhs_1
	    else branch_12_IF_1;
	var branch_12_IF_1 : int = if ( (RegulatorSpec_hcvdt_cmd_fcs_fps2_1 > 32.0) ) then
		xxRegulatorSpec_20_operator_1
	    else xxRegulatorSpec_2_rhs_1;
	var branch_13_IF_1 : int = if Arrow_xxRegulatorSpec_1_ni_7_1 then
		xxRegulatorSpec_2_rhs_1
	    else branch_14_IF_1;
	var branch_14_IF_1 : int = if ( (RegulatorSpec_xcvdt_cmd_fcs_fps2_1 > 32.0) ) then
		xxRegulatorSpec_16_operator_1
	    else xxRegulatorSpec_2_rhs_1;
	var branch_15_IF_1 : int = if ( (RegulatorSpec_ncvdt_cmd_fcs_dps2_1 > 50.0) ) then
		xxRegulatorSpec_2_rhs_1
	    else xxRegulatorSpec_2_rhs_1;
	var branch_16_IF_1 : int = if Arrow_xxRegulatorSpec_1_ni_7_1 then
		xxRegulatorSpec_2_rhs_1
	    else branch_17_IF_1;
	var branch_17_IF_1 : int = if ( (RegulatorSpec_mcvdt_cmd_fcs_dps2_1 > 50.0) ) then
		xxRegulatorSpec_9_operator_1
	    else xxRegulatorSpec_2_rhs_1;
	var branch_18_IF_1 : int = if Arrow_xxRegulatorSpec_1_ni_7_1 then
		xxRegulatorSpec_2_rhs_1
	    else branch_19_IF_1;
	var branch_19_IF_1 : int = if ( (RegulatorSpec_lcvdt_cmd_fcs_dps2_1 > 50.0) ) then
		xxRegulatorSpec_5_operator_1
	    else xxRegulatorSpec_2_rhs_1;
	var branch_6_IF_1 : real = if Arrow_xxRegulatorSpec_1_ni_7_1 then
		xxRegulatorSpec_22_rhs_1
	    else ( kind2_times(kind2_times(1.0, ( RegulatorSpec_ncvdt_cmd_fcs_dps2_1 - ( (0.0 -> (pre (RegulatorSpec_ncvdt_cmd_fcs_dps2_1))) ) )), 100.0) );
	var branch_7_IF_1 : real = if Arrow_xxRegulatorSpec_1_ni_7_1 then
		xxRegulatorSpec_22_rhs_1
	    else ( kind2_times(kind2_times(1.0, ( RegulatorSpec_hcvdt_cmd_fcs_fps2_1 - ( (0.0 -> (pre (RegulatorSpec_hcvdt_cmd_fcs_fps2_1))) ) )), 100.0) );
	var branch_8_IF_1 : real = if Arrow_xxRegulatorSpec_1_ni_7_1 then
		xxRegulatorSpec_22_rhs_1
	    else ( kind2_times(kind2_times(1.0, ( RegulatorSpec_xcvdt_cmd_fcs_fps2_1 - ( (0.0 -> (pre (RegulatorSpec_xcvdt_cmd_fcs_fps2_1))) ) )), 100.0) );
	var branch_9_IF_1 : real = if Arrow_xxRegulatorSpec_1_ni_7_1 then
		xxRegulatorSpec_22_rhs_1
	    else ( kind2_times(kind2_times(1.0, ( RegulatorSpec_mcvdt_cmd_fcs_dps2_1 - ( (0.0 -> (pre (RegulatorSpec_mcvdt_cmd_fcs_dps2_1))) ) )), 100.0) );
	var xxRegulatorSpec_13_operator_1 : int = int_to_int32(( (0 -> (pre (branch_15_IF_1))) ) + 1);
	var xxRegulatorSpec_16_operator_1 : int = int_to_int32(( (0 -> (pre (branch_13_IF_1))) ) + 1);
	var xxRegulatorSpec_20_operator_1 : int = int_to_int32(( (0 -> (pre (branch_11_IF_1))) ) + 1);
	var xxRegulatorSpec_22_rhs_1 : real = 0.0;
	var xxRegulatorSpec_2_rhs_1 : int = 0;
	var xxRegulatorSpec_5_operator_1 : int = int_to_int32(( (0 -> (pre (branch_18_IF_1))) ) + 1);
	var xxRegulatorSpec_9_operator_1 : int = int_to_int32(( (0 -> (pre (branch_16_IF_1))) ) + 1);
	assume "NB_STEP" (__nb_step = (0 -> ((pre (__nb_step)) + 1)));
	assume "TIME_STEP" (__time_step = (0.0 -> ((pre (__time_step)) + 0.20)));
tel

(*
Original block name: regs_12B_with_contracts_All_PP/Subsystem
*)
node  Subsystem_6469_002(
	In1_1 : real; In2_1 : real; In3_1 : real; In4_1 : real; In5_1 : real;
	In6_1 : real; In7_1 : real; In8_1 : real; In9_1 : real; In10_1 : real;
	In11_1 : real; In12_1 : real; In13_1 : real; In14_1 : real; In15_1 : real;
	In16_1 : real; __time_step : real; __nb_step : int;)
returns(
	lcvdt_cmd_fcs_dps2_1 : real; mcvdt_cmd_fcs_dps2_1 : real; ncvdt_cmd_fcs_dps2_1 : real; xcvdt_cmd_fcs_fps2_1 : real; hcvdt_cmd_fcs_fps2_1 : real;);
(*@contract
	import regs_12B_RegulatorSpec_8592_000(__time_step, __nb_step) returns (hcvdt_cmd_fcs_fps2_1, lcvdt_cmd_fcs_dps2_1, mcvdt_cmd_fcs_dps2_1, ncvdt_cmd_fcs_dps2_1, xcvdt_cmd_fcs_fps2_1);
*)
var 
	Inputs_1 : real; Inputs_2 : real; Inputs_3 : real; Inputs_4 : real; Inputs_5 : real;
	Inputs_6 : real; Inputs_7 : real; Inputs_8 : real; Inputs_9 : real; Inputs_10 : real;
	Inputs_11 : real; Inputs_12 : real; Inputs_13 : real; Inputs_14 : real; Inputs_15 : real;
	Inputs_16 : real; Regulators_1 : real; Regulators_2 : real; Regulators_3 : real; Regulators_4 : real;
	Regulators_5 : real;
let
	(Inputs_1, Inputs_2, Inputs_3, Inputs_4, Inputs_5, Inputs_6, Inputs_7, Inputs_8, Inputs_9, Inputs_10, Inputs_11, Inputs_12, Inputs_13, Inputs_14, Inputs_15, Inputs_16) = Inputs_6747_002(In1_1, In2_1, In3_1, In4_1, In5_1, In6_1, In7_1, In8_1, In9_1, In10_1, In11_1, In12_1, In13_1, In14_1, In15_1, In16_1, __time_step, __nb_step);
	(Regulators_1, Regulators_2, Regulators_3, Regulators_4, Regulators_5) = Regulators_8146_000(Inputs_1, Inputs_2, Inputs_3, Inputs_4, Inputs_5, Inputs_6, Inputs_7, Inputs_8, Inputs_9, Inputs_10, Inputs_11, Inputs_12, Inputs_13, Inputs_14, Inputs_15, Inputs_16, __time_step, __nb_step);
	lcvdt_cmd_fcs_dps2_1 = Regulators_1;
	mcvdt_cmd_fcs_dps2_1 = Regulators_2;
	ncvdt_cmd_fcs_dps2_1 = Regulators_3;
	xcvdt_cmd_fcs_fps2_1 = Regulators_4;
	hcvdt_cmd_fcs_fps2_1 = Regulators_5;
tel

(*
Original block name: regs_12B_with_contracts_All_PP
*)
node  regs_12B_with_contracts_All_PP(
	beta_adc_deg_1 : real; vtas_adc_kts_1 : real; lcv_cmd_fcs_dps__1 : real; hdg_des_deg_1 : real; mcv_cmd_fcs_dps_1 : real;
	alt_des_ft_1 : real; ncv_cmd_fcs_dps_1 : real; xcv_cmd_fcs_fps_1 : real; airspeed_des_fps_1 : real; hcv_cmd_fcs_fps_1 : real;
	lcv_fps_dps_1 : real; mcv_fcs_dps_1 : real; ncv_fcs_dps_1 : real; dcv_fcs_fps_1 : real; zcv_fcs_fps_1 : real;
	beta_dot_1 : real;)
returns(
	lcvdt_cmd_fcs_dps2_1 : real; mcvdt_cmd_fcs_dps2_1 : real; ncvdt_cmd_fcs_dps2_1 : real; xcvdt_cmd_fcs_fps2_1 : real; hcvdt_cmd_fcs_fps2_1 : real;);
var 
	Subsystem_1 : real; Subsystem_2 : real; Subsystem_3 : real; Subsystem_4 : real; Subsystem_5 : real;
	__time_step : real; __nb_step : int;
let
	(Subsystem_1, Subsystem_2, Subsystem_3, Subsystem_4, Subsystem_5) = Subsystem_6469_002(beta_adc_deg_1, vtas_adc_kts_1, lcv_cmd_fcs_dps__1, hdg_des_deg_1, mcv_cmd_fcs_dps_1, alt_des_ft_1, ncv_cmd_fcs_dps_1, xcv_cmd_fcs_fps_1, airspeed_des_fps_1, hcv_cmd_fcs_fps_1, lcv_fps_dps_1, mcv_fcs_dps_1, ncv_fcs_dps_1, dcv_fcs_fps_1, zcv_fcs_fps_1, beta_dot_1, __time_step, __nb_step);
	lcvdt_cmd_fcs_dps2_1 = Subsystem_1;
	mcvdt_cmd_fcs_dps2_1 = Subsystem_2;
	ncvdt_cmd_fcs_dps2_1 = Subsystem_3;
	xcvdt_cmd_fcs_fps2_1 = Subsystem_4;
	hcvdt_cmd_fcs_fps2_1 = Subsystem_5;
	__time_step = (0.0 -> ((pre (__time_step)) + 0.20));
	__nb_step = (0 -> ((pre (__nb_step)) + 1));
tel

