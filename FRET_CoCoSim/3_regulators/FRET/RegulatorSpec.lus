--Historically
node H(X:bool) returns (Y:bool);
let
    Y = X -> (X and (pre Y));
tel

--Y since inclusive X
node SI(X,Y: bool) returns (Z:bool);
let
Z = Y and (X or (false -> pre Z));
tel

--Y since X
node S(X,Y: bool) returns (Z:bool);
let
Z = X or (Y and (false -> pre Z));
tel

--Once
node O(X:bool) returns (Y:bool);
let
 Y = X or (false -> pre Y);
tel

--Timed Once: less than or equal to N
node OTlore(const N: int; X: bool;) returns (Y: bool);
    var C:int;
let
    C = if X then 0
        else (-1 -> pre C + (if pre C <0 then 0 else 1));

    Y = 0 <= C and C <= N;
tel

--Timed Once: general case
node OT(const L: int; const R: int; X: bool;) returns (Y: bool);
var  D:bool;
let
  D=delay(X, R);
  Y=OTlore(L-R, D);
tel

-- Timed Historically: general case
node HT(const L: int; const R: int; X: bool;) returns (Y: bool);
let
  Y = not OT(L, R, not X);
tel

-- Timed Since: general case
node ST(const L: int; const R: int; X: bool; Y: bool;)  returns (Z: bool);
let
  Z = S(X, Y) and OT(L, R, X);
tel

-- Timed Since: general case
node SIT(const L: int; const R: int; X: bool; Y: bool;) returns (Z: bool);
let
  Z = SI(X, Y) and OT(L, R, X);
tel


node delay(X:bool; const R:int;) returns(Y:bool);
let

  Y = X;
 
tel


(*@contract RegulatorSpec (not_used:real) returns (hcvdt_cmd_fcs_fps2: real; lcvdt_cmd_fcs_dps2: real; mcvdt_cmd_fcs_dps2: real; ncvdt_cmd_fcs_dps2: real; xcvdt_cmd_fcs_fps2: real; );

let








(**)

--( Req text: Regulator shall always satisfy count_roll_output_exceeding_50 <= 100  )
var count_roll_output_exceeding_50: int = 0 -> if (lcvdt_cmd_fcs_dps2 > 50.0) then pre count_roll_output_exceeding_50 +1 else 0;
guarantee "REG-001" count_roll_output_exceeding_50 <= 100;


--( Req text: Regulator shall always satisfy count_pitch_output_exceeding_50 <= 100   )
var count_pitch_output_exceeding_50: int = 0 -> if (mcvdt_cmd_fcs_dps2 > 50.0) then pre count_pitch_output_exceeding_50 +1 else 0;
guarantee "REG-002" count_pitch_output_exceeding_50 <= 100;


--( Req text: Regulator shall always satisfy count_yaw_output_exceeding_50 <= 100  )
var count_yaw_output_exceeding_50: int = if (ncvdt_cmd_fcs_dps2 > 50.0) then pre count_yaw_output_exceeding_50 +1 else 0;
guarantee "REG-003" count_yaw_output_exceeding_50 <= 100;


--( Req text: Regulator shall always satisfy count_airspeed_output_exceeding_32 <= 100  )
var count_airspeed_output_exceeding_32: int = 0 -> if (xcvdt_cmd_fcs_fps2 > 32.0) then pre count_airspeed_output_exceeding_32 +1 else 0;
guarantee "REG-004" count_airspeed_output_exceeding_32 <= 100;


--( Req text: Regulator shall always satisfy count_height_output_exceeding_32 <= 100  )
var count_height_output_exceeding_32: int = 0 -> if (hcvdt_cmd_fcs_fps2 > 32.0) then pre count_height_output_exceeding_32 +1 else 0;
guarantee "REG-005" count_height_output_exceeding_32 <= 100;




(* Req text: Regulator shall always satisfy roll_command_acceleration <= 50.0  *)
var roll_command_acceleration: real = 0.0 -> (lcvdt_cmd_fcs_dps2 - pre lcvdt_cmd_fcs_dps2) * 100.0;
guarantee "REG-006" roll_command_acceleration <= 50.0;


(* Req text: Regulator shall always satisfy pitch_command_acceleration <= 50.0  *)
var pitch_command_acceleration: real = 0.0 -> ( mcvdt_cmd_fcs_dps2 - pre mcvdt_cmd_fcs_dps2) * 100.0;
guarantee "REG-007" pitch_command_acceleration <= 50.0;


(* Req text: Regulator shall always satisfy yaw_command_acceleration <= 50.0  *)
var yaw_command_acceleration: real = 0.0 -> ( ncvdt_cmd_fcs_dps2 - pre ncvdt_cmd_fcs_dps2) * 100.0;
guarantee "REG-008" yaw_command_acceleration <= 50.0;


(* Req text: Regulator shall always satisfy airspeed_command_acceleration <= 32.0  *)
var airspeed_command_acceleration: real = 0.0 -> ( xcvdt_cmd_fcs_fps2 - pre xcvdt_cmd_fcs_fps2) * 100.0;
guarantee "REG-009" airspeed_command_acceleration <= 32.0;


(* Req text: Regulator shall always satisfy height_command_acceleration <= 32.0  *)
var height_command_acceleration: real = 0.0 -> ( hcvdt_cmd_fcs_fps2 - pre hcvdt_cmd_fcs_fps2) * 100.0;
guarantee "REG-010" height_command_acceleration <= 32.0;




tel
*)
