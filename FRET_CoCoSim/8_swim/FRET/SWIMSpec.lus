#open "lustrec_math"
--Historically
node H(X:bool) returns (Y:bool);
let
    Y = X -> (X and (pre Y));
tel

--Y since inclusive X
node SI(X,Y: bool) returns (Z:bool);
let
Z = Y and (X or (false -> pre Z));
tel

--Y since X
node S(X,Y: bool) returns (Z:bool);
let
Z = X or (Y and (false -> pre Z));
tel

--Once
node O(X:bool) returns (Y:bool);
let
 Y = X or (false -> pre Y);
tel

--Timed Once: less than or equal to N
node OTlore(const N: int; X: bool;) returns (Y: bool);
    var C:int;
let
    C = if X then 0
        else (-1 -> pre C + (if pre C <0 then 0 else 1));

    Y = 0 <= C and C <= N;
tel

--Timed Once: general case
node OT(const L: int; const R: int; X: bool;) returns (Y: bool);
var  D:bool;
let
  D=delay(X, R);
  Y=OTlore(L-R, D);
tel

-- Timed Historically: general case
node HT(const L: int; const R: int; X: bool;) returns (Y: bool);
let
  Y = not OT(L, R, not X);
tel

-- Timed Since: general case
node ST(const L: int; const R: int; X: bool; Y: bool;)  returns (Z: bool);
let
  Z = S(X, Y) and OT(L, R, X);
tel

-- Timed Since: general case
node SIT(const L: int; const R: int; X: bool; Y: bool;) returns (Z: bool);
let
  Z = SI(X, Y) and OT(L, R, X);
tel


node delay(X:bool; const R:int;) returns(Y:bool);
let

  Y = X;
 
tel

--node imported sqrt_FRET(x:real) returns(y:real);



(*@contract SWIMSpec (weight:real; storeCat:int; vehAirPress:real; ) returns (CalAirspeedMin: real; lowSpeedWarningAllowed: real; swimGet_agcasLowSpeedWarn: real; warningTrigForMinPress: real; );

let

var E_SWIM_WARNING_ON:real = 1.0;
var lowSpeedWarningTrue: bool = swimGet_agcasLowSpeedWarn = E_SWIM_WARNING_ON;
var sqrtOfWeight: real = sqrt(weight);
var CAT1: int = 0;
var CAT3: int = 1;

assume weight > 0.0;
--assume sqrtOfWeight*sqrtOfWeight = weight;
--assume sqrtOfWeight > 0.0;





(* Req text: SWIM shall always satisfy ((storeCat = CAT1) =>  (CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0))  *)
guarantee "SWIM-001a" ( storeCat = CAT1 ) => ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 );


(* Req text: SWIM shall always satisfy ((storeCat = CAT3) => (CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0))   *)
guarantee "SWIM-001b" ( storeCat = CAT3 ) => ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 );

(* Req text: SWIM shall always satisfy ((lowSpeedWarningAllowed  & vehAirPress < warningTrigForMinPress) => lowSpeedWarningTrue)  *)
guarantee "SWIM-002" ( (lowSpeedWarningAllowed = 1.0) and vehAirPress < warningTrigForMinPress ) => lowSpeedWarningTrue;

tel
*)
