-- This file has been generated by CoCoSim2.

-- Compiler: Lustre compiler 2 (nasa_toLustre.ToLustre.m)
-- Time: 05-Nov-2019 16:04:31
include "lustrec_math_more_precise_abstraction.lus"
node kind2_times(x, y: real) returns (z: real) ;
var abs_x, abs_y, abs_z: real;
let
   abs_x = if x < 0.0 then -x else x ;
    abs_y = if y < 0.0 then -y else y ;
    abs_z = if z < 0.0 then -z else z ;
    -- Neutral.
    assert (z = y) = ((x = 1.0) or (y = 0.0)) ;
    assert (z = x) = ((y = 1.0) or (x = 0.0)) ;
    -- Absorbing.
    assert (z = 0.0) = ( (x = 0.0) or (y = 0.0) ) ;
    -- Sign.
    assert (z > 0.0) = (
      ( (x > 0.0) and (y > 0.0) ) or
      ( (x < 0.0) and (y < 0.0) )
    ) ;
    assert (z < 0.0) = (
      ( (x > 0.0) and (y < 0.0) ) or
      ( (x < 0.0) and (y > 0.0) )
    ) ;
    -- Loose proportionality.
    assert (abs_z >= abs_y) = ((abs_x >= 1.0) or (y = 0.0)) ;
    assert (abs_z >= abs_x) = ((abs_y >= 1.0) or (x = 0.0)) ;
    assert (abs_z <= abs_y) = ((abs_x <= 1.0) or (y = 0.0)) ;
    assert (abs_z <= abs_x) = ((abs_y <= 1.0) or (x = 0.0)) ;
    z = x * y ;
tel
node  bool_to_real(
	x : bool;)
returns(
	y : real;);
let
	y = if x then
		1.0
	    else 0.0;
tel

node  int_to_real(
	x : int;)
returns(
	y : real;);
let
	y = (real (x));
tel


(*
Original block name: swim_12B_with_contracts_PP/swim_12B_SWIMSpec/SWIM_minus_001A
*)
node  SWIM_minus_001A_340_035(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_12B_SWIMSpec/SWIM_minus_001B
*)
node  SWIM_minus_001B_344_035(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_12B_SWIMSpec/SWIM_minus_002
*)
node  SWIM_minus_002_348_035(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	guarantee_1 : bool;);
let
	guarantee_1 = In1_1;
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_12B_SWIMSpec/assume
*)
node  assume_336_035(
	In1_1 : bool; __time_step : real; __nb_step : int;)
returns(
	assume_1 : bool;);
let
	assume_1 = In1_1;
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_12B_SWIMSpec/spec139_operator
*)
node  spec139_operator_355_035(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
var 
	Logical_newline_Operator_1 : bool; Logical_newline_Operator1_1 : bool;
let
	Logical_newline_Operator_1 = ( Logical_newline_Operator1_1 or B_1 );
	Logical_newline_Operator1_1 = (not (A_1));
	A_equal__equal__gt_B_1 = Logical_newline_Operator_1;
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_12B_SWIMSpec/spec156_operator
*)
node  spec156_operator_356_035(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
var 
	Logical_newline_Operator_1 : bool; Logical_newline_Operator1_1 : bool;
let
	Logical_newline_Operator_1 = ( Logical_newline_Operator1_1 or B_1 );
	Logical_newline_Operator1_1 = (not (A_1));
	A_equal__equal__gt_B_1 = Logical_newline_Operator_1;
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_12B_SWIMSpec/spec170_operator
*)
node  spec170_operator_357_035(
	A_1 : bool; B_1 : bool; __time_step : real; __nb_step : int;)
returns(
	A_equal__equal__gt_B_1 : bool;);
var 
	Logical_newline_Operator_1 : bool; Logical_newline_Operator1_1 : bool;
let
	Logical_newline_Operator_1 = ( Logical_newline_Operator1_1 or B_1 );
	Logical_newline_Operator1_1 = (not (A_1));
	A_equal__equal__gt_B_1 = Logical_newline_Operator_1;
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_airspeed/AirspeedMonitoring/IfActionSubsystem
*)
node  IfActionSubsystem_442_035(
	__time_step : real; __nb_step : int;)
returns(
	SWIM_AirspeedWarningAllowed_1 : real;);
var 
	Constant_1 : real;
let
	Constant_1 = 1.0;
	SWIM_AirspeedWarningAllowed_1 = Constant_1;
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_airspeed/AirspeedMonitoring/IfActionSubsystem
*)
node  IfActionSubsystem_442_035_condExecSS(
	_isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	SWIM_AirspeedWarningAllowed_1 : real;);
var 
	pre_SWIM_AirspeedWarningAllowed_1 : real;
let
	pre_SWIM_AirspeedWarningAllowed_1 = if (__nb_step > 0) then
		(pre (SWIM_AirspeedWarningAllowed_1))
	    else 0.0;
	SWIM_AirspeedWarningAllowed_1 = merge(_isEnabled;
		 (activate IfActionSubsystem_442_035 every _isEnabled)(__time_step, __nb_step); 
		(pre_SWIM_AirspeedWarningAllowed_1) when not(_isEnabled));
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_airspeed/AirspeedMonitoring/IfActionSubsystem1
*)
node  IfActionSubsystem1_447_035(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
let
	Out1_1 = In1_1;
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_airspeed/AirspeedMonitoring/IfActionSubsystem1
*)
node  IfActionSubsystem1_447_035_condExecSS(
	In1_1 : real; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	pre_Out1_1 : real;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0;
	Out1_1 = merge(_isEnabled;
		 (activate IfActionSubsystem1_447_035 every _isEnabled)(In1_1, __time_step, __nb_step); 
		(pre_Out1_1) when not(_isEnabled));
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_airspeed/AirspeedMonitoring/IfActionSubsystem2
*)
node  IfActionSubsystem2_452_035(
	__time_step : real; __nb_step : int;)
returns(
	SWIM_AirspeedWarningAllowed_1 : real;);
var 
	Constant_1 : real;
let
	Constant_1 = 0.0;
	SWIM_AirspeedWarningAllowed_1 = Constant_1;
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_airspeed/AirspeedMonitoring/IfActionSubsystem2
*)
node  IfActionSubsystem2_452_035_condExecSS(
	_isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	SWIM_AirspeedWarningAllowed_1 : real;);
var 
	pre_SWIM_AirspeedWarningAllowed_1 : real;
let
	pre_SWIM_AirspeedWarningAllowed_1 = if (__nb_step > 0) then
		(pre (SWIM_AirspeedWarningAllowed_1))
	    else 0.0;
	SWIM_AirspeedWarningAllowed_1 = merge(_isEnabled;
		 (activate IfActionSubsystem2_452_035 every _isEnabled)(__time_step, __nb_step); 
		(pre_SWIM_AirspeedWarningAllowed_1) when not(_isEnabled));
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_airspeed/AirspeedMonitoring/IfActionSubsystem3
*)
node  IfActionSubsystem3_457_035(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
let
	Out1_1 = In1_1;
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_airspeed/AirspeedMonitoring/IfActionSubsystem3
*)
node  IfActionSubsystem3_457_035_condExecSS(
	In1_1 : real; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	pre_Out1_1 : real;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0;
	Out1_1 = merge(_isEnabled;
		 (activate IfActionSubsystem3_457_035 every _isEnabled)(In1_1, __time_step, __nb_step); 
		(pre_Out1_1) when not(_isEnabled));
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_airspeed/AirspeedMonitoring
*)
node  AirspeedMonitoring_435_035(
	S_ImpactPressure_lbspft2_1 : real; SWIM_Qcmin_lbspft2_1 : real; diGet_S_LandingGearAltFlap_1 : bool; __time_step : real; __nb_step : int;)
returns(
	SWIM_AirspeedWarningAllowed_1 : real;);
var 
	Constant1_1 : real; Constant2_1 : real; If_1 : bool; If_2 : bool; If1_1 : bool;
	If1_2 : bool; ExecutionCond_of_IfActionSubsystem_442_035 : bool; IfActionSubsystem_1 : real; ExecutionCond_of_IfActionSubsystem1_447_035 : bool; IfActionSubsystem1_1 : real;
	ExecutionCond_of_IfActionSubsystem2_452_035 : bool; IfActionSubsystem2_1 : real; ExecutionCond_of_IfActionSubsystem3_457_035 : bool; IfActionSubsystem3_1 : real; LogicalOperator_1 : bool;
	Merge_1 : real; Merge1_1 : real; RelationalOperator_1 : bool; RelationalOperator2_1 : bool; RelationalOperator3_1 : bool;
	UnitDelay_1 : real;
let
	Constant1_1 = 1.0;
	Constant2_1 = 0.0;
	(If_1, If_2) = if LogicalOperator_1 then
		(true, false)
	    else (false, true);
	(If1_1, If1_2) = if RelationalOperator3_1 then
		(true, false)
	    else (false, true);
	ExecutionCond_of_IfActionSubsystem_442_035 = If_1;
	IfActionSubsystem_1 = IfActionSubsystem_442_035_condExecSS(ExecutionCond_of_IfActionSubsystem_442_035, __time_step, __nb_step);
	ExecutionCond_of_IfActionSubsystem1_447_035 = If_2;
	IfActionSubsystem1_1 = IfActionSubsystem1_447_035_condExecSS(UnitDelay_1, ExecutionCond_of_IfActionSubsystem1_447_035, __time_step, __nb_step);
	ExecutionCond_of_IfActionSubsystem2_452_035 = If1_1;
	IfActionSubsystem2_1 = IfActionSubsystem2_452_035_condExecSS(ExecutionCond_of_IfActionSubsystem2_452_035, __time_step, __nb_step);
	ExecutionCond_of_IfActionSubsystem3_457_035 = If1_2;
	IfActionSubsystem3_1 = IfActionSubsystem3_457_035_condExecSS(Merge_1, ExecutionCond_of_IfActionSubsystem3_457_035, __time_step, __nb_step);
	LogicalOperator_1 = ( RelationalOperator2_1 and RelationalOperator_1 );
	Merge_1 = if ExecutionCond_of_IfActionSubsystem_442_035 then
		IfActionSubsystem_1
	    else if ExecutionCond_of_IfActionSubsystem1_447_035 then
		IfActionSubsystem1_1
	    else (0.0 -> (pre (Merge_1)));
	Merge1_1 = if ExecutionCond_of_IfActionSubsystem2_452_035 then
		IfActionSubsystem2_1
	    else if ExecutionCond_of_IfActionSubsystem3_457_035 then
		IfActionSubsystem3_1
	    else (0.0 -> (pre (Merge1_1)));
	RelationalOperator_1 = (S_ImpactPressure_lbspft2_1 > SWIM_Qcmin_lbspft2_1);
	RelationalOperator2_1 = (bool_to_real(diGet_S_LandingGearAltFlap_1) = Constant1_1);
	RelationalOperator3_1 = (bool_to_real(diGet_S_LandingGearAltFlap_1) = Constant2_1);
	UnitDelay_1 = (0.0 -> (pre (Merge1_1)));
	SWIM_AirspeedWarningAllowed_1 = Merge1_1;
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_airspeed/CalculateminimumimpactpressureforAGCASoperationtobesuspendedandsenttostandby
*)
node  CalculateminimumimpactpressureforAGCASoperationtobesuspendedandsenttostandby_495_035(
	SWIM_Qcmin_lbspft2_1 : real; __time_step : real; __nb_step : int;)
returns(
	o_SWIM_QcMinDisable_lbspft2_1 : real;);
var 
	Constant_1 : real; Sum_1 : real;
let
	Constant_1 = -28.719999999999999;
	Sum_1 = 0.0 + SWIM_Qcmin_lbspft2_1 + Constant_1;
	o_SWIM_QcMinDisable_lbspft2_1 = Sum_1;
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_airspeed/CalculateminimumimpactpressureforwarningtopilotthatAGCASoperationisdegraded
*)
node  CalculateminimumimpactpressureforwarningtopilotthatAGCASoperationisdegraded_503_035(
	SWIM_CalAirspeedmin_kts_1 : real; __time_step : real; __nb_step : int;)
returns(
	o_SWIM_Qcmin_lbspft2_1 : real;);
var 
	Constant_1 : real; Constant1_1 : real; Gain_1 : real; Gain1_1 : real; Sum_1 : real;
	Sum1_1 : real;
let
	Constant_1 = -2.09060;
	Constant1_1 = 0.10;
	Gain_1 = (kind2_times(SWIM_CalAirspeedmin_kts_1, 0.0203060));
	Gain1_1 = (kind2_times(Sum1_1, 70.718400000000003));
	Sum_1 = 0.0 + Gain_1 + Constant_1;
	Sum1_1 = 0.0 + Sum_1 + Constant1_1;
	o_SWIM_Qcmin_lbspft2_1 = Gain1_1;
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_airspeed/CalculatetheminimumcalibratedairspeedbasedonCatSwitch/IfActionSubsystem
*)
node  IfActionSubsystem_524_002(
	AircraftWeight_lbs_1 : real; __time_step : real; __nb_step : int;)
returns(
	o_SWIM_CalAirspeedmin_kts_1 : real;);
var 
	Constant_1 : real; Gain_1 : real; Sqrt_1 : real; Sum_1 : real;
let
	Constant_1 = 10.0;
	Gain_1 = (kind2_times(Sqrt_1, 1.259210));
	Sqrt_1 = sqrt(AircraftWeight_lbs_1);
	Sum_1 = 0.0 + Gain_1 + Constant_1;
	o_SWIM_CalAirspeedmin_kts_1 = Sum_1;
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_airspeed/CalculatetheminimumcalibratedairspeedbasedonCatSwitch/IfActionSubsystem
*)
node  IfActionSubsystem_524_002_condExecSS(
	AircraftWeight_lbs_1 : real; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	o_SWIM_CalAirspeedmin_kts_1 : real;);
var 
	pre_o_SWIM_CalAirspeedmin_kts_1 : real;
let
	pre_o_SWIM_CalAirspeedmin_kts_1 = if (__nb_step > 0) then
		(pre (o_SWIM_CalAirspeedmin_kts_1))
	    else 0.0;
	o_SWIM_CalAirspeedmin_kts_1 = merge(_isEnabled;
		 (activate IfActionSubsystem_524_002 every _isEnabled)(AircraftWeight_lbs_1, __time_step, __nb_step); 
		(pre_o_SWIM_CalAirspeedmin_kts_1) when not(_isEnabled));
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_airspeed/CalculatetheminimumcalibratedairspeedbasedonCatSwitch/IfActionSubsystem1
*)
node  IfActionSubsystem1_537_018(
	AircraftWeight_lbs_1 : real; __time_step : real; __nb_step : int;)
returns(
	o_SWIM_CalAirspeedmin_kts_1 : real;);
var 
	Constant_1 : real; Gain_1 : real; Sqrt_1 : real; Sum_1 : real;
let
	Constant_1 = 10.0;
	Gain_1 = (kind2_times(Sqrt_1, 1.336940));
	Sqrt_1 = sqrt(AircraftWeight_lbs_1);
	Sum_1 = 0.0 + Gain_1 + Constant_1;
	o_SWIM_CalAirspeedmin_kts_1 = Sum_1;
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_airspeed/CalculatetheminimumcalibratedairspeedbasedonCatSwitch/IfActionSubsystem1
*)
node  IfActionSubsystem1_537_018_condExecSS(
	AircraftWeight_lbs_1 : real; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	o_SWIM_CalAirspeedmin_kts_1 : real;);
var 
	pre_o_SWIM_CalAirspeedmin_kts_1 : real;
let
	pre_o_SWIM_CalAirspeedmin_kts_1 = if (__nb_step > 0) then
		(pre (o_SWIM_CalAirspeedmin_kts_1))
	    else 0.0;
	o_SWIM_CalAirspeedmin_kts_1 = merge(_isEnabled;
		 (activate IfActionSubsystem1_537_018 every _isEnabled)(AircraftWeight_lbs_1, __time_step, __nb_step); 
		(pre_o_SWIM_CalAirspeedmin_kts_1) when not(_isEnabled));
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_airspeed/CalculatetheminimumcalibratedairspeedbasedonCatSwitch
*)
node  CalculatetheminimumcalibratedairspeedbasedonCatSwitch_519_002(
	AircraftWeight_lbs_1 : real; diGet_S_CatSwitchPosition_1 : int; __time_step : real; __nb_step : int;)
returns(
	SWIM_CalAirspeedmin_kts_1 : real;);
var 
	Constant_1 : real; If_1 : bool; If_2 : bool; ExecutionCond_of_IfActionSubsystem_524_002 : bool; IfActionSubsystem_1 : real;
	ExecutionCond_of_IfActionSubsystem1_537_018 : bool; IfActionSubsystem1_1 : real; Merge_1 : real; RelationalOperator_1 : bool;
let
	assert ((-2147483648 <= diGet_S_CatSwitchPosition_1) and (diGet_S_CatSwitchPosition_1 <= 2147483647));
	Constant_1 = 0.0;
	(If_1, If_2) = if RelationalOperator_1 then
		(true, false)
	    else (false, true);
	ExecutionCond_of_IfActionSubsystem_524_002 = If_1;
	IfActionSubsystem_1 = IfActionSubsystem_524_002_condExecSS(AircraftWeight_lbs_1, ExecutionCond_of_IfActionSubsystem_524_002, __time_step, __nb_step);
	ExecutionCond_of_IfActionSubsystem1_537_018 = If_2;
	IfActionSubsystem1_1 = IfActionSubsystem1_537_018_condExecSS(AircraftWeight_lbs_1, ExecutionCond_of_IfActionSubsystem1_537_018, __time_step, __nb_step);
	Merge_1 = if ExecutionCond_of_IfActionSubsystem_524_002 then
		IfActionSubsystem_1
	    else if ExecutionCond_of_IfActionSubsystem1_537_018 then
		IfActionSubsystem1_1
	    else (0.0 -> (pre (Merge_1)));
	RelationalOperator_1 = (int_to_real(diGet_S_CatSwitchPosition_1) = Constant_1);
	SWIM_CalAirspeedmin_kts_1 = Merge_1;
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_airspeed/Gettheaircraftweight
*)
node  Gettheaircraftweight_566_001(
	muxGet_T_Mux_AircraftGrossWeight_lbs_1 : real; __time_step : real; __nb_step : int;)
returns(
	AircraftWeight_lbs_1 : real;);
let
	AircraftWeight_lbs_1 = muxGet_T_Mux_AircraftGrossWeight_lbs_1;
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_airspeed/IssueWarning/IfActionSubsystem/IfActionSubsystem
*)
node  IfActionSubsystem_587_001(
	__time_step : real; __nb_step : int;)
returns(
	SWIM_SelfAgcasLowSpeedWarn_1 : real;);
var 
	Constant_1 : real;
let
	Constant_1 = 1.0;
	SWIM_SelfAgcasLowSpeedWarn_1 = Constant_1;
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_airspeed/IssueWarning/IfActionSubsystem/IfActionSubsystem
*)
node  IfActionSubsystem_587_001_condExecSS(
	_isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	SWIM_SelfAgcasLowSpeedWarn_1 : real;);
var 
	pre_SWIM_SelfAgcasLowSpeedWarn_1 : real;
let
	pre_SWIM_SelfAgcasLowSpeedWarn_1 = if (__nb_step > 0) then
		(pre (SWIM_SelfAgcasLowSpeedWarn_1))
	    else 0.0;
	SWIM_SelfAgcasLowSpeedWarn_1 = merge(_isEnabled;
		 (activate IfActionSubsystem_587_001 every _isEnabled)(__time_step, __nb_step); 
		(pre_SWIM_SelfAgcasLowSpeedWarn_1) when not(_isEnabled));
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_airspeed/IssueWarning/IfActionSubsystem/IfActionSubsystem1
*)
node  IfActionSubsystem1_592_001(
	__time_step : real; __nb_step : int;)
returns(
	SWIM_SelfAgcasLowSpeedWarn_1 : real;);
var 
	Constant_1 : real;
let
	Constant_1 = 0.0;
	SWIM_SelfAgcasLowSpeedWarn_1 = Constant_1;
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_airspeed/IssueWarning/IfActionSubsystem/IfActionSubsystem1
*)
node  IfActionSubsystem1_592_001_condExecSS(
	_isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	SWIM_SelfAgcasLowSpeedWarn_1 : real;);
var 
	pre_SWIM_SelfAgcasLowSpeedWarn_1 : real;
let
	pre_SWIM_SelfAgcasLowSpeedWarn_1 = if (__nb_step > 0) then
		(pre (SWIM_SelfAgcasLowSpeedWarn_1))
	    else 0.0;
	SWIM_SelfAgcasLowSpeedWarn_1 = merge(_isEnabled;
		 (activate IfActionSubsystem1_592_001 every _isEnabled)(__time_step, __nb_step); 
		(pre_SWIM_SelfAgcasLowSpeedWarn_1) when not(_isEnabled));
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_airspeed/IssueWarning/IfActionSubsystem
*)
node  IfActionSubsystem_582_001(
	S_ImpactPressure_lbspft2_1 : real; SWIM_Qcmin_lbspft2_1 : real; __time_step : real; __nb_step : int;)
returns(
	SWIM_SelfAgcasLowSpeedWarn_1 : real;);
var 
	If_1 : bool; If_2 : bool; ExecutionCond_of_IfActionSubsystem_587_001 : bool; IfActionSubsystem_1 : real; ExecutionCond_of_IfActionSubsystem1_592_001 : bool;
	IfActionSubsystem1_1 : real; Merge_1 : real; RelationalOperator_1 : bool;
let
	(If_1, If_2) = if RelationalOperator_1 then
		(true, false)
	    else (false, true);
	ExecutionCond_of_IfActionSubsystem_587_001 = If_1;
	IfActionSubsystem_1 = IfActionSubsystem_587_001_condExecSS(ExecutionCond_of_IfActionSubsystem_587_001, __time_step, __nb_step);
	ExecutionCond_of_IfActionSubsystem1_592_001 = If_2;
	IfActionSubsystem1_1 = IfActionSubsystem1_592_001_condExecSS(ExecutionCond_of_IfActionSubsystem1_592_001, __time_step, __nb_step);
	Merge_1 = if ExecutionCond_of_IfActionSubsystem_587_001 then
		IfActionSubsystem_1
	    else if ExecutionCond_of_IfActionSubsystem1_592_001 then
		IfActionSubsystem1_1
	    else (0.0 -> (pre (Merge_1)));
	RelationalOperator_1 = (S_ImpactPressure_lbspft2_1 < SWIM_Qcmin_lbspft2_1);
	SWIM_SelfAgcasLowSpeedWarn_1 = Merge_1;
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_airspeed/IssueWarning/IfActionSubsystem
*)
node  IfActionSubsystem_582_001_condExecSS(
	S_ImpactPressure_lbspft2_1 : real; SWIM_Qcmin_lbspft2_1 : real; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	SWIM_SelfAgcasLowSpeedWarn_1 : real;);
var 
	pre_SWIM_SelfAgcasLowSpeedWarn_1 : real;
let
	pre_SWIM_SelfAgcasLowSpeedWarn_1 = if (__nb_step > 0) then
		(pre (SWIM_SelfAgcasLowSpeedWarn_1))
	    else 0.0;
	SWIM_SelfAgcasLowSpeedWarn_1 = merge(_isEnabled;
		 (activate IfActionSubsystem_582_001 every _isEnabled)(S_ImpactPressure_lbspft2_1, SWIM_Qcmin_lbspft2_1, __time_step, __nb_step); 
		(pre_SWIM_SelfAgcasLowSpeedWarn_1) when not(_isEnabled));
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_airspeed/IssueWarning/IfActionSubsystem1
*)
node  IfActionSubsystem1_608_001(
	In1_1 : real; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
let
	Out1_1 = In1_1;
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_airspeed/IssueWarning/IfActionSubsystem1
*)
node  IfActionSubsystem1_608_001_condExecSS(
	In1_1 : real; _isEnabled : bool; __time_step : real; __nb_step : int;)
returns(
	Out1_1 : real;);
var 
	pre_Out1_1 : real;
let
	pre_Out1_1 = if (__nb_step > 0) then
		(pre (Out1_1))
	    else 0.0;
	Out1_1 = merge(_isEnabled;
		 (activate IfActionSubsystem1_608_001 every _isEnabled)(In1_1, __time_step, __nb_step); 
		(pre_Out1_1) when not(_isEnabled));
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_airspeed/IssueWarning
*)
node  IssueWarning_570_001(
	SWIM_Qcmin_lbspft2_1 : real; SWIM_AirspeedWarningAllowed_1 : real; muxGet_T_Mux_AirspeedMonitorEnable_1 : bool; cvGet_V_AgcasLowSpeedWarn_1 : bool; olcGet_AgcasInterlocks_1 : bool;
	S_ImpactPressure_lbspft2_1 : real; __time_step : real; __nb_step : int;)
returns(
	SWIM_SelfAgcasLowSpeedWarn_1 : real;);
var 
	Constant1_1 : real; Constant2_1 : real; Constant3_1 : real; Constant4_1 : real; If_1 : bool;
	If_2 : bool; ExecutionCond_of_IfActionSubsystem_582_001 : bool; IfActionSubsystem_1 : real; ExecutionCond_of_IfActionSubsystem1_608_001 : bool; IfActionSubsystem1_1 : real;
	LogicalOperator1_1 : bool; LogicalOperator2_1 : bool; Merge_1 : real; RelationalOperator1_1 : bool; RelationalOperator2_1 : bool;
	RelationalOperator3_1 : bool; RelationalOperator4_1 : bool; UnitDelay_1 : real;
let
	Constant1_1 = 1.0;
	Constant2_1 = 1.0;
	Constant3_1 = 0.0;
	Constant4_1 = 1.0;
	(If_1, If_2) = if LogicalOperator2_1 then
		(true, false)
	    else (false, true);
	ExecutionCond_of_IfActionSubsystem_582_001 = If_1;
	IfActionSubsystem_1 = IfActionSubsystem_582_001_condExecSS(S_ImpactPressure_lbspft2_1, SWIM_Qcmin_lbspft2_1, ExecutionCond_of_IfActionSubsystem_582_001, __time_step, __nb_step);
	ExecutionCond_of_IfActionSubsystem1_608_001 = If_2;
	IfActionSubsystem1_1 = IfActionSubsystem1_608_001_condExecSS(UnitDelay_1, ExecutionCond_of_IfActionSubsystem1_608_001, __time_step, __nb_step);
	LogicalOperator1_1 = ( RelationalOperator1_1 or RelationalOperator2_1 );
	LogicalOperator2_1 = ( LogicalOperator1_1 and RelationalOperator3_1 and RelationalOperator4_1 );
	Merge_1 = if ExecutionCond_of_IfActionSubsystem_582_001 then
		IfActionSubsystem_1
	    else if ExecutionCond_of_IfActionSubsystem1_608_001 then
		IfActionSubsystem1_1
	    else (0.0 -> (pre (Merge_1)));
	RelationalOperator1_1 = (bool_to_real(muxGet_T_Mux_AirspeedMonitorEnable_1) = Constant1_1);
	RelationalOperator2_1 = (bool_to_real(cvGet_V_AgcasLowSpeedWarn_1) = Constant2_1);
	RelationalOperator3_1 = (bool_to_real(olcGet_AgcasInterlocks_1) = Constant3_1);
	RelationalOperator4_1 = (SWIM_AirspeedWarningAllowed_1 = Constant4_1);
	UnitDelay_1 = (0.0 -> (pre (Merge_1)));
	SWIM_SelfAgcasLowSpeedWarn_1 = Merge_1;
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_12B_SWIMSpec
*)
contract swim_12B_SWIMSpec_328_035(
	SWIMSpec_weight_1 : real; SWIMSpec_storeCat_1 : int; SWIMSpec_vehAirPress_1 : real; __time_step : real; __nb_step : int;)
returns(
	SWIMSpec_CalAirspeedMin_1 : real; SWIMSpec_lowSpeedWarningAllowed_1 : real; SWIMSpec_swimGet_agcasLowSpeedWarn_1 : real; SWIMSpec_warningTrigForMinPress_1 : real;);
let
	var SWIM_minus_001A_1 : bool = SWIM_minus_001A_340_035(spec139_operator_1, __time_step, __nb_step);
	guarantee "SWIM_minus_001A_340_035" SWIM_minus_001A_1;
	var SWIM_minus_001B_1 : bool = SWIM_minus_001B_344_035(spec156_operator_1, __time_step, __nb_step);
	guarantee "SWIM_minus_001B_344_035" SWIM_minus_001B_1;
	var SWIM_minus_002_1 : bool = SWIM_minus_002_348_035(spec170_operator_1, __time_step, __nb_step);
	guarantee "SWIM_minus_002_348_035" SWIM_minus_002_1;
	var assume_1 : bool = assume_336_035(spec122_operator_1, __time_step, __nb_step);
	assume "assume_336_035" assume_1;
	var lowSpeedWarningTrue_operator_1 : bool = (SWIMSpec_swimGet_agcasLowSpeedWarn_1 = xxSWIMSpec_12_rhs_1);
	var spec122_operator_1 : bool = (SWIMSpec_weight_1 > spec122_rhs_2_1);
	var spec122_rhs_2_1 : real = 0.0;
	var spec139_operator_1 : bool = spec139_operator_355_035(xxSWIMSpec_11_operator_1, xxSWIMSpec_10_operator_1, __time_step, __nb_step);
	var spec156_operator_1 : bool = spec156_operator_356_035(xxSWIMSpec_7_operator_1, xxSWIMSpec_6_operator_1, __time_step, __nb_step);
	var spec170_operator_1 : bool = spec170_operator_357_035(xxSWIMSpec_3_operator_1, lowSpeedWarningTrue_operator_1, __time_step, __nb_step);
	var sqrtOfWeight_sqrt_call_1 : real = sqrt(SWIMSpec_weight_1);
	var xxSWIMSpec_10_operator_1 : bool = (SWIMSpec_CalAirspeedMin_1 = xxSWIMSpec_9_operator_1);
	var xxSWIMSpec_11_operator_1 : bool = (SWIMSpec_storeCat_1 = xxSWIMSpec_13_rhs_1);
	var xxSWIMSpec_12_rhs_1 : real = 1.0;
	var xxSWIMSpec_13_rhs_1 : int = 0;
	var xxSWIMSpec_14_rhs_1 : int = 1;
	var xxSWIMSpec_1_operator_1 : bool = (SWIMSpec_vehAirPress_1 < SWIMSpec_warningTrigForMinPress_1);
	var xxSWIMSpec_2_operator_1 : bool = (SWIMSpec_lowSpeedWarningAllowed_1 = xxSWIMSpec_2_rhs_2_1);
	var xxSWIMSpec_2_rhs_2_1 : real = 1.0;
	var xxSWIMSpec_3_operator_1 : bool = ( xxSWIMSpec_2_operator_1 and xxSWIMSpec_1_operator_1 );
	var xxSWIMSpec_4_operator_1 : real = kind2_times(kind2_times(1.0, xxSWIMSpec_4_rhs_1_1), sqrtOfWeight_sqrt_call_1);
	var xxSWIMSpec_4_rhs_1_1 : real = 1.336940;
	var xxSWIMSpec_5_operator_1 : real = 0.0 + xxSWIMSpec_4_operator_1 + xxSWIMSpec_5_rhs_2_1;
	var xxSWIMSpec_5_rhs_2_1 : real = 10.0;
	var xxSWIMSpec_6_operator_1 : bool = (SWIMSpec_CalAirspeedMin_1 = xxSWIMSpec_5_operator_1);
	var xxSWIMSpec_7_operator_1 : bool = (SWIMSpec_storeCat_1 = xxSWIMSpec_14_rhs_1);
	var xxSWIMSpec_8_operator_1 : real = kind2_times(kind2_times(1.0, xxSWIMSpec_8_rhs_1_1), sqrtOfWeight_sqrt_call_1);
	var xxSWIMSpec_8_rhs_1_1 : real = 1.259210;
	var xxSWIMSpec_9_operator_1 : real = 0.0 + xxSWIMSpec_8_operator_1 + xxSWIMSpec_9_rhs_2_1;
	var xxSWIMSpec_9_rhs_2_1 : real = 10.0;
	assume "NB_STEP" (__nb_step = (0 -> ((pre (__nb_step)) + 1)));
	assume "TIME_STEP" (__time_step = (0.0 -> ((pre (__time_step)) + 0.20)));
tel

(*
Original block name: swim_12B_with_contracts_PP/swim_airspeed
*)
node  swim_airspeed_427_035(
	muxGet_T_Mux_AircraftGrossWeight_lbs_1 : real; diGet_S_CatSwitchPosition_1 : int; E_AI_IMPACT_PRESSURE_1 : real; diGet_S_LandingGearAltFlap_1 : bool; muxGet_T_Mux_AirspeedMonitorEnable_1 : bool;
	cvGet_V_AgcasLowSpeedWarn_1 : bool; olcGet_AgcasInterlocks_1 : bool; __time_step : real; __nb_step : int;)
returns(
	swimGet_AgcasLowSpeedWarn_1 : real; swimGet_QcMinDisable_lbspft2_1 : real; SWIM_Qcmin_lbspft2_1 : real; SWIM_CalAirspeedmin_kts_1 : real; SWIM_ASWarningAllowed_1 : real;);
(*@contract
	import swim_12B_SWIMSpec_328_035(muxGet_T_Mux_AircraftGrossWeight_lbs_1, diGet_S_CatSwitchPosition_1, E_AI_IMPACT_PRESSURE_1, __time_step, __nb_step) returns (SWIM_CalAirspeedmin_kts_1, SWIM_ASWarningAllowed_1, swimGet_AgcasLowSpeedWarn_1, SWIM_Qcmin_lbspft2_1);
*)
var 
	AirspeedMonitoring_1 : real; CalculateminimumimpactpressureforAGCASoperationtobesuspendedandsenttostandby_1 : real; CalculateminimumimpactpressureforwarningtopilotthatAGCASoperationisdegraded_1 : real; CalculatetheminimumcalibratedairspeedbasedonCatSwitch_1 : real; Gettheaircraftweight_1 : real;
	IssueWarning_1 : real;
let
	assert ((-2147483648 <= diGet_S_CatSwitchPosition_1) and (diGet_S_CatSwitchPosition_1 <= 2147483647));
	AirspeedMonitoring_1 = AirspeedMonitoring_435_035(E_AI_IMPACT_PRESSURE_1, CalculateminimumimpactpressureforwarningtopilotthatAGCASoperationisdegraded_1, diGet_S_LandingGearAltFlap_1, __time_step, __nb_step);
	CalculateminimumimpactpressureforAGCASoperationtobesuspendedandsenttostandby_1 = CalculateminimumimpactpressureforAGCASoperationtobesuspendedandsenttostandby_495_035(CalculateminimumimpactpressureforwarningtopilotthatAGCASoperationisdegraded_1, __time_step, __nb_step);
	CalculateminimumimpactpressureforwarningtopilotthatAGCASoperationisdegraded_1 = CalculateminimumimpactpressureforwarningtopilotthatAGCASoperationisdegraded_503_035(CalculatetheminimumcalibratedairspeedbasedonCatSwitch_1, __time_step, __nb_step);
	CalculatetheminimumcalibratedairspeedbasedonCatSwitch_1 = CalculatetheminimumcalibratedairspeedbasedonCatSwitch_519_002(Gettheaircraftweight_1, diGet_S_CatSwitchPosition_1, __time_step, __nb_step);
	Gettheaircraftweight_1 = Gettheaircraftweight_566_001(muxGet_T_Mux_AircraftGrossWeight_lbs_1, __time_step, __nb_step);
	IssueWarning_1 = IssueWarning_570_001(CalculateminimumimpactpressureforAGCASoperationtobesuspendedandsenttostandby_1, AirspeedMonitoring_1, muxGet_T_Mux_AirspeedMonitorEnable_1, cvGet_V_AgcasLowSpeedWarn_1, olcGet_AgcasInterlocks_1, E_AI_IMPACT_PRESSURE_1, __time_step, __nb_step);
	swimGet_AgcasLowSpeedWarn_1 = IssueWarning_1;
	swimGet_QcMinDisable_lbspft2_1 = CalculateminimumimpactpressureforAGCASoperationtobesuspendedandsenttostandby_1;
	SWIM_Qcmin_lbspft2_1 = CalculateminimumimpactpressureforwarningtopilotthatAGCASoperationisdegraded_1;
	SWIM_CalAirspeedmin_kts_1 = CalculatetheminimumcalibratedairspeedbasedonCatSwitch_1;
	SWIM_ASWarningAllowed_1 = AirspeedMonitoring_1;
tel

(*
Original block name: swim_12B_with_contracts_PP
*)
node  swim_12B_with_contracts_PP(
	muxGet_T_Mux_AircraftGrossWeight_lbs_1 : real; diGet_S_CatSwitchPosition_1 : int; E_AI_IMPACT_PRESSURE_1 : real; diGet_S_LandingGearAltFlap_1 : bool; muxGet_T_Mux_AirspeedMonitorEnable_1 : bool;
	cvGet_V_AgcasLowSpeedWarn_1 : bool; olcGet_AgcasInterlocks_1 : bool;)
returns(
	swimGet_AgcasLowSpeedWarn_1 : real; swimGet_QcMinDisable_lbspft2_1 : real; SWIM_Qcmin_lbspft2_1 : real; SWIM_CalAirspeedmin_kts_1 : real; SWIM_ASWarningAllowed_1 : real;);
var 
	swim_airspeed_1 : real; swim_airspeed_2 : real; swim_airspeed_3 : real; swim_airspeed_4 : real; swim_airspeed_5 : real;
	__time_step : real; __nb_step : int;
let
	assert ((-2147483648 <= diGet_S_CatSwitchPosition_1) and (diGet_S_CatSwitchPosition_1 <= 2147483647));
	(swim_airspeed_1, swim_airspeed_2, swim_airspeed_3, swim_airspeed_4, swim_airspeed_5) = swim_airspeed_427_035(muxGet_T_Mux_AircraftGrossWeight_lbs_1, diGet_S_CatSwitchPosition_1, E_AI_IMPACT_PRESSURE_1, diGet_S_LandingGearAltFlap_1, muxGet_T_Mux_AirspeedMonitorEnable_1, cvGet_V_AgcasLowSpeedWarn_1, olcGet_AgcasInterlocks_1, __time_step, __nb_step);
	swimGet_AgcasLowSpeedWarn_1 = swim_airspeed_1;
	swimGet_QcMinDisable_lbspft2_1 = swim_airspeed_2;
	SWIM_Qcmin_lbspft2_1 = swim_airspeed_3;
	SWIM_CalAirspeedmin_kts_1 = swim_airspeed_4;
	SWIM_ASWarningAllowed_1 = swim_airspeed_5;
	__time_step = (0.0 -> ((pre (__time_step)) + 0.20));
	__nb_step = (0 -> ((pre (__nb_step)) + 1));
tel

